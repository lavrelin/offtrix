#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
from config import Config
from models import Base, User, Post, Gender, PostStatus

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def init_database():
    """Initialize database tables"""
    try:
        db_url = Config.DATABASE_URL
        
        logger.info(f"üîç DATABASE_URL (first 50 chars): {db_url[:50]}...")
        
        if not db_url:
            logger.error("‚ùå DATABASE_URL is empty!")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –¥–ª—è async
        if db_url.startswith('sqlite'):
            if not db_url.startswith('sqlite+aiosqlite'):
                db_url = db_url.replace('sqlite:///', 'sqlite+aiosqlite:///')
            logger.info("üìä Using SQLite with aiosqlite")
        elif db_url.startswith('postgres://'):
            db_url = db_url.replace('postgres://', 'postgresql+asyncpg://', 1)
            logger.info("üìä Using PostgreSQL with asyncpg")
        elif db_url.startswith('postgresql://'):
            db_url = db_url.replace('postgresql://', 'postgresql+asyncpg://', 1)
            logger.info("üìä Using PostgreSQL with asyncpg")
        elif db_url.startswith('mysql'):
            # –ù–û–í–û–ï: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ MySQL (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç)
            db_url = db_url.replace('mysql://', 'mysql+aiomysql://', 1)
            logger.info("üìä Using MySQL with aiomysql")
        else:
            logger.warning(f"‚ö†Ô∏è Unknown database type: {db_url[:30]}...")
        
        logger.info(f"‚úÖ Converted URL (first 50 chars): {db_url[:50]}...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("üîÑ Creating async engine...")
        
        engine = create_async_engine(
            db_url,
            echo=False,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: echo=False –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
            pool_pre_ping=True,
            pool_size=5,
            max_overflow=10,
            connect_args={
                'timeout': 30,  # –ù–û–í–û–ï: —Ç–∞–π–º–∞—É—Ç –¥–ª—è SQLite
                'ssl': 'prefer' if 'postgresql' in db_url else None,  # SSL –¥–ª—è PostgreSQL
            }
        )
        
        logger.info("‚è≥ Testing connection...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü
        try:
            async with engine.connect() as conn:
                await conn.execute(text("SELECT 1"))
            logger.info("‚úÖ Connection test successful")
        except Exception as conn_error:
            logger.error(f"‚ùå Connection test failed: {conn_error}")
            logger.error(f"DATABASE_URL: {db_url[:50]}...")
            raise
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üîÑ Creating tables from Base.metadata...")
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        logger.info("‚úÖ Database tables created successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        async with engine.connect() as conn:
            if 'postgresql' in db_url:
                result = await conn.execute(
                    text("SELECT tablename FROM pg_tables WHERE schemaname='public' ORDER BY tablename")
                )
            elif 'mysql' in db_url:
                result = await conn.execute(
                    text("SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA=DATABASE() ORDER BY TABLE_NAME")
                )
            else:
                result = await conn.execute(
                    text("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")
                )
            
            tables = [row[0] for row in result]
            logger.info(f"‚úÖ Tables in database: {tables}")
            
            if 'users' not in tables:
                logger.error("‚ùå Table 'users' not found!")
                return False
            if 'posts' not in tables:
                logger.error("‚ùå Table 'posts' not found!")
                return False
        
        await engine.dispose()
        logger.info("‚úÖ Database initialization completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error initializing database: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(init_database())
        if success:
            print("\n‚úÖ SUCCESS: Database initialized properly")
            exit(0)
        else:
            print("\n‚ùå FAILED: Database initialization failed")
            exit(1)
    except Exception as e:
        print(f"\n‚ùå FATAL ERROR: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
