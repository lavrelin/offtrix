# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —É—Å–ª—É–≥ - –° –ü–û–õ–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô –ú–ï–î–ò–ê –ò –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô
–í–µ—Ä—Å–∏—è 2.0.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ò–º–ø–æ—Ä—Ç–∞ –º–µ–¥–∏–∞ –∏–∑ Telegram
- –ü–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –≤ –ë–î
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
"""
import logging
import random
import re
from typing import List, Dict, Optional
from datetime import datetime
from sqlalchemy import select, and_, or_, func, text
from services.db import db
from models import CatalogPost, CatalogReview, CatalogSubscription, CatalogSession

logger = logging.getLogger(__name__)

# ============= –ö–ê–¢–ï–ì–û–†–ò–ò –ö–ê–¢–ê–õ–û–ì–ê =============
CATALOG_CATEGORIES = {
    'üíá‚Äç‚ôÄÔ∏è –ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥': [
        '–ë–∞—Ä–±–µ—Ä', '–ë—å—é—Ç–∏–ü—Ä–æ—Ü–µ–¥—É—Ä—ã', '–í–æ–ª–æ—Å—ã', '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥',
        '–î–µ–ø–∏–ª—è—Ü–∏—è', '–≠–ø–∏–ª—è—Ü–∏—è', '–ú–∞–Ω–∏–∫—é—Ä', '–†–µ—Å–Ω–∏—Ü—ã –∏ –±—Ä–æ–≤–∏', '–¢–∞—Ç—É'
    ],
    'ü©∫ –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ç–µ–ª–æ': [
        '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–í—Ä–∞—á', '–ú–∞—Å—Å–∞–∂–∏—Å—Ç', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–°–ø–æ—Ä—Ç'
    ],
    'üõ†Ô∏è –£—Å–ª—É–≥–∏ –∏ –ø–æ–º–æ—â—å': [
        '–ê–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫', '–ì—Ä—É–∑—á–∏–∫', '–ö–ª–∏–Ω–∏–Ω–≥', '–ú–∞—Å—Ç–µ—Ä –ø–æ –¥–æ–º—É',
        '–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫', '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏', '–ù—è–Ω—è', '–Æ—Ä–∏—Å—Ç'
    ],
    'üìö –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ': [
        '–ö–∞–Ω–∞–ª—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–µ–Ω–≥–µ—Ä—Å–∫–æ–≥–æ', '–ö–∞–Ω–∞–ª—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ',
        '–ö—É—Ä—Å—ã', '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä', '–ú—É–∑—ã–∫–∞', '–†–∏–µ–ª—Ç–æ—Ä'
    ],
    'üé≠ –î–æ—Å—É–≥ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è': [
        '–ï–¥–∞', '–§–æ—Ç–æ–≥—Ä–∞—Ñ', '–≠–∫—Å–∫—É—Ä—Å–∏–∏', '–î–ª—è –¥–µ—Ç–µ–π', '–†–µ–º–æ–Ω—Ç', '–®–≤–µ—è', '–¶–≤–µ—Ç—ã'
    ]
}


class CatalogService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —É—Å–ª—É–≥ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self):
        self.max_posts_per_page = 5
        self.max_priority_posts = 10
        self.ad_frequency = 10
    
    # ============= –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ =============
    
    async def add_post(
        self,
        user_id: int,
        catalog_link: str,
        category: str,
        name: str,
        tags: List[str],
        media_files: Optional[List[str]] = None,
        telegram_description: Optional[str] = None,
        media_type: Optional[str] = None,
        media_file_id: Optional[str] = None,
        media_group_id: Optional[str] = None,
        media_json: Optional[List[str]] = None
    ) -> Optional[int]:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –º–µ–¥–∏–∞"""
        try:
            async with db.get_session() as session:
                post = CatalogPost(
                    user_id=user_id,
                    catalog_link=catalog_link,
                    category=category,
                    name=name,
                    tags=tags,
                    is_active=True,
                    clicks=0,
                    views=0,
                    # –ú–µ–¥–∏–∞-–ø–æ–ª—è
                    media_type=media_type,
                    media_file_id=media_file_id,
                    media_group_id=media_group_id,
                    media_json=media_json or media_files or []
                )
                
                session.add(post)
                await session.commit()
                await session.refresh(post)
                
                media_info = f"with media ({len(media_files or [])} files)" if media_files else "without media"
                logger.info(f"Added catalog post {post.id} by user {user_id} {media_info}")
                return post.id
                
        except Exception as e:
            logger.error(f"Error adding catalog post: {e}")
            return None
    
    async def get_random_posts(self, user_id: int, count: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å—Ç—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Å –º–µ–¥–∏–∞"""
        try:
            async with db.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await session.execute(
                    select(CatalogSession).where(
                        and_(
                            CatalogSession.user_id == user_id,
                            CatalogSession.session_active == True
                        )
                    )
                )
                user_session = result.scalar_one_or_none()
                
                # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
                if not user_session:
                    user_session = CatalogSession(
                        user_id=user_id,
                        viewed_posts=[],
                        session_active=True
                    )
                    session.add(user_session)
                    await session.commit()
                    await session.refresh(user_session)
                
                viewed_ids = user_session.viewed_posts or []
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã
                result = await session.execute(
                    select(CatalogPost).where(
                        and_(
                            CatalogPost.is_active == True,
                            ~CatalogPost.id.in_(viewed_ids) if viewed_ids else True
                        )
                    ).order_by(func.random()).limit(count)
                )
                posts = result.scalars().all()
                
                if not posts:
                    return []
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                for post in posts:
                    viewed_ids.append(post.id)
                
                user_session.viewed_posts = viewed_ids
                user_session.last_activity = datetime.utcnow()
                await session.commit()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict —Å –º–µ–¥–∏–∞
                return [
                    {
                        'id': p.id,
                        'catalog_link': p.catalog_link,
                        'category': p.category,
                        'name': p.name,
                        'tags': p.tags or [],
                        'views': p.views,
                        'clicks': p.clicks,
                        'media_type': p.media_type,
                        'media_file_id': p.media_file_id,
                        'media_group_id': p.media_group_id,
                        'media_json': p.media_json or []
                    }
                    for p in posts
                ]
                
        except Exception as e:
            logger.error(f"Error getting random posts: {e}")
            return []
    
    # ============= –ù–û–í–´–ï –ú–ï–¢–û–î–´ - –ü–û–ò–°–ö –ò –ò–ú–ü–û–†–¢ =============
    
    async def import_media_from_telegram(self, telegram_link: str) -> Dict:
        """
        –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ –∏–∑ Telegram –ø–æ—Å—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            'media': [file_id1, file_id2, ...],
            'description': '—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å—Ç–∞',
            'media_type': 'photo' / 'video' / 'mixed'
        }
        """
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É
            match = re.match(r'https://t\.me/([a-zA-Z0-9_]+)/(\d+)', telegram_link)
            if not match:
                logger.error(f"Invalid Telegram link format: {telegram_link}")
                return {'media': [], 'description': '', 'media_type': None}
            
            channel_name = match.group(1)
            message_id = int(match.group(2))
            
            logger.info(f"Importing media from @{channel_name}/{message_id}")
            
            # –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
            # 1. telegram.ext.Application –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞
            # 2. –ò–ª–∏ Telegram Client API
            # 3. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
            # –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É - –º–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
            return {
                'media': [],  # –°–ø–∏—Å–æ–∫ file_id –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
                'description': '',  # –¢–µ–∫—Å—Ç –∏–∑ –ø–æ—Å—Ç–∞
                'media_type': None  # 'photo', 'video', 'mixed'
            }
            
        except Exception as e:
            logger.error(f"Error importing media from Telegram: {e}")
            return {'media': [], 'description': '', 'media_type': None}
    
    async def search_posts(self, query: str, limit: int = 10) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Ç–µ–≥–∞–º
        
        –ò—â–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∏ —Ç–µ–≥–∞—Ö –ø–æ—Å—Ç–æ–≤
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: search_posts("–º–∞–Ω–∏–∫—é—Ä –≥–µ–ª—å-–ª–∞–∫")
        """
        try:
            async with db.get_session() as session:
                # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
                keywords = query.lower().split()
                
                conditions = []
                for keyword in keywords:
                    # –ò—â–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    conditions.append(
                        func.lower(CatalogPost.name).contains(keyword)
                    )
                
                # –ò—â–µ–º –≤ —Ç–µ–≥–∞—Ö
                for keyword in keywords:
                    conditions.append(
                        CatalogPost.tags.contains([keyword])
                    )
                
                query_obj = select(CatalogPost).where(
                    and_(
                        CatalogPost.is_active == True,
                        or_(*conditions) if conditions else True
                    )
                ).limit(limit)
                
                result = await session.execute(query_obj)
                posts = result.scalars().all()
                
                return [
                    {
                        'id': p.id,
                        'catalog_link': p.catalog_link,
                        'category': p.category,
                        'name': p.name,
                        'tags': p.tags or [],
                        'views': p.views,
                        'clicks': p.clicks,
                        'media_type': p.media_type,
                        'media_file_id': p.media_file_id,
                        'media_group_id': p.media_group_id,
                        'media_json': p.media_json or []
                    }
                    for p in posts
                ]
                
        except Exception as e:
            logger.error(f"Error searching posts: {e}")
            return []
    
    # ============= –ú–ï–¢–û–î–´ –û–¢–ó–´–í–û–í =============
    
    async def add_review(
        self,
        post_id: int,
        user_id: int,
        review_text: str,
        rating: int = 5,
        username: Optional[str] = None
    ) -> Optional[int]:
        """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø–æ—Å—Ç–µ"""
        try:
            async with db.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç
                post_result = await session.execute(
                    select(CatalogPost).where(CatalogPost.id == post_id)
                )
                post = post_result.scalar_one_or_none()
                
                if not post:
                    logger.warning(f"Post {post_id} not found for review")
                    return None
                
                # –°–æ–∑–¥–∞—ë–º –æ—Ç–∑—ã–≤
                review = CatalogReview(
                    catalog_post_id=post_id,
                    user_id=user_id,
                    username=username,
                    review_text=review_text[:500],  # –ú–∞–∫—Å 500 —Å–∏–º–≤–æ–ª–æ–≤
                    rating=max(1, min(5, rating))  # 1-5
                )
                
                session.add(review)
                await session.commit()
                await session.refresh(review)
                
                logger.info(f"Added review {review.id} for post {post_id} by user {user_id}")
                return review.id
                
        except Exception as e:
            logger.error(f"Error adding review: {e}")
            return None
    
    async def get_reviews(self, post_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ø–æ—Å—Ç–∞"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogReview)
                    .where(CatalogReview.catalog_post_id == post_id)
                    .order_by(CatalogReview.created_at.desc())
                    .limit(limit)
                )
                reviews = result.scalars().all()
                
                return [
                    {
                        'id': r.id,
                        'user_id': r.user_id,
                        'username': r.username,
                        'review_text': r.review_text,
                        'rating': r.rating,
                        'created_at': r.created_at.isoformat() if r.created_at else None
                    }
                    for r in reviews
                ]
                
        except Exception as e:
            logger.error(f"Error getting reviews: {e}")
            return []
    
    # ============= –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• =============
    
    async def get_post_by_id(self, post_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID —Å –º–µ–¥–∏–∞"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost).where(CatalogPost.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    return None
                
                return {
                    'id': post.id,
                    'catalog_link': post.catalog_link,
                    'category': post.category,
                    'name': post.name,
                    'tags': post.tags or [],
                    'views': post.views,
                    'clicks': post.clicks,
                    'media_type': post.media_type,
                    'media_file_id': post.media_file_id,
                    'media_group_id': post.media_group_id,
                    'media_json': post.media_json or []
                }
                
        except Exception as e:
            logger.error(f"Error getting post {post_id}: {e}")
            return None
    
    async def get_views_stats(self, limit: int = 20) -> List[tuple]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - –¢–û–ü –ø–æ—Å—Ç–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫: [(post_id, views, name), ...]
        """
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(
                        CatalogPost.id,
                        CatalogPost.views,
                        CatalogPost.name
                    ).where(CatalogPost.is_active == True)
                    .order_by(CatalogPost.views.desc())
                    .limit(limit)
                )
                
                stats = result.all()
                logger.info(f"Retrieved views stats for {len(stats)} posts")
                return stats
                
        except Exception as e:
            logger.error(f"Error getting views stats: {e}")
            return []
    
    async def get_category_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(
                        CatalogPost.category,
                        func.count(CatalogPost.id).label('count')
                    ).where(CatalogPost.is_active == True)
                    .group_by(CatalogPost.category)
                    .order_by(func.count(CatalogPost.id).desc())
                )
                
                stats = {}
                for category, count in result.all():
                    stats[category] = count
                
                logger.info(f"Category stats: {stats}")
                return stats
                
        except Exception as e:
            logger.error(f"Error getting category stats: {e}")
            return {}
    
    async def get_user_posts(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost)
                    .where(CatalogPost.user_id == user_id)
                    .order_by(CatalogPost.created_at.desc())
                )
                posts = result.scalars().all()
                
                return [
                    {
                        'id': p.id,
                        'catalog_link': p.catalog_link,
                        'category': p.category,
                        'name': p.name,
                        'tags': p.tags or [],
                        'views': p.views,
                        'clicks': p.clicks,
                        'is_active': p.is_active,
                        'created_at': p.created_at.isoformat() if p.created_at else None
                    }
                    for p in posts
                ]
                
        except Exception as e:
            logger.error(f"Error getting user posts: {e}")
            return []
    
    # ============= –ú–ï–¢–û–î–´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø =============
    
    async def update_post_media(
        self,
        post_id: int,
        media_type: str,
        media_file_id: str,
        media_group_id: Optional[str] = None,
        media_json: Optional[List[str]] = None
    ) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost).where(CatalogPost.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.warning(f"Post {post_id} not found")
                    return False
                
                post.media_type = media_type
                post.media_file_id = media_file_id
                post.media_group_id = media_group_id
                post.media_json = media_json or []
                post.updated_at = datetime.utcnow()
                
                await session.commit()
                logger.info(f"Updated media for post {post_id}: {media_type}")
                return True
                
        except Exception as e:
            logger.error(f"Error updating post media: {e}")
            return False
    
    async def delete_post(self, post_id: int, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost).where(CatalogPost.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.warning(f"Post {post_id} not found")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
                if post.user_id != user_id:
                    logger.warning(f"User {user_id} not authorized to delete post {post_id}")
                    return False
                
                post.is_active = False
                await session.commit()
                
                logger.info(f"Deleted post {post_id} by user {user_id}")
                return True
                
        except Exception as e:
            logger.error(f"Error deleting post: {e}")
            return False
    
    # ============= –ú–ï–¢–û–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =============
    
    async def increment_views(self, post_id: int):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost).where(CatalogPost.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if post:
                    post.views += 1
                    await session.commit()
                    
        except Exception as e:
            logger.error(f"Error incrementing views: {e}")
    
    async def increment_clicks(self, post_id: int):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost).where(CatalogPost.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if post:
                    post.clicks += 1
                    await session.commit()
                    
        except Exception as e:
            logger.error(f"Error incrementing clicks: {e}")
    
    # ============= –ú–ï–¢–û–î–´ –°–ï–°–°–ò–ô =============
    
    async def reset_session(self, user_id: int):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogSession).where(CatalogSession.user_id == user_id)
                )
                user_session = result.scalar_one_or_none()
                
                if user_session:
                    user_session.viewed_posts = []
                    user_session.last_activity = datetime.utcnow()
                    await session.commit()
                    logger.info(f"Reset session for user {user_id}")
                    
        except Exception as e:
            logger.error(f"Error resetting session: {e}")
    
    # ============= –ú–ï–¢–û–î–´ –ü–†–ò–û–†–ò–¢–ï–¢–ê –ò –†–ï–ö–õ–ê–ú–´ =============
    
    async def set_priority_posts(self, links: List[str]) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ —Å—Å—ã–ª–∫–∞–º"""
        try:
            count = 0
            async with db.get_session() as session:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
                posts_to_reset = (await session.execute(
                    select(CatalogPost).where(CatalogPost.is_priority == True)
                )).scalars().all()
                
                for post in posts_to_reset:
                    post.is_priority = False
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
                for link in links[:self.max_priority_posts]:
                    result = await session.execute(
                        select(CatalogPost).where(CatalogPost.catalog_link == link)
                    )
                    post = result.scalar_one_or_none()
                    
                    if post:
                        post.is_priority = True
                        count += 1
                
                await session.commit()
                logger.info(f"Set {count} priority posts")
                return count
                
        except Exception as e:
            logger.error(f"Error setting priority posts: {e}")
            return 0
    
    async def add_ad_post(self, catalog_link: str, description: str) -> Optional[int]:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            async with db.get_session() as session:
                post = CatalogPost(
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ—Å—Ç
                    catalog_link=catalog_link,
                    category='–†–µ–∫–ª–∞–º–∞',
                    name=description,
                    tags=[],
                    is_active=True,
                    is_ad=True,
                    ad_frequency=self.ad_frequency
                )
                
                session.add(post)
                await session.commit()
                await session.refresh(post)
                
                logger.info(f"Added ad post {post.id}")
                return post.id
                
        except Exception as e:
            logger.error(f"Error adding ad post: {e}")
            return None
    
    # ============= –ú–ï–¢–û–î–´ –ü–û–î–ü–ò–°–û–ö =============
    
    async def subscribe_to_category(self, user_id: int, category: str) -> bool:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            async with db.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
                result = await session.execute(
                    select(CatalogSubscription).where(
                        and_(
                            CatalogSubscription.user_id == user_id,
                            CatalogSubscription.subscription_value == category
                        )
                    )
                )
                existing = result.scalar_one_or_none()
                
                if existing:
                    logger.info(f"User {user_id} already subscribed to {category}")
                    return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                subscription = CatalogSubscription(
                    user_id=user_id,
                    subscription_type='category',
                    subscription_value=category
                )
                
                session.add(subscription)
                await session.commit()
                
                logger.info(f"User {user_id} subscribed to {category}")
                return True
                
        except Exception as e:
            logger.error(f"Error subscribing to category: {e}")
            return False
    
    async def unsubscribe_from_category(self, user_id: int, category: str) -> bool:
        """–û—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogSubscription).where(
                        and_(
                            CatalogSubscription.user_id == user_id,
                            CatalogSubscription.subscription_value == category
                        )
                    )
                )
                subscription = result.scalar_one_or_none()
                
                if subscription:
                    await session.delete(subscription)
                    await session.commit()
                    logger.info(f"User {user_id} unsubscribed from {category}")
                    return True
                
                return False
                
        except Exception as e:
            logger.error(f"Error unsubscribing from category: {e}")
            return False
    
    async def get_category_subscribers(self, category: str) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogSubscription.user_id).where(
                        and_(
                            CatalogSubscription.subscription_type == 'category',
                            CatalogSubscription.subscription_value == category
                        )
                    )
                )
                
                user_ids = [row[0] for row in result.all()]
                logger.info(f"Found {len(user_ids)} subscribers for category {category}")
                return user_ids
                
        except Exception as e:
            logger.error(f"Error getting category subscribers: {e}")
            return []
    
    # ============= –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò =============
    
    async def get_posts_with_media(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost).where(
                        and_(
                            CatalogPost.is_active == True,
                            CatalogPost.media_type.isnot(None)
                        )
                    ).limit(limit)
                )
                posts = result.scalars().all()
                
                return [
                    {
                        'id': p.id,
                        'category': p.category,
                        'name': p.name,
                        'media_type': p.media_type,
                        'views': p.views,
                        'clicks': p.clicks
                    }
                    for p in posts
                ]
                
        except Exception as e:
            logger.error(f"Error getting posts with media: {e}")
            return []
    
    async def get_posts_without_media(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –±–µ–∑ –º–µ–¥–∏–∞ (–¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å)"""
        try:
            async with db.get_session() as session:
                result = await session.execute(
                    select(CatalogPost).where(
                        and_(
                            CatalogPost.is_active == True,
                            CatalogPost.media_type.is_(None)
                        )
                    ).limit(limit)
                )
                posts = result.scalars().all()
                
                return [
                    {
                        'id': p.id,
                        'user_id': p.user_id,
                        'category': p.category,
                        'name': p.name,
                        'catalog_link': p.catalog_link
                    }
                    for p in posts
                ]
                
        except Exception as e:
            logger.error(f"Error getting posts without media: {e}")
            return []
    
    async def get_catalog_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            async with db.get_session() as session:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                total_result = await session.execute(
                    select(func.count(CatalogPost.id)).where(CatalogPost.is_active == True)
                )
                total_posts = total_result.scalar()
                
                # –ü–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞
                media_result = await session.execute(
                    select(func.count(CatalogPost.id)).where(
                        and_(
                            CatalogPost.is_active == True,
                            CatalogPost.media_type.isnot(None)
                        )
                    )
                )
                posts_with_media = media_result.scalar()
                
                # –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –∫–ª–∏–∫–∏
                views_result = await session.execute(
                    select(func.sum(CatalogPost.views)).where(CatalogPost.is_active == True)
                )
                total_views = views_result.scalar() or 0
                
                clicks_result = await session.execute(
                    select(func.sum(CatalogPost.clicks)).where(CatalogPost.is_active == True)
                )
                total_clicks = clicks_result.scalar() or 0
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                sessions_result = await session.execute(
                    select(func.count(CatalogSession.id)).where(CatalogSession.session_active == True)
                )
                active_sessions = sessions_result.scalar()
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                reviews_result = await session.execute(
                    select(func.count(CatalogReview.id))
                )
                total_reviews = reviews_result.scalar() or 0
                
                return {
                    'total_posts': total_posts,
                    'posts_with_media': posts_with_media,
                    'posts_without_media': total_posts - posts_with_media,
                    'media_percentage': round((posts_with_media / total_posts * 100), 1) if total_posts > 0 else 0,
                    'total_views': total_views,
                    'total_clicks': total_clicks,
                    'ctr': round((total_clicks / total_views * 100), 2) if total_views > 0 else 0,
                    'active_sessions': active_sessions,
                    'total_reviews': total_reviews
                }
                
        except Exception as e:
            logger.error(f"Error getting catalog stats: {e}")
            return {
                'total_posts': 0,
                'posts_with_media': 0,
                'posts_without_media': 0,
                'media_percentage': 0,
                'total_views': 0,
                'total_clicks': 0,
                'ctr': 0,
                'active_sessions': 0,
                'total_reviews': 0
            }


# ============= –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =============

catalog_service = CatalogService()

__all__ = [
    'catalog_service',
    'CatalogService',
    'CATALOG_CATEGORIES'
]
