# -*- coding: utf-8 -*-
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
from config import Config
import pytz

logger = logging.getLogger(__name__)

# Timezone –ë—É–¥–∞–ø–µ—à—Ç–∞
BUDAPEST_TZ = pytz.timezone('Europe/Budapest')

# –í—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ë—É–¥–∞–ø–µ—à—Ç)
STATS_TIMES_BUDAPEST = [
    (9, 6),      # 09:06
    (15, 16),    # 15:16
    (23, 23),    # 23:23
    (21, 11),    # 21:11
    (3, 45),     # 03:45
    (11, 18),    # 11:18
]

class StatsScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏"""
    
    def __init__(self):
        self.task: Optional[asyncio.Task] = None
        self.running = False
        self.admin_notifications = None
        self._stop_event = asyncio.Event()
    
    def set_admin_notifications(self, admin_notifications):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.admin_notifications = admin_notifications
        logger.info("Admin notifications service set for stats scheduler")
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.task and not self.task.done():
            logger.warning("Stats scheduler already running")
            return
        
        if not self.admin_notifications:
            logger.error("Admin notifications service not set")
            return
        
        self.running = True
        self._stop_event.clear()
        self.task = asyncio.create_task(self._stats_loop())
        logger.info("Stats scheduler started")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        logger.info(f"üìÖ Statistics schedule (Budapest timezone):")
        for hour, minute in STATS_TIMES_BUDAPEST:
            logger.info(f"  ‚è∞ {hour:02d}:{minute:02d}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
        logger.info("Stopping stats scheduler...")
        self.running = False
        self._stop_event.set()
        
        if self.task:
            try:
                # –î–∞—ë–º –∑–∞–¥–∞—á–µ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                await asyncio.wait_for(self.task, timeout=5.0)
                logger.info("Stats scheduler task completed")
            except asyncio.TimeoutError:
                logger.warning("Stats scheduler task timeout, cancelling...")
                self.task.cancel()
                try:
                    await self.task
                except asyncio.CancelledError:
                    logger.info("Stats scheduler task cancelled")
            except asyncio.CancelledError:
                logger.info("Stats scheduler task was cancelled")
            except Exception as e:
                logger.error(f"Error stopping stats scheduler: {e}")
            finally:
                self.task = None
        
        logger.info("Stats scheduler stopped")
    
    async def _stats_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("Stats loop started")
        
        try:
            while self.running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ
                    budapest_now = datetime.now(BUDAPEST_TZ)
                    current_hour = budapest_now.hour
                    current_minute = budapest_now.minute
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                    should_send = False
                    for scheduled_hour, scheduled_minute in STATS_TIMES_BUDAPEST:
                        if current_hour == scheduled_hour and current_minute == scheduled_minute:
                            should_send = True
                            break
                    
                    if should_send and self.running:
                        logger.info(f"‚è∞ Stats time reached: {current_hour:02d}:{current_minute:02d} Budapest")
                        try:
                            await self.admin_notifications.send_statistics()
                            logger.info("‚úÖ Statistics sent successfully")
                        except Exception as e:
                            logger.error(f"Error sending statistics: {e}")
                        
                        # –ñ–¥—ë–º 2 –º–∏–Ω—É—Ç—ã —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–≤–∞–∂–¥—ã
                        await asyncio.sleep(120)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    try:
                        await asyncio.wait_for(
                            self._stop_event.wait(),
                            timeout=30
                        )
                        # –ï—Å–ª–∏ stop event —Å—Ä–∞–±–æ—Ç–∞–ª - –≤—ã—Ö–æ–¥–∏–º
                        if not self.running:
                            logger.info("Stats loop received stop signal")
                            break
                    except asyncio.TimeoutError:
                        # Timeout - –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        pass
                    
                except asyncio.CancelledError:
                    logger.info("Stats loop cancelled")
                    raise
                except Exception as e:
                    logger.error(f"Error in stats loop: {e}")
                    await asyncio.sleep(60)
                    
        except asyncio.CancelledError:
            logger.info("Stats loop cancelled (outer)")
            raise
        except Exception as e:
            logger.error(f"Unexpected error in stats loop: {e}", exc_info=True)
        finally:
            logger.info("Stats loop finished")
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        return self.running and self.task and not self.task.done()
    
    async def send_stats_now(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã)"""
        if not self.admin_notifications:
            logger.error("Admin notifications service not set")
            return False
        
        try:
            await self.admin_notifications.send_statistics()
            logger.info("Statistics sent manually")
            return True
        except Exception as e:
            logger.error(f"Error sending stats: {e}")
            return False
    
    def get_next_stats_time(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        budapest_now = datetime.now(BUDAPEST_TZ)
        current_hour = budapest_now.hour
        current_minute = budapest_now.minute
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        next_time = None
        for hour, minute in sorted(STATS_TIMES_BUDAPEST):
            if (hour > current_hour) or (hour == current_hour and minute > current_minute):
                next_time = (hour, minute)
                break
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞
        if not next_time:
            next_time = sorted(STATS_TIMES_BUDAPEST)[0]
            return f"–ó–∞–≤—Ç—Ä–∞ –≤ {next_time[0]:02d}:{next_time[1]:02d}"
        
        return f"–°–µ–≥–æ–¥–Ω—è –≤ {next_time[0]:02d}:{next_time[1]:02d}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
stats_scheduler = StatsScheduler()
