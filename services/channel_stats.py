# -*- coding: utf-8 -*-
"""
Channel Stats Service v2.0
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ Day/Week/Month
"""
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from config import Config
import pytz

logger = logging.getLogger(__name__)

BUDAPEST_TZ = pytz.timezone('Europe/Budapest')

class ChannelStatsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.bot = None
        self.stats_history = {}  # –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {channel: {date: count}}
        self.chat_messages = {}
        self.hourly_activity = {}
    
    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
        logger.info("Bot instance set for channel stats service")
    
    async def get_channel_stats(self, channel_id: int, channel_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
        try:
            if not self.bot:
                logger.warning("Bot instance not set")
                return None
            
            chat = await self.bot.get_chat(channel_id)
            
            try:
                member_count = await self.bot.get_chat_member_count(channel_id)
            except Exception as e:
                logger.warning(f"Could not get member count for {channel_name}: {e}")
                member_count = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
            if channel_name not in self.stats_history:
                self.stats_history[channel_name] = {}
            
            now = datetime.now(BUDAPEST_TZ)
            today_key = now.strftime('%Y-%m-%d')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            self.stats_history[channel_name][today_key] = member_count
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            changes = self._calculate_changes(channel_name, member_count, now)
            
            stats = {
                'name': channel_name,
                'title': chat.title,
                'member_count': member_count,
                'day_change': changes['day_change'],
                'day_prev': changes['day_prev'],
                'week_change': changes['week_change'],
                'week_prev': changes['week_prev'],
                'month_change': changes['month_change'],
                'month_prev': changes['month_prev'],
                'type': chat.type,
                'timestamp': now
            }
            
            logger.info(f"Stats collected for {channel_name}: {member_count} members")
            return stats
            
        except Exception as e:
            logger.error(f"Error getting stats for {channel_name} ({channel_id}): {e}")
            return {
                'name': channel_name,
                'error': str(e),
                'timestamp': datetime.now(BUDAPEST_TZ)
            }
    
    def _calculate_changes(self, channel_name: str, current_count: int, now: datetime) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü"""
        history = self.stats_history.get(channel_name, {})
        
        # –î–µ–Ω—å –Ω–∞–∑–∞–¥
        day_ago_key = (now - timedelta(days=1)).strftime('%Y-%m-%d')
        day_prev = history.get(day_ago_key, current_count)
        day_change = current_count - day_prev if day_prev else 0
        
        # –ù–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        days_to_monday = now.weekday()  # 0 = Monday
        week_start = now - timedelta(days=days_to_monday)
        week_ago_key = week_start.strftime('%Y-%m-%d')
        week_prev = history.get(week_ago_key, current_count)
        week_change = current_count - week_prev if week_prev else 0
        
        # –ú–µ—Å—è—Ü –Ω–∞–∑–∞–¥ (1-–µ —á–∏—Å–ª–æ)
        month_start = now.replace(day=1)
        month_ago_key = month_start.strftime('%Y-%m-%d')
        month_prev = history.get(month_ago_key, current_count)
        month_change = current_count - month_prev if month_prev else 0
        
        return {
            'day_change': day_change,
            'day_prev': day_prev,
            'week_change': week_change,
            'week_prev': week_prev,
            'month_change': month_change,
            'month_prev': month_prev,
        }
    
    def increment_message_count(self, chat_id: int):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞"""
        if chat_id not in self.chat_messages:
            self.chat_messages[chat_id] = {
                'count': 0,
                'last_reset': datetime.now(BUDAPEST_TZ)
            }
        
        self.chat_messages[chat_id]['count'] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ heatmap –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        current_hour = datetime.now(BUDAPEST_TZ).hour
        chat_name = self._get_chat_name_by_id(chat_id)
        
        if chat_name not in self.hourly_activity:
            self.hourly_activity[chat_name] = {f"{h:02d}:00": 0 for h in range(24)}
        
        self.hourly_activity[chat_name][f"{current_hour:02d}:00"] += 1
    
    def reset_message_count(self, chat_id: int):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞"""
        self.chat_messages[chat_id] = {
            'count': 0,
            'last_reset': datetime.now(BUDAPEST_TZ)
        }
    
    def _get_chat_name_by_id(self, chat_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ ID"""
        chat_map = {
            Config.STATS_CHANNELS.get('catalog'): "üåë Catalog",
            Config.STATS_CHANNELS.get('trade'): "üåí Marketplace",
            Config.STATS_CHANNELS.get('budapest_main'): "üåì Budapest",
            Config.STATS_CHANNELS.get('budapest_chat'): "üåî Chat",
            Config.STATS_CHANNELS.get('partners'): "üåï Partners",
            Config.STATS_CHANNELS.get('budapest_people'): "üåñ TopPeople",
            Config.STATS_CHANNELS.get('budapes'): "üåó ü¶ÑBudapest",
        }
        return chat_map.get(chat_id, f"chat_{chat_id}")
    
    async def get_all_stats(self) -> Dict[str, Any]:
        """–°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º"""
        try:
            all_stats = {
                'timestamp': datetime.now(BUDAPEST_TZ),
                'channels': [],
                'total_changes': {
                    'day': 0,
                    'week': 0,
                    'month': 0
                }
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
            for name, channel_id in Config.STATS_CHANNELS.items():
                try:
                    stats = await self.get_channel_stats(channel_id, name)
                    if stats and 'error' not in stats:
                        all_stats['channels'].append(stats)
                        
                        # –°—É–º–º–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        all_stats['total_changes']['day'] += stats.get('day_change', 0)
                        all_stats['total_changes']['week'] += stats.get('week_change', 0)
                        all_stats['total_changes']['month'] += stats.get('month_change', 0)
                        
                except Exception as e:
                    logger.error(f"Error collecting stats for {name}: {e}")
            
            return all_stats
            
        except Exception as e:
            logger.error(f"Error collecting all stats: {e}")
            return {
                'timestamp': datetime.now(BUDAPEST_TZ),
                'error': str(e),
                'channels': []
            }
    
    def format_stats_message(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            from data.user_data import user_data, get_top_commands
            
            now = stats['timestamp']
            timestamp = now.strftime('%H:%M')
            
            # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            days_to_monday = now.weekday()
            week_start = now - timedelta(days=days_to_monday)
            week_start_str = week_start.strftime('%d.%m')
            
            # –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            month_start = now.replace(day=1)
            month_start_str = month_start.strftime('%d.%m')
            
            message = ""
            
            # –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            channel_names = {
                'catalog': 'üåë –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥',
                'trade': 'üåí Marketplace',
                'budapest_main': 'üåì –ë—É–¥–∞–ø–µ—à—Ç',
                'budapest_chat': 'üåî –ß–∞—Ç',
                'partners': 'üåï –ü–∞—Ä—Ç–Ω–µ—Ä—Å',
                'budapest_people': 'üåñ TopPeople',
                'budapes': 'üåó ü¶ÑBudapest',
            }
            
            # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            for key in channel_names:
                channel_id = Config.STATS_CHANNELS.get(key)
                if channel_id:
                    message += f"{channel_names[key]} ‚Äî{channel_id}\n"
            
            message += f"üåò TrixBot - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ @Trixlivebot\n\n"
            message += f"‚ö°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp} (–ë—É–¥–∞–ø–µ—à—Ç)\n"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è Week –∏ Month
            total_week = 0
            total_month = 0
            if stats.get('channels'):
                for channel in stats['channels']:
                    if 'error' not in channel:
                        total_week += channel.get('week_change', 0)
                        total_month += channel.get('month_change', 0)
            
            message += f"Week : {total_week} - —Å—Ç–∞—Ä—Ç –Ω–µ–¥–µ–ª–∏ –≤ –ø–Ω {timestamp}\n"
            message += f"Month: {total_month} - —Å—Ç–∞—Ä—Ç –º–µ—Å—è—Ü–∞ 1–≥–æ —á–∏—Å–ª–∞ {timestamp}\n\n"
            
            # TOP FIVE –∫–æ–º–∞–Ω–¥
            top_commands = get_top_commands(5)
            if top_commands:
                message += "üìèüèÜ **TOP ‚úãFIVE:**\n"
                medals = ['ü•á', 'ü•à', 'ü•â', '‚ö°Ô∏è', 'üí•']
                for i, (cmd, count) in enumerate(top_commands):
                    medal = medals[i] if i < len(medals) else '‚ñ´Ô∏è'
                    message += f"‚ñ´Ô∏è {medal}/{cmd} ‚Äî {count} —Ä–∞–∑\n"
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            message += f"\nüîò –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¢—Ä–∏–∫—Å –±–æ—Ç–∞:\n"
            active_day = sum(
                1 for d in user_data.values() 
                if datetime.now() - d['last_activity'] <= timedelta(days=1)
            )
            active_week = sum(
                1 for d in user_data.values() 
                if datetime.now() - d['last_activity'] <= timedelta(days=7)
            )
            active_month = sum(
                1 for d in user_data.values() 
                if datetime.now() - d['last_activity'] <= timedelta(days=30)
            )
            
            message += f"Day: {active_day}\n"
            message += f"Week: {active_week}\n"
            message += f"Month: {active_month}\n"
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting stats message: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
channel_stats = ChannelStatsService()
