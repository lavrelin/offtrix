#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å—Ç–∞–º
python migrate_catalog_numbers.py
"""

import asyncio
import logging
import random
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine
from config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def migrate_catalog_numbers():
    """–î–æ–±–∞–≤–∏—Ç—å catalog_number –∫ –ø–æ—Å—Ç–∞–º"""
    try:
        db_url = Config.DATABASE_URL
        
        if not db_url:
            logger.error("‚ùå DATABASE_URL not set!")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL
        if db_url.startswith('postgresql://'):
            db_url = db_url.replace('postgresql://', 'postgresql+asyncpg://', 1)
        elif db_url.startswith('postgres://'):
            db_url = db_url.replace('postgres://', 'postgresql+asyncpg://', 1)
        
        logger.info(f"üìä Database URL: {db_url[:60]}...")
        
        engine = create_async_engine(db_url, echo=False, pool_pre_ping=True)
        
        logger.info("üîÑ –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É catalog_number...")
        
        # SQL –¥–ª—è PostgreSQL
        if 'postgresql' in db_url:
            migration_sql = """
            ALTER TABLE catalog_posts 
            ADD COLUMN IF NOT EXISTS catalog_number INTEGER UNIQUE;
            
            CREATE INDEX IF NOT EXISTS idx_catalog_number ON catalog_posts(catalog_number);
            """
        # SQL –¥–ª—è SQLite
        else:
            migration_sql = """
            ALTER TABLE catalog_posts 
            ADD COLUMN catalog_number INTEGER;
            """
        
        try:
            async with engine.begin() as conn:
                for statement in migration_sql.split(';'):
                    statement = statement.strip()
                    if statement:
                        await conn.execute(text(statement))
            
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ catalog_number –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            if 'already exists' in str(e).lower() or 'duplicate' in str(e).lower():
                logger.info("‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ catalog_number —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")
                return False
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ—Å—Ç–∞–º
        logger.info("üîÑ –ü—Ä–∏—Å–≤–∞–∏–≤–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ—Å—Ç–∞–º...")
        
        try:
            async with engine.begin() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤
                result = await conn.execute(
                    text("SELECT id FROM catalog_posts WHERE catalog_number IS NULL")
                )
                posts = result.fetchall()
                
                if posts:
                    used_numbers = set()
                    
                    for post_id, in posts:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                        while True:
                            number = random.randint(1, 9999)
                            if number not in used_numbers:
                                used_numbers.add(number)
                                break
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
                        await conn.execute(
                            text(f"UPDATE catalog_posts SET catalog_number = {number} WHERE id = {post_id}")
                        )
                    
                    logger.info(f"‚úÖ –ü—Ä–∏—Å–≤–æ–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ {len(posts)} –ø–æ—Å—Ç–∞–º")
                else:
                    logger.info("‚ÑπÔ∏è  –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–æ–º–µ—Ä–∞")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤: {e}")
            return False
        
        await engine.dispose()
        
        logger.info("\n" + "="*60)
        logger.info("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ù–û–ú–ï–†–û–í –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("="*60)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    print("\n" + "="*60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–´–• –ù–û–ú–ï–†–û–í...")
    print("="*60 + "\n")
    
    success = asyncio.run(migrate_catalog_numbers())
    
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py\n")
        exit(0)
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!\n")
        exit(1)
