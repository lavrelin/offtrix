#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine
from config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def migrate_database():
    """
    –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ë–î
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –∑–∞–Ω–æ–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
    """
    try:
        db_url = Config.DATABASE_URL
        
        if not db_url:
            logger.error("‚ùå DATABASE_URL not set!")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if db_url.startswith('postgresql://'):
            db_url = db_url.replace('postgresql://', 'postgresql+asyncpg://', 1)
        elif db_url.startswith('postgres://'):
            db_url = db_url.replace('postgres://', 'postgresql+asyncpg://', 1)
        elif db_url.startswith('sqlite:///'):
            db_url = db_url.replace('sqlite:///', 'sqlite+aiosqlite:///', 1)
        elif db_url.startswith('sqlite://'):
            db_url = db_url.replace('sqlite://', 'sqlite+aiosqlite:///', 1)
        
        logger.info(f"üìä Database URL: {db_url[:60]}...")
        
        # –°–æ–∑–¥–∞–µ–º engine
        engine = create_async_engine(
            db_url,
            echo=False,
            pool_pre_ping=True,
            connect_args={'timeout': 30} if 'sqlite' in db_url else {}
        )
        
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            async with engine.connect() as conn:
                result = await conn.execute(text("SELECT 1"))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            await engine.dispose()
            return False
        
        # –£–î–ê–õ–Ø–ï–ú –í–°–ï –¢–ê–ë–õ–ò–¶–´
        logger.info("üî• –£–î–ê–õ–Ø–Æ –í–°–ï –¢–ê–ë–õ–ò–¶–´...")
        try:
            async with engine.begin() as conn:
                if 'postgresql' in db_url:
                    # PostgreSQL
                    await conn.execute(text("""
                        DROP TABLE IF EXISTS posts CASCADE;
                        DROP TABLE IF EXISTS users CASCADE;
                    """))
                else:
                    # SQLite
                    await conn.execute(text("DROP TABLE IF EXISTS posts;"))
                    await conn.execute(text("DROP TABLE IF EXISTS users;"))
                
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è): {e}")
        
        # –°–û–ó–î–ê–ï–ú –ù–û–í–´–ï –¢–ê–ë–õ–ò–¶–´
        logger.info("üî® –°–û–ó–î–ê–Æ –ù–û–í–´–ï –¢–ê–ë–õ–ò–¶–´...")
        try:
            from models import Base
            
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            await engine.dispose()
            return False
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –¢–ê–ë–õ–ò–¶–´
        logger.info("‚úÖ –ü–†–û–í–ï–†–Ø–Æ –¢–ê–ë–õ–ò–¶–´...")
        try:
            async with engine.connect() as conn:
                if 'postgresql' in db_url:
                    result = await conn.execute(
                        text("SELECT tablename FROM pg_tables WHERE schemaname='public'")
                    )
                else:
                    result = await conn.execute(
                        text("SELECT name FROM sqlite_master WHERE type='table'")
                    )
                
                tables = [row[0] for row in result.fetchall()]
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {tables}")
                
                if not tables:
                    logger.error("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!")
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            await engine.dispose()
            return False
        
        await engine.dispose()
        
        logger.info("\n" + "="*60)
        logger.info("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("="*60)
        logger.info("\nüìù –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        logger.info("  1. ‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        logger.info("  2. ‚úÖ –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π")
        logger.info("  3. ‚úÖ Enum –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –ó–ê–ì–õ–ê–í–ù–´–ï")
        logger.info("  4. ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    print("\n" + "="*60)
    print("üîÑ –ù–ê–ß–ò–ù–ê–Æ –ú–ò–ì–†–ê–¶–ò–Æ –ë–ê–ó–´ –î–ê–ù–ù–´–•...")
    print("="*60 + "\n")
    
    success = asyncio.run(migrate_database())
    
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python main.py\n")
        exit(0)
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ\n")
        exit(1)
