from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
from config import Config
import logging

logger = logging.getLogger(__name__)

def delete_command_in_group(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await update.message.delete()
                logger.info(f"Deleted command {func.__name__} from group {update.effective_chat.id}")
            except Exception as e:
                logger.error(f"Failed to delete command: {e}")
        
        return await func(update, context, *args, **kwargs)
    
    return wrapper

def admin_only_with_delete(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not Config.is_admin(user_id):
            if update.effective_chat.type == 'private':
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–∞—Ö
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await update.message.delete()
                logger.info(f"Deleted admin command {func.__name__} from group")
            except Exception as e:
                logger.error(f"Failed to delete command: {e}")
        
        return await func(update, context, *args, **kwargs)
    
    return wrapper

def moderator_only_with_delete(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not Config.is_moderator(user_id):
            if update.effective_chat.type == 'private':
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–∞—Ö
        if update.effective_chat.type in ['group', 'supergroup']:
            try:
                await update.message.delete()
                logger.info(f"Deleted moderator command {func.__name__} from group")
            except Exception as e:
                logger.error(f"Failed to delete command: {e}")
        
        return await func(update, context, *args, **kwargs)
    
    return wrapper

def notify_user_in_pm(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –õ–° –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        result = await func(update, context, *args, **kwargs)
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ –∏ –µ—Å—Ç—å reply
        if update.effective_chat.type in ['group', 'supergroup']:
            if update.message.reply_to_message:
                target_user_id = update.message.reply_to_message.from_user.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
                from data.user_data import user_data
                if target_user_id in user_data:
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
                        command_name = func.__name__.replace('_command', '')
                        
                        if command_name == 'ban':
                            notification = (
                                f"üö´ **–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã**\n\n"
                                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {' '.join(context.args) if context.args else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or 'Unknown'}\n\n"
                                f"–î–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                            )
                        elif command_name == 'mute':
                            time_str = context.args[0] if (update.message.reply_to_message and context.args) else (context.args[1] if len(context.args) > 1 else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            notification = (
                                f"üîá **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º—É—Ç**\n\n"
                                f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
                                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or 'Unknown'}\n\n"
                                f"–í–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª."
                            )
                        elif command_name == 'unban':
                            notification = (
                                f"‚úÖ **–í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞**\n\n"
                                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or 'Unknown'}\n\n"
                                f"–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
                            )
                        elif command_name == 'unmute':
                            notification = (
                                f"üîä **–í–∞—à –º—É—Ç —Å–Ω—è—Ç**\n\n"
                                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username or 'Unknown'}\n\n"
                                f"–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
                            )
                        else:
                            notification = None
                        
                        if notification:
                            await context.bot.send_message(
                                chat_id=target_user_id,
                                text=notification,
                                parse_mode='Markdown'
                            )
                            logger.info(f"Sent notification to user {target_user_id} about {command_name}")
                    
                    except Exception as e:
                        logger.error(f"Failed to send notification to user {target_user_id}: {e}")
        
        return result
    
    return wrapper
