from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging
import secrets
import string

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command with safe DB handling"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    chat_id = update.effective_chat.id
    
    # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç–µ
    if chat_id == Config.BUDAPEST_CHAT_ID:
        try:
            await update.message.delete()
            logger.info(f"Deleted /start from Budapest chat, user {user_id}")
        except Exception as e:
            logger.error(f"Could not delete /start: {e}")
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    try:
        from services.db import db
        from models import User, Gender
        from sqlalchemy import select
        from datetime import datetime
        
        async with db.get_session() as session:
            # Check if user exists
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                # Create new user immediately with default values
                new_user = User(
                    id=user_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    gender=Gender.UNKNOWN,
                    referral_code=generate_referral_code(),
                    created_at=datetime.utcnow()
                )
                session.add(new_user)
                await session.commit()
                logger.info(f"Created new user: {user_id}")
                
    except Exception as e:
        logger.warning(f"Could not save user to DB: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ë–î
    
    # Always show main menu (—Ç–æ–ª—å–∫–æ –≤ –õ–° –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö)
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show new main menu design"""
    
    # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç–µ
    chat_id = update.effective_chat.id
    if chat_id == Config.BUDAPEST_CHAT_ID:
        logger.info(f"Blocked main menu in Budapest chat")
        return
    
    keyboard = [
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç", url="https://t.me/tgchatxxx")],
        [InlineKeyboardButton("üôÖ –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/catalogtrix")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º", url="https://t.me/hungarytrade")],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è –ü–∏—Å–∞—Ç—å", callback_data="menu:write")]
    ]
    
    text = (
    "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –ë—É–¥–∞–ø–µ—à—Ç–∞*\n"
    "*–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É –∏ –í–µ–Ω–≥—Ä–∏–∏ üá≠üá∫.\n\n"
    
    "üï≥Ô∏è *–£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ*:\n"
    "üôÖ‚Äç‚ôÇÔ∏è *–ö–∞–Ω–∞–ª* ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏\n"
    "üôÖ‚Äç‚ôÄÔ∏è *–ß–∞—Ç* ‚Äî –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è\n"
    "üôÖ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥\n"
    "üïµÔ∏è‚Äç‚ôÇÔ∏è *–ë–∞—Ä–∞—Ö–æ–ª–∫–∞* ‚Äî –ö–û–ü: –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º\n"
    "üõú *SocialMedia* ‚Äî –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–æ—Ü —Å–µ—Ç–µ–π\n"
    "üèòÔ∏è *–ê—Ä–µ–Ω–¥–∞* ‚Äì –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è / –ø–æ—Å—É—Ç–æ—á–Ω–∞—è ;üë• –õ—é–¥–∏ \n\n"
        
    "*–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é‚ùî*\n"
    "–ù–∞–∂–º–∏—Ç–µ üö∂‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è*–ü–∏—Å–∞—Ç—å* \n\n"
    
    
    "üîí *–ó–∞–∫—Ä–µ–ø–∏—Ç–µ –±–æ—Ç–∞*"
)
    
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await update.effective_message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        try:
            await update.effective_message.reply_text(
                "TrixBot - —Ç–æ–ø –∫–æ–º—å—é–Ω–∏—Ç–∏ –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ üá≠üá∫\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ü–∏—Å–∞—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e2:
            logger.error(f"Fallback menu also failed: {e2}")
            await update.effective_message.reply_text(
                "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )

async def show_write_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show write menu with publication types"""
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ üôÖ‚Äç‚ôÇÔ∏è–ë—É–¥–∞–ø–µ—à—Ç/üïµüèº‚Äç‚ôÄÔ∏è–ö–û–ü", callback_data="menu:budapest")],
        [InlineKeyboardButton("–ó–∞—è–≤–∫–∞ –≤ üôÖ–ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥", callback_data="menu:services")],
        [InlineKeyboardButton("‚ö°Ô∏è–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ", callback_data="menu:actual")],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è–ß–∏—Ç–∞—Ç—å", callback_data="menu:read")]
    ]
    
    text = (
    "‚Ä¢ *–í—ã–±–æ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤*\n\n"
    
    "*–ü–æ—Å—Ç –≤ üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç / üïµüèº‚Äç‚ôÄÔ∏è –ö–û–ü*\n"
    "  - –ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç: –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç–∏, –∂–∞–ª–æ–±—ã, –ø–æ–¥—Å–ª—É—à–∞–Ω–æ, –≤–∞–∂–Ω–æ–µ\n"
    "  - –ö–∞–Ω–∞–ª –ö—É–ø–ª—é/–û—Ç–¥–∞–º/–ü—Ä–æ–¥–∞–º: –≥–ª–∞–≤–Ω–∞—è –±–∞—Ä–∞—Ö–æ–ª–∫–∞ –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ üá≠üá∫\n\n"
    
    "*–ó–∞—è–≤–∫–∞ –≤ üôÖ –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥*\n"
    "  - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Äì —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ë—É–¥–∞–ø–µ—à—Ç–∞\n"
    "  - –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
    "  - –ü—Ä–∏–º–µ—Ä—ã: –º–∞–Ω–∏–∫—é—Ä, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, —Ç—Ä–µ–Ω–µ—Ä, –≤—Ä–∞—á, —Å—Ç—Ä–∏–∂–∫–∞...\n\n"
    
    "*‚ö°Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ*\n"
    "  - –í–∞–∂–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ —á–∞—Ç –∏ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è\n"
    "  - –ü—Ä–∏–º–µ—Ä—ã:\n"
    "      ‚Ä¢ –Ω—É–∂–µ–Ω —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    "      ‚Ä¢ –Ω–∞—à–µ–ª AirPods –Ω–∞ –ó—É–≥–ª–æ \n"
    "      ‚Ä¢ –ü–æ–¥—Å–æ–±–Ω–∏–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Äî –æ–ø–ª–∞—Ç–∞ 30–∫ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è\n"
    "*üö∂‚Äç‚ôÄÔ∏è –ß–∏—Ç–∞—Ç—å* ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
)
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing write menu: {e}")
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(update, context)

def generate_referral_code():
    """Generate unique referral code"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))
