# -*- coding: utf-8 -*-
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.admin_notifications import admin_notifications
import logging
import random
from datetime import datetime

logger = logging.getLogger(__name__)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤
AVAILABLE_TICKET_NUMBERS = [
    351040, 613030, 963320, 562316, 500099, 339945, 994245, 200056, 910076, 848652,
    768949, 765348, 198069, 880494, 970386, 291047, 872367, 748455, 443895, 352887,
    218048, 957039, 363137, 123755, 450752, 376250, 626234, 895236, 465918, 727809,
    246560, 864159, 642001, 502213, 261482, 999907, 12361, 181194, 467349, 264777, 
    365423, 171197, 304592, 369195, 996793, 727476, 562749, 761685, 368169, 454956, 
    535181, 488012, 805118, 89772, 159521, 909078, 116861, 232871, 714047, 347559, 
    15449, 956328, 668625, 999187, 298527, 8258, 904956, 959776, 376971, 764376, 
    181869, 901139, 618963, 168459, 262445, 301595, 756483, 880629, 108248, 114764, 
    125456, 943557, 710780, 244229, 49875, 909249, 743649, 278646, 676851, 941118, 
    552515, 843233, 115439, 879847, 26906, 40450, 855212, 1020, 952494, 403637, 
    691061, 233375, 854871
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö TrixTicket
trixticket_data = {
    'holders': {},  # {user_id: {'username': str, 'ticket_number': int, 'obtained_at': str}}
    'winners': [],  # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π [{user_id, username, prize, date}]
    'used_numbers': set(),  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    'next_draw': '01.12.2025'  # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
}

async def tickets_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TrixTicket –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö"""
    
    total_holders = len(trixticket_data['holders'])
    
    keyboard = [
        [InlineKeyboardButton("üë§ –ú–æ–π –±–∏–ª–µ—Ç", callback_data="tt:myticket")],
        [InlineKeyboardButton("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏", callback_data="tt:winners")],
        [InlineKeyboardButton("üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å", callback_data="tt:howto")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
    ]
    
    text = (
        "üé´ **TRIXTICKET - –ï–ñ–ï–ú–ï–°–Ø–ß–ù–´–ô –†–û–ó–´–ì–†–´–®**\n\n"
        
        "üìå **–û–ø–∏—Å–∞–Ω–∏–µ:**\n"
        "–¶–∏—Ñ—Ä–æ–≤–æ–π –±–∏–ª–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
        "–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
        
        "üë• **–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:** {}\n"
        "üé∞ **–°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à:** {}\n\n"
        
        "üéÅ **–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n"
    ).format(total_holders, trixticket_data['next_draw'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    if trixticket_data['winners']:
        for winner in trixticket_data['winners'][-3:]:
            text += f"‚Ä¢ @{winner['username']} ‚Äî {winner['prize']}\n"
    else:
        text += "‚Ä¢ –ï—â–µ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
    
    text += (
        "\nüìã **–ü—Ä–∞–≤–∏–ª–∞:**\n"
        "‚Ä¢ 1 –±–∏–ª–µ—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –§–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç\n"
        "‚Ä¢ –í—ã–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n"
        
        "üí° **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:**"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def myticket_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–∏–ª–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tt:back")]]
    
    if user_id in trixticket_data['holders']:
        ticket_info = trixticket_data['holders'][user_id]
        text = (
            f"üé´ **–í–ê–® –ë–ò–õ–ï–¢**\n\n"
            f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –±–∏–ª–µ—Ç!\n"
            f"üéüÔ∏è –ù–æ–º–µ—Ä: {ticket_info['ticket_number']}\n"
            f"üìÖ –ü–æ–ª—É—á–µ–Ω: {ticket_info['obtained_at']}\n"
            f"üé∞ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: {trixticket_data['next_draw']}\n\n"
            f"üçÄ –£–¥–∞—á–∏!"
        )
    else:
        text = (
            f"‚ùå **–ù–ï–¢ –ë–ò–õ–ï–¢–ê**\n\n"
            f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç TrixTicket\n\n"
            f"üìå **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:**\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ /trixmoney\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
        )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def trixtickets_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
    
    text = "üèÜ **–ò–°–¢–û–†–ò–Ø –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô TRIXTICKET**\n\n"
    
    if not trixticket_data['winners']:
        text += "‚ùå –ï—â–µ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"
    else:
        for i, winner in enumerate(trixticket_data['winners'], 1):
            text += (
                f"{i}. **@{winner['username']}**\n"
                f"   üìÖ –î–∞—Ç–∞: {winner['date']}\n"
                f"   üéÅ –ü—Ä–∏–∑: {winner['prize']}\n\n"
            )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tt:back")]]
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_trixticket_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è TrixTicket"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "myticket":
        await myticket_command(update, context)
    elif action == "winners":
        await trixtickets_command(update, context)
    elif action == "howto":
        await show_howto(query, context)
    elif action == "back":
        await tickets_command(update, context)

async def show_howto(query, context):
    """–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å TrixTicket"""
    
    text = (
        "üìå **–ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ TRIXTICKET**\n\n"
        
        "1Ô∏è‚É£ **–í—ã–∏–≥—Ä—ã—à–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:**\n"
        "‚Ä¢ WeeklyRoll ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ\n"
        "‚Ä¢ NeedTryMore ‚Äî –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç\n"
        "‚Ä¢ 7TT —Ä–∞–∑–¥–∞—á–∞ ‚Äî –ø—Ä—è–º–∞—è —Ä–∞–∑–¥–∞—á–∞\n\n"
        
        "2Ô∏è‚É£ **–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è:**\n"
        "‚Ä¢ Active3x –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî 0 TrixTicket\n"
        "‚Ä¢ RaidTrix (50 —Å–æ–æ–±—â–µ–Ω–∏–π) ‚Äî +1 TrixTicket\n"
        "‚Ä¢ Ref (STAKE –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è) ‚Äî +1 TrixTicket\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trixmoney\n\n"
        
        "3Ô∏è‚É£ **–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n"
        "‚Ä¢ –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ –ó–∞ –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏\n\n"
        
        "üé∞ **–†–û–ó–´–ì–†–´–®:**\n"
        f"üìÖ –î–∞—Ç–∞: {trixticket_data['next_draw']}\n"
        "üèÜ –ë—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n"
        "üéÅ –ü—Ä–∏–∑—ã: –±–∏–ª–µ—Ç—ã –Ω–∞ —à–æ—É, –≤–∞—É—á–µ—Ä—ã, –∫—Ä–∏–ø—Ç–æ\n\n"
        
        "üí° –í–æ–ø—Ä–æ—Å—ã? @trixilvebot"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tt:back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ =============

async def givett_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞—Ç—å –±–∏–ª–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - /givett <user_id>"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/givett 123456789`",
            parse_mode='Markdown'
        )
        return
    
    user_id = int(context.args[0])
    
    if user_id in trixticket_data['holders']:
        await update.message.reply_text(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –µ—Å—Ç—å –±–∏–ª–µ—Ç!")
        return
    
    if not trixticket_data['used_numbers']:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        trixticket_data['used_numbers'] = set()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    ticket_number = None
    for num in AVAILABLE_TICKET_NUMBERS:
        if num not in trixticket_data['used_numbers']:
            ticket_number = num
            break
    
    if ticket_number is None:
        await update.message.reply_text("‚ùå –í—Å–µ –±–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–ª–µ—Ç
    trixticket_data['holders'][user_id] = {
        'username': f"user_{user_id}",
        'ticket_number': ticket_number,
        'obtained_at': datetime.now().strftime("%d.%m.%Y")
    }
    trixticket_data['used_numbers'].add(ticket_number)
    
    await update.message.reply_text(
        f"‚úÖ **–ë–∏–ª–µ—Ç –≤—ã–¥–∞–Ω!**\n\n"
        f"üë§ User ID: {user_id}\n"
        f"üéüÔ∏è –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: {ticket_number}\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(trixticket_data['holders'])}"
    )
    
    logger.info(f"Ticket {ticket_number} given to user {user_id}")

async def removett_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - /removett <user_id>"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/removett 123456789`",
            parse_mode='Markdown'
        )
        return
    
    user_id = int(context.args[0])
    
    if user_id not in trixticket_data['holders']:
        await update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∏–ª–µ—Ç–∞!")
        return
    
    ticket_num = trixticket_data['holders'][user_id]['ticket_number']
    del trixticket_data['holders'][user_id]
    # –ù–ï —É–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ used_numbers - –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    
    await update.message.reply_text(
        f"‚úÖ **–ë–∏–ª–µ—Ç —É–¥–∞–ª–µ–Ω!**\n\n"
        f"üë§ User ID: {user_id}\n"
        f"üéüÔ∏è –ù–æ–º–µ—Ä: {ticket_num}\n"
        f"üë• –û—Å—Ç–∞–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(trixticket_data['holders'])}"
    )

async def userstt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∏–ª–µ—Ç–∞–º–∏ - /userstt"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not trixticket_data['holders']:
        await update.message.reply_text("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    text = "üé´ **–°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í TRIXTICKET**\n\n"
    
    for user_id, info in trixticket_data['holders'].items():
        text += (
            f"üë§ User ID: {user_id}\n"
            f"üéüÔ∏è –ë–∏–ª–µ—Ç: {info['ticket_number']}\n"
            f"üìÖ –î–∞—Ç–∞: {info['obtained_at']}\n\n"
        )
    
    text += f"üìä **–í—Å–µ–≥–æ: {len(trixticket_data['holders'])} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**"
    
    await update.message.reply_text(text)

async def trixticketstart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à - /trixticketstart"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if len(trixticket_data['holders']) < 3:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n"
            f"–ï—Å—Ç—å: {len(trixticket_data['holders'])}\n"
            f"–ù—É–∂–Ω–æ: –º–∏–Ω–∏–º—É–º 3"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winners_list = random.sample(
        list(trixticket_data['holders'].items()), 
        min(3, len(trixticket_data['holders']))
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è /ttrenumber
    context.user_data['current_tt_winners'] = winners_list
    
    text = "üé∞ **–†–û–ó–´–ì–†–´–® TRIXTICKET –ü–†–û–í–ï–î–ï–ù!**\n\n"
    text += "üèÜ **–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω—ã 3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:**\n\n"
    
    for i, (user_id, info) in enumerate(winners_list, 1):
        text += (
            f"{i}. üë§ @{info['username']} (ID: {user_id})\n"
            f"   üéüÔ∏è –ë–∏–ª–µ—Ç: {info['ticket_number']}\n\n"
        )
    
    text += (
        "üìù **–î–∞–ª–µ–µ:**\n"
        "1. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ttrenumber –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ttsave –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )
    
    await update.message.reply_text(text)
    logger.info(f"TrixTicket draw executed with {len(winners_list)} winners")

async def ttrenumber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∏–∑–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è - /ttrenumber "123456"
    –û—Å—Ç–∞–≤–ª—è–µ—Ç –¥–≤–æ–∏—Ö, –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –≤–º–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ttrenumber \"123456\"`\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã",
            parse_mode='Markdown'
        )
        return
    
    ticket_to_replace = int(context.args[0])
    current_winners = context.user_data.get('current_tt_winners', [])
    
    if not current_winners:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à /trixticketstart")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
    winner_index = None
    for i, (user_id, info) in enumerate(current_winners):
        if info['ticket_number'] == ticket_to_replace:
            winner_index = i
            break
    
    if winner_index is None:
        await update.message.reply_text(f"‚ùå –ë–∏–ª–µ—Ç {ticket_to_replace} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    remaining_users = [
        (uid, info) for uid, info in trixticket_data['holders'].items()
        if uid not in [w[0] for w in current_winners]
    ]
    
    if not remaining_users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã")
        return
    
    new_winner = random.choice(remaining_users)
    current_winners[winner_index] = new_winner
    context.user_data['current_tt_winners'] = current_winners
    
    text = f"‚úÖ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–º–µ–Ω–µ–Ω!**\n\n"
    text += f"‚ùå –£–¥–∞–ª–µ–Ω: {ticket_to_replace}\n"
    text += f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: @{new_winner[1]['username']} (–ë–∏–ª–µ—Ç: {new_winner[1]['ticket_number']})\n\n"
    text += "üìã **–ù–æ–≤—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n"
    
    for i, (user_id, info) in enumerate(current_winners, 1):
        text += f"{i}. @{info['username']} (–ë–∏–ª–µ—Ç: {info['ticket_number']})\n"
    
    await update.message.reply_text(text)

async def ttsave_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - /ttsave"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    current_winners = context.user_data.get('current_tt_winners', [])
    
    if not current_winners:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        return
    
    date = datetime.now().strftime("%d.%m.%Y")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    for user_id, info in current_winners:
        winner_record = {
            'user_id': user_id,
            'username': info['username'],
            'date': date,
            'prize': 'TrixTicket –ø—Ä–∏–∑'  # –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏–∑
        }
        trixticket_data['winners'].append(winner_record)
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    context.user_data['current_tt_winners'] = []
    
    text = f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
    text += f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(current_winners)} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
    text += f"üìÖ –î–∞—Ç–∞: {date}\n\n"
    text += "üîî –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ /trixtickets"
    
    await update.message.reply_text(text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    try:
        await admin_notifications.send_message(
            f"‚úÖ TrixTicket —Ä–æ–∑—ã–≥—Ä—ã—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n"
            f"üìä –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(current_winners)}\n"
            f"üìÖ –î–∞—Ç–∞: {date}"
        )
    except:
        pass

async def trixticketclear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö TrixTicket - /trixticketclear"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if context.args and context.args[0] == "confirm":
        # –û—á–∏—â–∞–µ–º –≤—Å–µ
        trixticket_data['holders'] = {}
        trixticket_data['winners'] = []
        trixticket_data['used_numbers'] = set()
        context.user_data['current_tt_winners'] = []
        
        await update.message.reply_text(
            "‚ö†Ô∏è **–ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê!**\n\n"
            "‚úÖ –í—Å–µ –±–∏–ª–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã\n"
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞\n"
            "‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É"
        )
        
        logger.warning("TrixTicket data completely cleared")
        return
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = (
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê TRIXTICKET**\n\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç:\n"
        "‚ùå –í—Å–µ –±–∏–ª–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚ùå –ò—Å—Ç–æ—Ä–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
        "‚ùå –í—Å–µ –Ω–æ–º–µ—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ `/trixticketclear confirm` –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

__all__ = [
    'tickets_command',
    'myticket_command',
    'trixtickets_command',
    'handle_trixticket_callback',
    'givett_command',
    'removett_command',
    'userstt_command',
    'trixticketstart_command',
    'ttrenumber_command',
    'ttsave_command',
    'trixticketclear_command',
    'trixticket_data'
]
