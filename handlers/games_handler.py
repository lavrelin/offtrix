# -*- coding: utf-8 -*-
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging
import random
from datetime import datetime, timedelta

from data.games_data import (
    word_games, roll_games, user_attempts,
    can_attempt, record_attempt,
    normalize_word, get_unique_roll_number
)
from data.user_data import update_user_activity, is_user_banned, is_user_muted

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è waiting_for –∏–≥—Ä
game_waiting = {}

# –ú–∞–ø–ø–∏–Ω–≥ –≤–µ—Ä—Å–∏–π –∏–≥—Ä
GAME_VERSIONS = {
    'try': 'try',
    'need': 'need', 
    'more': 'more'
}

def get_game_version_from_command(command_text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã"""
    command_lower = command_text.lower()
    
    if 'need' in command_lower:
        return 'need'
    elif 'more' in command_lower:
        return 'more'
    elif 'try' in command_lower:
        return 'try'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é try
    return 'try'

# ============= –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–õ–û–í–ê–ú–ò (–ê–î–ú–ò–ù) =============

async def wordadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if not context.args:
        text = f"üîß –ê–î–ú–ò–ù–°–ö–ò–ï –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ [{game_version.upper()}]:\n\n"
        text += "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏:\n"
        text += f"‚Ä¢ /{game_version}add —Å–ª–æ–≤–æ\n"
        text += f"‚Ä¢ /{game_version}edit —Å–ª–æ–≤–æ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        text += f"‚Ä¢ /{game_version}start\n"
        text += f"‚Ä¢ /{game_version}stop\n"
        text += f"‚Ä¢ /{game_version}info\n"
        text += f"‚Ä¢ /{game_version}infoedit —Ç–µ–∫—Å—Ç\n"
        text += f"‚Ä¢ /{game_version}timeset –º–∏–Ω—É—Ç—ã\n\n"
        text += "üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º:\n"
        text += f"‚Ä¢ /{game_version}rollstart 1-5\n"
        text += f"‚Ä¢ /{game_version}reroll\n"
        text += f"‚Ä¢ /{game_version}rollstat\n\n"
        text += "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        text += f"‚Ä¢ /{game_version}slovo —Å–ª–æ–≤–æ\n"
        text += f"‚Ä¢ /{game_version}roll\n"
        text += f"‚Ä¢ /{game_version}myroll"

        await update.message.reply_text(text)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
    word = context.args[0].lower()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    user_id = update.effective_user.id
    game_waiting[user_id] = {
        'action': 'add_word_description',
        'game_version': game_version,
        'word': word
    }
    
    word_games[game_version]['words'][word] = {
        'description': f'–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {word}',
        'hints': [],
        'media': []
    }
    
    keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"game:skip_media:{game_version}:{word}")]]
    
    await update.message.reply_text(
        f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–≥—Ä—É {game_version.upper()}\n\n"
        f"üéØ –°–ª–æ–≤–æ: {word}\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_game_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∏–≥—Ä"""
    user_id = update.effective_user.id
    
    if user_id not in game_waiting:
        return False
    
    action_data = game_waiting[user_id]
    action = action_data.get('action')
    text = update.message.text
    
    if action == 'add_word_description':
        game_version = action_data['game_version']
        word = action_data['word']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        word_games[game_version]['words'][word]['description'] = text
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –º–µ–¥–∏–∞
        game_waiting[user_id] = {
            'action': 'add_word_media',
            'game_version': game_version,
            'word': word
        }
        
        keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"game:finish:{game_version}:{word}")]]
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ [{game_version.upper()}]\n\n"
            f"üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
    
    return False

async def handle_game_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∏–≥—Ä"""
    user_id = update.effective_user.id
    
    if user_id not in game_waiting:
        return False
    
    action_data = game_waiting[user_id]
    action = action_data.get('action')
    
    if action == 'add_word_media':
        game_version = action_data['game_version']
        word = action_data['word']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞
        if update.message.photo:
            media_data = {
                'type': 'photo',
                'file_id': update.message.photo[-1].file_id
            }
        elif update.message.video:
            media_data = {
                'type': 'video',
                'file_id': update.message.video.file_id
            }
        else:
            return False
        
        word_games[game_version]['words'][word]['media'].append(media_data)
        
        media_count = len(word_games[game_version]['words'][word]['media'])
        
        keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"game:finish:{game_version}:{word}")]]
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({media_count}) [{game_version.upper()}]\n\n"
            f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
    
    return False

async def wordedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if len(context.args) < 2:
        await update.message.reply_text(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{game_version}edit —Å–ª–æ–≤–æ –Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ")
        return
    
    word = context.args[0].lower()
    new_description = ' '.join(context.args[1:])
    
    if word not in word_games[game_version]['words']:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–≥—Ä–µ {game_version.upper()}")
        return
    
    word_games[game_version]['words'][word]['description'] = new_description
    
    await update.message.reply_text(
        f"‚úÖ –°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {game_version.upper()}\n\n"
        f"üéØ –°–ª–æ–≤–æ: {word}\n"
        f"üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_description}"
    )

async def wordon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–Ω–∫—É—Ä—Å–∞"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if not word_games[game_version]['words']:
        await update.message.reply_text(
            f"‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game_version.upper()}. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /{game_version}add"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    available_words = list(word_games[game_version]['words'].keys())
    current_word = random.choice(available_words)
    
    word_games[game_version]['current_word'] = current_word
    word_games[game_version]['active'] = True
    word_games[game_version]['winners'] = []
    
    description = word_games[game_version]['words'][current_word]['description']
    media = word_games[game_version]['words'][current_word].get('media', [])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if media:
        for media_item in media:
            try:
                if media_item['type'] == 'photo':
                    await update.message.reply_photo(
                        photo=media_item['file_id'],
                        caption=f"üì∏ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –∫–æ–Ω–∫—É—Ä—Å—É [{game_version.upper()}]"
                    )
                elif media_item['type'] == 'video':
                    await update.message.reply_video(
                        video=media_item['file_id'],
                        caption=f"üé• –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –∫–æ–Ω–∫—É—Ä—Å—É [{game_version.upper()}]"
                    )
            except Exception as e:
                logger.error(f"Error sending media: {e}")
    
    await update.message.reply_text(
        f"üéÆ –ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –ù–ê–ß–ê–õ–°–Ø!\n\n"
        f"üìù {description}\n\n"
        f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /{game_version}slovo —Å–ª–æ–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: {word_games[game_version]['interval']} –º–∏–Ω—É—Ç"
    )

async def wordoff_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–Ω–∫—É—Ä—Å–∞"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    word_games[game_version]['active'] = False
    current_word = word_games[game_version]['current_word']
    winners = word_games[game_version]['winners']
    
    winner_text = ""
    if winners:
        winner_text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join([f'@{w}' for w in winners])}"
    else:
        winner_text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –±—ã–ª–æ"
    
    await update.message.reply_text(
        f"üõë –ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –ó–ê–í–ï–†–®–ï–ù!\n\n"
        f"üéØ –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        f"{winner_text}\n\n"
        f"üìã –ö–æ–Ω–∫—É—Ä—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å."
    )

async def wordinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–ª–æ–≤–µ"""
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if not word_games[game_version]['active']:
        description = word_games[game_version].get('description', f"–ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        await update.message.reply_text(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è [{game_version.upper()}]:\n\nüìù {description}")
        return
    
    current_word = word_games[game_version]['current_word']
    if current_word and current_word in word_games[game_version]['words']:
        description = word_games[game_version]['words'][current_word]['description']
        media = word_games[game_version]['words'][current_word].get('media', [])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if media:
            for media_item in media:
                try:
                    if media_item['type'] == 'photo':
                        await update.message.reply_photo(
                            photo=media_item['file_id'],
                            caption=f"üì∏ –ü–æ–¥—Å–∫–∞–∑–∫–∞ [{game_version.upper()}]"
                        )
                    elif media_item['type'] == 'video':
                        await update.message.reply_video(
                            video=media_item['file_id'],
                            caption=f"üé• –ü–æ–¥—Å–∫–∞–∑–∫–∞ [{game_version.upper()}]"
                        )
                except Exception as e:
                    logger.error(f"Error sending media: {e}")
        
        await update.message.reply_text(
            f"üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ [{game_version.upper()}]:\n\n"
            f"üìù {description}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{game_version}slovo —Å–ª–æ–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∏–≥—Ä–µ {game_version.upper()}")

async def game_say_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ"""
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if not context.args:
        await update.message.reply_text(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{game_version}slovo —Å–ª–æ–≤–æ")
        return
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    guess = context.args[0]
    
    update_user_activity(user_id, update.effective_user.username)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if is_user_muted(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ")
        return
    
    if not word_games[game_version]['active']:
        await update.message.reply_text(f"‚ùå –ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return
    
    if not can_attempt(user_id, game_version):
        interval = word_games[game_version]['interval']
        await update.message.reply_text(
            f"‚è∞ –í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–∞–∑ –≤ {interval} –º–∏–Ω—É—Ç –≤ –∏–≥—Ä–µ {game_version.upper()}"
        )
        return
    
    record_attempt(user_id, game_version)
    
    current_word = word_games[game_version]['current_word']
    
    try:
        await context.bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=(
                f"üéÆ –ò–≥—Ä–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ [{game_version.upper()}]\n\n"
                f"üë§ @{username} (ID: {user_id})\n"
                f"üéØ –ü–æ–ø—ã—Ç–∫–∞: {guess}\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_word}"
            )
        )
    except Exception as e:
        logger.error(f"Error sending game notification: {e}")
    
    if normalize_word(guess) == normalize_word(current_word):
        word_games[game_version]['winners'].append(username)
        word_games[game_version]['active'] = False
        
        await update.message.reply_text(
            f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú [{game_version.upper()}]!\n\n"
            f"@{username}, –≤—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ '{current_word}' –∏ —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!\n\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        try:
            await context.bot.send_message(
                chat_id=Config.MODERATION_GROUP_ID,
                text=(
                    f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –í –ò–ì–†–ï {game_version.upper()}!\n\n"
                    f"üë§ @{username} (ID: {user_id})\n"
                    f"üéØ –£–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: {current_word}\n\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!"
                )
            )
        except Exception as e:
            logger.error(f"Error sending winner notification: {e}")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ [{game_version.upper()}]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {word_games[game_version]['interval']} –º–∏–Ω—É—Ç"
        )

# ============= –†–û–ó–´–ì–†–´–® =============

async def roll_participant_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, update.effective_user.username)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if is_user_muted(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ")
        return
    
    if user_id in roll_games[game_version]['participants']:
        existing_number = roll_games[game_version]['participants'][user_id]['number']
        await update.message.reply_text(f"@{username}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –≤ {game_version.upper()}: {existing_number}")
        return
    
    number = get_unique_roll_number(game_version)
    
    roll_games[game_version]['participants'][user_id] = {
        'username': username,
        'number': number,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {game_version.upper()}: {number}\n\n"
        f"üé≤ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(roll_games[game_version]['participants'])}"
    )

async def mynumber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if user_id not in roll_games[game_version]['participants']:
        await update.message.reply_text(
            f"@{username}, –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {game_version.upper()}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{game_version}roll –¥–ª—è —É—á–∞—Å—Ç–∏—è"
        )
        return
    
    number = roll_games[game_version]['participants'][user_id]['number']
    await update.message.reply_text(f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä –≤ {game_version.upper()}: {number}")

# –§—Ä–∞–≥–º–µ–Ω—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π roll_draw_command

async def roll_draw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω) - –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{game_version}rollstart 3 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 1-5)"
        )
        return
    
    winners_count = min(5, max(1, int(context.args[0])))
    
    participants = roll_games[game_version]['participants']
    
    if len(participants) < winners_count:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {winners_count} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ {game_version.upper()}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ
    winning_number = random.randint(1, 9999)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏
    participants_list = [
        (user_id, data['username'], data['number'])
        for user_id, data in participants.items()
    ]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–º—É —á–∏—Å–ª—É
    participants_list.sort(key=lambda x: abs(x[2] - winning_number))
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winners = participants_list[:winners_count]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    winners_text = []
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    
    for i, (user_id, username, number) in enumerate(winners, 1):
        medal = medals.get(i, f"{i}.")
        winners_text.append(f"{medal} @{username} (–Ω–æ–º–µ—Ä: {number}, —Ä–∞–∑–Ω–∏—Ü–∞: {abs(number - winning_number)})")
    
    result_text = (
        f"üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–ó–´–ì–†–´–®–ê {game_version.upper()}!\n\n"
        f"üé≤ –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ: {winning_number}\n"
        f"üë• –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {len(participants)}\n\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join(winners_text) +
        f"\n\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç/–≥—Ä—É–ø–ø—É
    await update.message.reply_text(result_text)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ö–ê–ñ–î–û–ú–£ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    for i, (user_id, username, number) in enumerate(winners, 1):
        try:
            medal = medals.get(i, f"{i}.")
            personal_message = (
                f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**\n\n"
                f"{medal} –í—ã –∑–∞–Ω—è–ª–∏ {i} –º–µ—Å—Ç–æ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {game_version.upper()}!\n\n"
                f"üé≤ –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ: {winning_number}\n"
                f"üéØ –í–∞—à –Ω–æ–º–µ—Ä: {number}\n"
                f"üìä –†–∞–∑–Ω–∏—Ü–∞: {abs(number - winning_number)}\n\n"
                f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!\n\n"
                f"üèÜ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏!"
            )
            
            await context.bot.send_message(
                chat_id=user_id,
                text=personal_message,
                parse_mode='Markdown'
            )
            
            logger.info(f"Winner notification sent to {user_id} ({username}) for {game_version}")
            
        except Exception as e:
            logger.error(f"Failed to notify winner {user_id} ({username}): {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —á–µ—Ä–µ–∑ admin_notifications
    try:
        from services.admin_notifications import admin_notifications
        
        winners_for_admin = [
            {
                'username': username,
                'user_id': user_id,
                'number': number,
                'difference': abs(number - winning_number)
            }
            for user_id, username, number in winners
        ]
        
        await admin_notifications.notify_roll_winner(
            game_version=game_version,
            winners=winners_for_admin
        )
        
        logger.info(f"Admin notification sent for {game_version} roll draw")
        
    except Exception as e:
        logger.error(f"Failed to send admin notification: {e}")
    
    logger.info(f"Roll draw completed for {game_version}, {winners_count} winners notified")

async def rollreset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    participants_count = len(roll_games[game_version]['participants'])
    roll_games[game_version]['participants'] = {}
    
    await update.message.reply_text(
        f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à {game_version.upper()} —Å–±—Ä–æ—à–µ–Ω!\n\n"
        f"üìä –£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
        f"üÜï –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É"
    )

async def rollstatus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    participants = roll_games[game_version]['participants']
    
    if not participants:
        await update.message.reply_text(f"üìä –†–æ–∑—ã–≥—Ä—ã—à {game_version.upper()}: –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    text = f"üìä –°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ [{game_version.upper()}]:\n\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
    text += "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    
    for i, (user_id, data) in enumerate(participants.items(), 1):
        text += f"{i}. @{data['username']} - {data['number']}\n"
    
    await update.message.reply_text(text)

# ============= –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def gamesinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    text = f"üéÆ –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ [{game_version.upper()}]:\n\n"
    text += "üéØ –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:\n"
    text += f"‚Ä¢ /{game_version}slovo —Å–ª–æ–≤–æ - –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å\n"
    text += f"‚Ä¢ /{game_version}info - –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ —Å–ª–æ–≤–µ\n\n"
    text += "üé≤ –†–æ–∑—ã–≥—Ä—ã—à –Ω–æ–º–µ—Ä–æ–≤:\n"
    text += f"‚Ä¢ /{game_version}roll - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä\n"
    text += f"‚Ä¢ /{game_version}myroll - –º–æ–π –Ω–æ–º–µ—Ä\n\n"
    text += "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞:\n"
    text += "‚Ä¢ –í –∏–≥—Ä–µ '—É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ' –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏\n"
    text += "‚Ä¢ –í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä 1-9999\n"
    text += "‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"

    await update.message.reply_text(text)

async def admgamesinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    text = f"üîß –ê–î–ú–ò–ù–°–ö–ò–ï –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ [{game_version.upper()}]:\n\n"
    text += "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏:\n"
    text += f"‚Ä¢ /{game_version}add —Å–ª–æ–≤–æ\n"
    text += f"‚Ä¢ /{game_version}edit —Å–ª–æ–≤–æ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
    text += f"‚Ä¢ /{game_version}start\n"
    text += f"‚Ä¢ /{game_version}stop\n"
    text += f"‚Ä¢ /{game_version}timeset –º–∏–Ω—É—Ç—ã\n\n"
    text += "üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º:\n"
    text += f"‚Ä¢ /{game_version}rollstart 1-5\n"
    text += f"‚Ä¢ /{game_version}reroll\n"
    text += f"‚Ä¢ /{game_version}rollstat"

    await update.message.reply_text(text)

async def anstimeset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{game_version}timeset 60 (–≤ –º–∏–Ω—É—Ç–∞—Ö)")
        return
    
    minutes = int(context.args[0])
    
    word_games[game_version]['interval'] = minutes
    
    await update.message.reply_text(
        f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω [{game_version.upper()}]:\n\n"
        f"‚è∞ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω—É—Ç"
    )

async def wordinfoedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version_from_command(command_text)
    
    if not context.args:
        await update.message.reply_text(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{game_version}infoedit –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        return
    
    new_description = ' '.join(context.args)
    
    word_games[game_version]['description'] = new_description
    
    await update.message.reply_text(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ [{game_version.upper()}]:\n\n{new_description}")

async def handle_game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏–≥—Ä"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "skip_media":
        game_version = data[2] if len(data) > 2 else None
        word = data[3] if len(data) > 3 else None
        
        user_id = update.effective_user.id
        if user_id in game_waiting:
            game_waiting.pop(user_id)
        
        await query.edit_message_text(
            f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ [{game_version.upper()}]:\n\n"
            f"üìù –°–ª–æ–≤–æ: {word}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{game_version}start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞"
        )
    
    elif action == "finish":
        game_version = data[2] if len(data) > 2 else None
        word = data[3] if len(data) > 3 else None
        
        user_id = update.effective_user.id
        if user_id in game_waiting:
            game_waiting.pop(user_id)
        
        media_count = len(word_games[game_version]['words'][word].get('media', []))
        
        await query.edit_message_text(
            f"‚úÖ –°–ª–æ–≤–æ –≥–æ—Ç–æ–≤–æ [{game_version.upper()}]:\n\n"
            f"üìù –°–ª–æ–≤–æ: {word}\n"
            f"üì∏ –ú–µ–¥–∏–∞: {media_count} —Ñ–∞–π–ª–æ–≤\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{game_version}start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞"
        )

async def wordclear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ (—Å—Ç–∞—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞)"""
    await update.message.reply_text(
        "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏: /need, /try, /more\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /needguide, /tryguide, /moreguide –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    )

__all__ = [
    'wordadd_command',
    'wordedit_command',
    'wordclear_command',
    'wordon_command',
    'wordoff_command',
    'wordinfo_command',
    'wordinfoedit_command',
    'anstimeset_command',
    'gamesinfo_command',
    'admgamesinfo_command',
    'game_say_command',
    'roll_participant_command',
    'roll_draw_command',
    'rollreset_command',
    'rollstatus_command',
    'mynumber_command',
    'handle_game_text_input',
    'handle_game_media_input',
    'handle_game_callback'
]
