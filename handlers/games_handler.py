# -*- coding: utf-8 -*-
"""
Games Handler - OPTIMIZED v5.2
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã callback_data: gmc_
- –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –¢—Ä–∏ –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä: NEED, TRY, MORE
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging
import random
from datetime import datetime, timedelta
from data.games_data import (
    word_games, roll_games, user_attempts,
    can_attempt, record_attempt, normalize_word, get_unique_roll_number
)
from data.user_data import update_user_activity, is_user_banned, is_user_muted

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIXES =============
GAME_CALLBACKS = {
    'skip_media': 'gmc_skip_media',
    'finish': 'gmc_finish',
}

# ============= GAME VERSIONS =============
GAME_VERSIONS = {'try': 'try', 'need': 'need', 'more': 'more'}

game_waiting = {}

def get_game_version_from_command(command_text: str) -> str:
    """Extract game version from command"""
    command_lower = command_text.lower()
    for version in ['need', 'more', 'try']:
        if version in command_lower:
            return version
    return 'try'

# ============= WORD COMMANDS (ADMIN) =============

async def wordadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add word - admin only"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    if not context.args:
        await update.message.reply_text(
            f"üîß **–ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ [{game_version.upper()}]**\n\n"
            f"üéØ –°–ª–æ–≤–∞:\n"
            f"/{game_version}add —Å–ª–æ–≤–æ\n"
            f"/{game_version}edit —Å–ª–æ–≤–æ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            f"/{game_version}start\n"
            f"/{game_version}stop\n\n"
            f"üé≤ –†–æ–∑—ã–≥—Ä—ã—à:\n"
            f"/{game_version}rollstart 1-5\n"
            f"/{game_version}reroll",
            parse_mode='Markdown'
        )
        return
    
    word = context.args[0].lower()
    user_id = update.effective_user.id
    
    game_waiting[user_id] = {
        'action': 'add_word_description',
        'game_version': game_version,
        'word': word
    }
    
    word_games[game_version]['words'][word] = {
        'description': f'–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {word}',
        'hints': [],
        'media': []
    }
    
    keyboard = [[InlineKeyboardButton(
        "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
        callback_data=f"{GAME_CALLBACKS['skip_media']}:{game_version}:{word}"
    )]]
    
    await update.message.reply_text(
        f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {game_version.upper()}\n\n"
        f"üéØ –°–ª–æ–≤–æ: {word}\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_game_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Handle text for games"""
    user_id = update.effective_user.id
    
    if user_id not in game_waiting:
        return False
    
    action_data = game_waiting[user_id]
    action = action_data.get('action')
    text = update.message.text
    
    if action == 'add_word_description':
        game_version = action_data['game_version']
        word = action_data['word']
        
        word_games[game_version]['words'][word]['description'] = text
        
        game_waiting[user_id] = {
            'action': 'add_word_media',
            'game_version': game_version,
            'word': word
        }
        
        keyboard = [[InlineKeyboardButton(
            "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", 
            callback_data=f"{GAME_CALLBACKS['finish']}:{game_version}:{word}"
        )]]
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ [{game_version.upper()}]\n\n"
            f"üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
    
    return False

async def handle_game_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Handle media for games"""
    user_id = update.effective_user.id
    
    if user_id not in game_waiting:
        return False
    
    action_data = game_waiting[user_id]
    action = action_data.get('action')
    
    if action == 'add_word_media':
        game_version = action_data['game_version']
        word = action_data['word']
        
        media_data = None
        if update.message.photo:
            media_data = {'type': 'photo', 'file_id': update.message.photo[-1].file_id}
        elif update.message.video:
            media_data = {'type': 'video', 'file_id': update.message.video.file_id}
        else:
            return False
        
        word_games[game_version]['words'][word]['media'].append(media_data)
        media_count = len(word_games[game_version]['words'][word]['media'])
        
        keyboard = [[InlineKeyboardButton(
            "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", 
            callback_data=f"{GAME_CALLBACKS['finish']}:{game_version}:{word}"
        )]]
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({media_count}) [{game_version.upper()}]\n\n"
            f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
    
    return False

async def wordedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit word"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    if len(context.args) < 2:
        await update.message.reply_text(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{game_version}edit —Å–ª–æ–≤–æ –æ–ø–∏—Å–∞–Ω–∏–µ")
        return
    
    word = context.args[0].lower()
    new_description = ' '.join(context.args[1:])
    
    if word not in word_games[game_version]['words']:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    word_games[game_version]['words'][word]['description'] = new_description
    await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {game_version.upper()}")

async def wordon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start contest"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    if not word_games[game_version]['words']:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ: /{game_version}add")
        return
    
    current_word = random.choice(list(word_games[game_version]['words'].keys()))
    
    word_games[game_version].update({
        'current_word': current_word,
        'active': True,
        'winners': []
    })
    
    description = word_games[game_version]['words'][current_word]['description']
    media = word_games[game_version]['words'][current_word].get('media', [])
    
    # Send media
    for media_item in media:
        try:
            if media_item['type'] == 'photo':
                await update.message.reply_photo(
                    photo=media_item['file_id'],
                    caption=f"üì∏ –ü–æ–¥—Å–∫–∞–∑–∫–∞ [{game_version.upper()}]"
                )
            elif media_item['type'] == 'video':
                await update.message.reply_video(
                    video=media_item['file_id'],
                    caption=f"üé• –ü–æ–¥—Å–∫–∞–∑–∫–∞ [{game_version.upper()}]"
                )
        except Exception as e:
            logger.error(f"Error sending media: {e}")
    
    await update.message.reply_text(
        f"üéÆ –ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –ù–ê–ß–ê–õ–°–Ø!\n\n"
        f"üìù {description}\n\n"
        f"üéØ /{game_version}slovo —Å–ª–æ–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {word_games[game_version]['interval']} –º–∏–Ω"
    )

async def wordoff_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Stop contest"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    word_games[game_version]['active'] = False
    current_word = word_games[game_version]['current_word']
    winners = word_games[game_version]['winners']
    
    winner_text = (
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join([f'@{w}' for w in winners])}"
        if winners else "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –±—ã–ª–æ"
    )
    
    await update.message.reply_text(
        f"üõë –ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –ó–ê–í–ï–†–®–ï–ù!\n\n"
        f"üéØ –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        f"{winner_text}"
    )

async def wordinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show word info"""
    game_version = get_game_version_from_command(update.message.text)
    
    if not word_games[game_version]['active']:
        description = word_games[game_version].get('description', f"–ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        await update.message.reply_text(f"‚ÑπÔ∏è [{game_version.upper()}]:\n\nüìù {description}")
        return
    
    current_word = word_games[game_version]['current_word']
    if current_word and current_word in word_games[game_version]['words']:
        description = word_games[game_version]['words'][current_word]['description']
        media = word_games[game_version]['words'][current_word].get('media', [])
        
        # Send media
        for media_item in media:
            try:
                if media_item['type'] == 'photo':
                    await update.message.reply_photo(
                        photo=media_item['file_id'],
                        caption=f"üì∏ –ü–æ–¥—Å–∫–∞–∑–∫–∞ [{game_version.upper()}]"
                    )
                elif media_item['type'] == 'video':
                    await update.message.reply_video(
                        video=media_item['file_id'],
                        caption=f"üé• –ü–æ–¥—Å–∫–∞–∑–∫–∞ [{game_version.upper()}]"
                    )
            except Exception as e:
                logger.error(f"Error sending media: {e}")
        
        await update.message.reply_text(
            f"üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è [{game_version.upper()}]:\n\n"
            f"üìù {description}\n\n"
            f"üí° /{game_version}slovo —Å–ª–æ–≤–æ"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞")

async def game_say_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Guess word"""
    game_version = get_game_version_from_command(update.message.text)
    
    if not context.args:
        await update.message.reply_text(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{game_version}slovo —Å–ª–æ–≤–æ")
        return
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    guess = context.args[0]
    
    update_user_activity(user_id, username)
    
    if is_user_banned(user_id) or is_user_muted(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if not word_games[game_version]['active']:
        await update.message.reply_text(f"‚ùå –ö–æ–Ω–∫—É—Ä—Å {game_version.upper()} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return
    
    if not can_attempt(user_id, game_version):
        interval = word_games[game_version]['interval']
        await update.message.reply_text(f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {interval} –º–∏–Ω—É—Ç")
        return
    
    record_attempt(user_id, game_version)
    current_word = word_games[game_version]['current_word']
    
    # Notify mods
    try:
        await context.bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=(
                f"üéÆ –ü–æ–ø—ã—Ç–∫–∞ [{game_version.upper()}]\n\n"
                f"üë§ @{username} (ID: {user_id})\n"
                f"üéØ –ü–æ–ø—ã—Ç–∫–∞: {guess}\n"
                f"‚úÖ –û—Ç–≤–µ—Ç: {current_word}"
            )
        )
    except Exception as e:
        logger.error(f"Error sending notification: {e}")
    
    if normalize_word(guess) == normalize_word(current_word):
        word_games[game_version]['winners'].append(username)
        word_games[game_version]['active'] = False
        
        await update.message.reply_text(
            f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú [{game_version.upper()}]!\n\n"
            f"@{username}, –≤—ã —É–≥–∞–¥–∞–ª–∏ '{current_word}'!\n\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        
        try:
            await context.bot.send_message(
                chat_id=Config.MODERATION_GROUP_ID,
                text=(
                    f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ {game_version.upper()}!\n\n"
                    f"üë§ @{username} (ID: {user_id})\n"
                    f"üéØ –£–≥–∞–¥–∞–ª: {current_word}\n\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!"
                )
            )
        except Exception as e:
            logger.error(f"Error sending winner notification: {e}")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ [{game_version.upper()}]. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {word_games[game_version]['interval']} –º–∏–Ω"
        )

# ============= ROLL COMMANDS =============

async def roll_participant_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get number for roll"""
    game_version = get_game_version_from_command(update.message.text)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, username)
    
    if is_user_banned(user_id) or is_user_muted(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if user_id in roll_games[game_version]['participants']:
        number = roll_games[game_version]['participants'][user_id]['number']
        await update.message.reply_text(f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä: {number}")
        return
    
    number = get_unique_roll_number(game_version)
    
    roll_games[game_version]['participants'][user_id] = {
        'username': username,
        'number': number,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä: {number}\n\n"
        f"üé≤ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(roll_games[game_version]['participants'])}"
    )

async def mynumber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show my number"""
    game_version = get_game_version_from_command(update.message.text)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if user_id not in roll_games[game_version]['participants']:
        await update.message.reply_text(
            f"@{username}, –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ\n"
            f"/{game_version}roll –¥–ª—è —É—á–∞—Å—Ç–∏—è"
        )
        return
    
    number = roll_games[game_version]['participants'][user_id]['number']
    await update.message.reply_text(f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä: {number}")

async def roll_draw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Draw winners - FIXED: with notifications"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(f"üìù /{game_version}rollstart 3")
        return
    
    winners_count = min(5, max(1, int(context.args[0])))
    participants = roll_games[game_version]['participants']
    
    if len(participants) < winners_count:
        await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    winning_number = random.randint(1, 9999)
    
    participants_list = [
        (user_id, data['username'], data['number'])
        for user_id, data in participants.items()
    ]
    
    participants_list.sort(key=lambda x: abs(x[2] - winning_number))
    winners = participants_list[:winners_count]
    
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    winners_text = []
    
    for i, (user_id, username, number) in enumerate(winners, 1):
        medal = medals.get(i, f"{i}.")
        diff = abs(number - winning_number)
        winners_text.append(f"{medal} @{username} (–Ω–æ–º–µ—Ä: {number}, —Ä–∞–∑–Ω–∏—Ü–∞: {diff})")
    
    await update.message.reply_text(
        f"üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ {game_version.upper()}!\n\n"
        f"üé≤ –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ: {winning_number}\n"
        f"üë• –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {len(participants)}\n\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join(winners_text)
    )
    
    # Notify each winner
    for i, (user_id, username, number) in enumerate(winners, 1):
        try:
            medal = medals.get(i, f"{i}.")
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**\n\n"
                    f"{medal} –í—ã –∑–∞–Ω—è–ª–∏ {i} –º–µ—Å—Ç–æ –≤ {game_version.upper()}!\n\n"
                    f"üé≤ –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ: {winning_number}\n"
                    f"üéØ –í–∞—à –Ω–æ–º–µ—Ä: {number}\n"
                    f"üìä –†–∞–∑–Ω–∏—Ü–∞: {abs(number - winning_number)}\n\n"
                    f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!"
                ),
                parse_mode='Markdown'
            )
            logger.info(f"Winner notified: {user_id} ({username})")
        except Exception as e:
            logger.error(f"Failed to notify {user_id}: {e}")

async def rollreset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Reset roll"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    count = len(roll_games[game_version]['participants'])
    roll_games[game_version]['participants'] = {}
    
    await update.message.reply_text(
        f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à {game_version.upper()} —Å–±—Ä–æ—à–µ–Ω!\n"
        f"üìä –£–¥–∞–ª–µ–Ω–æ: {count}"
    )

async def rollstatus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Roll status"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    participants = roll_games[game_version]['participants']
    
    if not participants:
        await update.message.reply_text(f"üìä {game_version.upper()}: –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    text = f"üìä –°—Ç–∞—Ç—É—Å [{game_version.upper()}]:\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
    
    for i, (user_id, data) in enumerate(participants.items(), 1):
        text += f"{i}. @{data['username']} - {data['number']}\n"
    
    await update.message.reply_text(text)

# ============= INFO COMMANDS =============

async def gamesinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Game commands info"""
    game_version = get_game_version_from_command(update.message.text)
    
    await update.message.reply_text(
        f"üéÆ –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ [{game_version.upper()}]:\n\n"
        f"üéØ –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:\n"
        f"/{game_version}slovo —Å–ª–æ–≤–æ\n"
        f"/{game_version}info\n\n"
        f"üé≤ –†–æ–∑—ã–≥—Ä—ã—à:\n"
        f"/{game_version}roll\n"
        f"/{game_version}myroll"
    )

async def admgamesinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin game commands"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    await update.message.reply_text(
        f"üîß –ê–î–ú–ò–ù [{game_version.upper()}]:\n\n"
        f"üéØ –°–ª–æ–≤–∞:\n"
        f"/{game_version}add —Å–ª–æ–≤–æ\n"
        f"/{game_version}edit —Å–ª–æ–≤–æ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        f"/{game_version}start\n"
        f"/{game_version}stop\n\n"
        f"üé≤ –†–æ–∑—ã–≥—Ä—ã—à:\n"
        f"/{game_version}rollstart 1-5\n"
        f"/{game_version}reroll"
    )

async def anstimeset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set interval"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(f"üìù /{game_version}timeset 60")
        return
    
    minutes = int(context.args[0])
    word_games[game_version]['interval'] = minutes
    
    await update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª [{game_version.upper()}]: {minutes} –º–∏–Ω")

async def wordinfoedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit contest description"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_version = get_game_version_from_command(update.message.text)
    
    if not context.args:
        await update.message.reply_text(f"üìù /{game_version}infoedit —Ç–µ–∫—Å—Ç")
        return
    
    new_description = ' '.join(context.args)
    word_games[game_version]['description'] = new_description
    
    await update.message.reply_text(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ [{game_version.upper()}]:\n\n{new_description}")

async def handle_game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle game callbacks"""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split(":")
    
    # Remove prefix
    if data_parts[0].startswith('gmc_'):
        action = data_parts[0][4:]
    else:
        action = data_parts[0]
    
    if action == 'skip_media':
        game_version = data_parts[1] if len(data_parts) > 1 else None
        word = data_parts[2] if len(data_parts) > 2 else None
        
        user_id = update.effective_user.id
        game_waiting.pop(user_id, None)
        
        await query.edit_message_text(
            f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ [{game_version.upper()}]:\n\n"
            f"üìù {word}\n\n"
            f"/{game_version}start –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
        )
    
    elif action == 'finish':
        game_version = data_parts[1] if len(data_parts) > 1 else None
        word = data_parts[2] if len(data_parts) > 2 else None
        
        user_id = update.effective_user.id
        game_waiting.pop(user_id, None)
        
        media_count = len(word_games[game_version]['words'][word].get('media', []))
        
        await query.edit_message_text(
            f"‚úÖ –°–ª–æ–≤–æ –≥–æ—Ç–æ–≤–æ [{game_version.upper()}]:\n\n"
            f"üìù {word}\n"
            f"üì∏ –ú–µ–¥–∏–∞: {media_count}\n\n"
            f"/{game_version}start –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
        )

async def wordclear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Old command - redirect"""
    await update.message.reply_text(
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/need, /try, /more"
    )

__all__ = [
    'wordadd_command', 'wordedit_command', 'wordclear_command',
    'wordon_command', 'wordoff_command', 'wordinfo_command',
    'wordinfoedit_command', 'anstimeset_command',
    'gamesinfo_command', 'admgamesinfo_command', 'game_say_command',
    'roll_participant_command', 'roll_draw_command',
    'rollreset_command', 'rollstatus_command', 'mynumber_command',
    'handle_game_text_input', 'handle_game_media_input', 'handle_game_callback',
    'GAME_CALLBACKS',
]
