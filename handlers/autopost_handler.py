from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from services.autopost_service import autopost_service
from utils.validators import parse_time
import logging

logger = logging.getLogger(__name__)

async def autopost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        status = autopost_service.get_status()
        status_text = "–≤–∫–ª—é—á–µ–Ω" if status['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω"
        
        text = f"""‚öôÔ∏è **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {status_text}**

üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {status['message'] or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['interval']} —Å–µ–∫—É–Ω–¥ ({status['interval']//60} –º–∏–Ω—É—Ç)
üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {status['last_post'].strftime('%d.%m.%Y %H:%M') if status['last_post'] else '–Ω–∏–∫–æ–≥–¥–∞'}
üéØ –ß–∞—Ç: {status['target_chat_id'] or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üîÑ –°—Ç–∞—Ç—É—Å: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if status['running'] else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

**–ö–æ–º–∞–Ω–¥—ã:**
- `/autopost "—Ç–µ–∫—Å—Ç" –∏–Ω—Ç–µ—Ä–≤–∞–ª_—Å–µ–∫—É–Ω–¥ —á–∞—Ç_id` - –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
- `/autopost on` - –≤–∫–ª—é—á–∏—Ç—å
- `/autopost off` - –≤—ã–∫–ª—é—á–∏—Ç—å
- `/autopost enable` - –≤–∫–ª—é—á–∏—Ç—å
- `/autopost disable` - –≤—ã–∫–ª—é—á–∏—Ç—å
- `/autopost edit "–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç"` - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
- `/autopost interval —Å–µ–∫—É–Ω–¥—ã` - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
- `/autopost schedule 12:00 "—Ç–µ–∫—Å—Ç"` - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—Ä–µ–º—è"""
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    action = context.args[0].lower()
    
    if action in ['on', 'enable']:
        autopost_service.configure(enabled=True)
        await autopost_service.start()
        await update.message.reply_text("‚úÖ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω**", parse_mode='Markdown')
    
    elif action in ['off', 'disable']:
        autopost_service.configure(enabled=False)
        await autopost_service.stop()
        await update.message.reply_text("‚ùå **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω**", parse_mode='Markdown')
    
    elif action == 'edit' and len(context.args) > 1:
        new_text = ' '.join(context.args[1:]).strip('"')
        autopost_service.configure(message=new_text)
        await update.message.reply_text(f"‚úÖ **–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω:**\n{new_text}", parse_mode='Markdown')
    
    elif action == 'interval' and len(context.args) > 1:
        try:
            new_interval = int(context.args[1])
            autopost_service.configure(interval=new_interval)
            await update.message.reply_text(f"‚úÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥ ({new_interval//60} –º–∏–Ω—É—Ç)**", parse_mode='Markdown')
        except ValueError:
            await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    elif action == 'schedule' and len(context.args) >= 3:
        time_str = context.args[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä: 12:00
        message = ' '.join(context.args[2:]).strip('"')
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        await update.message.reply_text(
            f"üìÖ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {time_str}:**\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n\n"
            f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            parse_mode='Markdown'
        )
    
    elif len(context.args) >= 2:
        # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: /autopost "—Ç–µ–∫—Å—Ç" –∏–Ω—Ç–µ—Ä–≤–∞–ª [—á–∞—Ç_id]
        try:
            message = context.args[0].strip('"')
            interval = int(context.args[1])
            chat_id = int(context.args[2]) if len(context.args) > 2 else Config.MODERATION_GROUP_ID
            
            autopost_service.configure(
                message=message,
                interval=interval,
                target_chat_id=chat_id,
                enabled=True
            )
            
            await autopost_service.start()
            
            await update.message.reply_text(
                f"‚úÖ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω:**\n\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥ ({interval//60} –º–∏–Ω—É—Ç)\n"
                f"üéØ –ß–∞—Ç ID: {chat_id}",
                parse_mode='Markdown'
            )
        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/autopost \"—Ç–µ–∫—Å—Ç\" –∏–Ω—Ç–µ—Ä–≤–∞–ª_—Å–µ–∫—É–Ω–¥ [—á–∞—Ç_id]`",
                parse_mode='Markdown'
            )
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")

async def autopost_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    status = autopost_service.get_status()
    
    if not status['message']:
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
    
    try:
        await update.message.reply_text(
            f"üì¢ **–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:**\n\n{status['message']}",
            parse_mode='Markdown'
        )
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
