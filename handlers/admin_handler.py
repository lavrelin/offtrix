# -*- coding: utf-8 -*-
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.admin_notifications import admin_notifications
from data.user_data import user_data

logger = logging.getLogger(__name__)

# ===============================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# ===============================
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    keyboard = [
        [
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
        ],
        [
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
            InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="admin:games")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings"),
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç", callback_data="admin:autopost")
        ],
        [
            InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="admin:logs"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="admin:help")
        ]
    ]

    text = (
        "üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ===============================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
# ===============================
async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "broadcast":
        await show_broadcast_info(query, context)
    
    elif action == "stats":
        await show_stats(query, context)
    
    elif action == "users":
        await show_users_info(query, context)
    
    elif action == "games":
        await show_games_info(query, context)
    
    elif action == "settings":
        await show_settings(query, context)
    
    elif action == "autopost":
        await show_autopost_info(query, context)
    
    elif action == "logs":
        await show_logs(query, context)
    
    elif action == "help":
        await show_admin_help(query, context)
    
    elif action == "confirm_broadcast":
        await execute_broadcast(update, context)
    
    elif action == "cancel_broadcast":
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    elif action == "back":
        await show_main_admin_menu(query, context)


# ===============================
# –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–¥–ª—è callback)
# ===============================
async def show_main_admin_menu(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ callback"""
    keyboard = [
        [
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
        ],
        [
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
            InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="admin:games")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings"),
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç", callback_data="admin:autopost")
        ],
        [
            InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="admin:logs"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="admin:help")
        ]
    ]

    text = (
        "üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ===============================
# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ===============================
async def execute_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É (—á–µ—Ä–µ–∑ CallbackQuery)"""
    query = update.callback_query
    await query.answer()

    broadcast_text = context.user_data.get('broadcast_text')
    if not broadcast_text:
        await query.edit_message_text("‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await query.edit_message_text("üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    sent_count = 0
    failed_count = 0

    for user_id in user_data.keys():
        try:
            await context.bot.send_message(chat_id=user_id, text=broadcast_text)
            sent_count += 1
        except Exception as e:
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
            failed_count += 1

    await admin_notifications.notify_broadcast(
        sent=sent_count,
        failed=failed_count,
        moderator=query.from_user.username or str(query.from_user.id)
    )

    result_text = (
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
    )

    await query.edit_message_text(result_text, parse_mode='Markdown')
    context.user_data.pop('broadcast_text', None)


# ===============================
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–æ–º–∞–Ω–¥–∞ /say
# ===============================
async def say_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–° –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\n"
            "**–û—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–°–ê–ú–´–ô –ù–ê–î–Å–ñ–ù–´–ô):**\n"
            "`/say —Ç–µ–∫—Å—Ç` (reply)\n\n"
            "**–ü–æ user ID:**\n"
            "`/say 123456789 —Ç–µ–∫—Å—Ç`\n\n"
            "‚ö†Ô∏è **Username (@username) –ù–ï –†–ê–ë–û–¢–ê–ï–¢** - Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ username!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ ID –∏–ª–∏ reply.",
            parse_mode='Markdown'
        )
        return
    
    target_user_id = None
    message_text = None
    target_username = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–°–ê–ú–´–ô –ù–ê–î–Å–ñ–ù–´–ô)
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_username = update.message.reply_to_message.from_user.username or f"ID_{target_user_id}"
        message_text = ' '.join(context.args)
        
        logger.info(f"Say via reply: target={target_user_id}, username={target_username}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: User ID (–†–ê–ë–û–¢–ê–ï–¢)
    elif context.args[0].isdigit():
        target_user_id = int(context.args[0])
        message_text = ' '.join(context.args[1:])
        
        if not message_text.strip():
            await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ ID")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ username –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        try:
            from data.user_data import get_user_by_id
            user_info = get_user_by_id(target_user_id)
            if user_info:
                target_username = user_info.get('username', f"ID_{target_user_id}")
            else:
                target_username = f"ID_{target_user_id}"
        except Exception as e:
            logger.warning(f"Could not find username for {target_user_id}: {e}")
            target_username = f"ID_{target_user_id}"
        
        logger.info(f"Say via ID: target={target_user_id}, username={target_username}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: Username - –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø (–æ–±—ä—è—Å–Ω—è–µ–º –ø–æ—á–µ–º—É)
    elif context.args[0].startswith('@'):
        username = context.args[0][1:]
        await update.message.reply_text(
            f"‚ùå **Username –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è**\n\n"
            f"Telegram Bot API **–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç** —Å–ø–æ—Å–æ–±–∞ –Ω–∞–π—Ç–∏ user_id –ø–æ username.\n\n"
            f"**–†–µ—à–µ–Ω–∏—è:**\n"
            f"1. **–ü–æ–ø—Ä–æ—Å–∏—Ç–µ @{username} –Ω–∞–ø–∏—Å–∞—Ç—å `/start` –±–æ—Ç—É** - —Ç–æ–≥–¥–∞ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–∞–∑–µ\n"
            f"2. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply** - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"3. **–£–∑–Ω–∞–π—Ç–µ –µ–≥–æ ID** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/whois` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            f"üí° –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç `/start`, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/whois @{username}` —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID",
            parse_mode='Markdown'
        )
        return
    
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
            "**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
            "‚Ä¢ `/say USER_ID —Ç–µ–∫—Å—Ç` - –ø–æ ID (—Ä–∞–±–æ—Ç–∞–µ—Ç)\n"
            "‚Ä¢ –ò–ª–∏ reply: `/say —Ç–µ–∫—Å—Ç` - –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç)\n\n"
            "‚ö†Ô∏è Username –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if not message_text or not message_text.strip():
        await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –≥—Ä—É–ø–ø—ã
    if update.effective_chat.type != 'private':
        try:
            await update.message.delete()
            logger.info(f"Deleted /say command from group")
        except Exception as e:
            logger.warning(f"Could not delete say command: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üì® **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message_text}",
            parse_mode='Markdown'
        )
        
        logger.info(
            f"‚úÖ Say SUCCESS: admin {update.effective_user.id} -> user {target_user_id}"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        confirmation = (
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!**\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target_username}\n"
            f"üÜî ID: `{target_user_id}`\n"
            f"üìù –¢–µ–∫—Å—Ç ({len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤):\n"
            f"_{message_text[:100]}{'...' if len(message_text) > 100 else ''}_"
        )
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=confirmation,
                parse_mode='Markdown'
            )
        except Exception as conf_error:
            logger.warning(f"Could not send confirmation: {conf_error}")
            if update.effective_chat.type == 'private':
                await update.message.reply_text(
                    f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"
                )
            
    except Exception as e:
        logger.error(f"‚ùå Say FAILED: {e}", exc_info=True)
        
        error_str = str(e).lower()
        
        if "blocked" in error_str:
            reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        elif "not found" in error_str or "chat not found" in error_str:
            reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞"
        elif "deactivated" in error_str:
            reason = "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        elif "forbidden" in error_str:
            reason = "–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        else:
            reason = str(e)[:150]
        
        error_msg = (
            f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å**\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target_username}\n"
            f"üÜî ID: `{target_user_id}`\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å `/start` –±–æ—Ç—É\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        )
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=error_msg,
                parse_mode='Markdown'
            )
        except:
            if update.effective_chat.type == 'private':
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"
                )


async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üì¢ **–†–ê–°–°–´–õ–ö–ê**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "`/broadcast —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`\n\n"
            "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!",
            parse_mode='Markdown'
        )
        return
    
    message_text = ' '.join(context.args)
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin:confirm_broadcast"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin:cancel_broadcast")
        ]
    ]
    
    context.user_data['broadcast_text'] = message_text
    
    await update.message.reply_text(
        f"üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n\n{message_text}\n\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_data)}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def sendstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä—É—á–Ω—É—é"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await update.message.reply_text("üìä –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É...")
    
    try:
        await admin_notifications.send_statistics()
        await update.message.reply_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"Error sending stats: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


# ===============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
# ===============================
async def show_broadcast_info(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    total_users = len(user_data)
    
    text = (
        "üì¢ **–†–ê–°–°–´–õ–ö–ê**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/broadcast —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`\n\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_stats(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    from data.games_data import word_games, roll_games
    from datetime import datetime, timedelta
    
    total_users = len(user_data)
    active_24h = sum(1 for data in user_data.values() if 
                    datetime.now() - data['last_activity'] <= timedelta(days=1))
    active_7d = sum(1 for data in user_data.values() if 
                   datetime.now() - data['last_activity'] <= timedelta(days=7))
    total_messages = sum(data['message_count'] for data in user_data.values())
    banned_count = sum(1 for data in user_data.values() if data.get('banned'))
    muted_count = sum(1 for data in user_data.values() if 
                     data.get('muted_until') and data['muted_until'] > datetime.now())
    
    games_stats = ""
    for version in ['need', 'try', 'more']:
        active = "‚úÖ" if word_games[version]['active'] else "‚ùå"
        participants = len(roll_games[version]['participants'])
        total_words = len(word_games[version]['words'])
        
        games_stats += f"\n{version.upper()}: {active} | –°–ª–æ–≤: {total_words} | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants}"
    
    text = (
        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
        f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_24h}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7–¥: {active_7d}\n\n"
        f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_messages}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_messages // total_users if total_users > 0 else 0}\n\n"
        f"üî® **–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}\n"
        f"‚Ä¢ –í –º—É—Ç–µ: {muted_count}\n\n"
        f"üéÆ **–ò–≥—Ä—ã:**{games_stats}\n\n"
        f"üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/sendstats` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:stats")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_users_info(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    from data.user_data import get_top_users
    from datetime import datetime, timedelta
    
    total_users = len(user_data)
    active_today = sum(1 for data in user_data.values() if 
                      datetime.now() - data['last_activity'] <= timedelta(hours=24))
    
    top_users = get_top_users(5)
    top_text = "\n".join([
        f"{i+1}. @{user['username']} - {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π"
        for i, user in enumerate(top_users)
    ])
    
    text = (
        f"üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò**\n\n"
        f"üìä –í—Å–µ–≥–æ: {total_users}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n\n"
        f"üèÜ **–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö:**\n{top_text}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        f"‚Ä¢ `/top` - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ `/banlist` - —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:users")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_games_info(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–∞—Ö"""
    from data.games_data import word_games, roll_games
    
    text = "üéÆ **–ò–ì–†–´**\n\n"
    
    for version in ['need', 'try', 'more']:
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if word_games[version]['active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        current_word = word_games[version].get('current_word', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
        total_words = len(word_games[version]['words'])
        winners = len(word_games[version].get('winners', []))
        participants = len(roll_games[version]['participants'])
        interval = word_games[version]['interval']
        
        text += (
            f"**{version.upper()}:**\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ: {current_word if status == 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' else 'N/A'}\n"
            f"‚Ä¢ –°–ª–æ–≤ –≤ –±–∞–∑–µ: {total_words}\n"
            f"‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners}\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {participants}\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫: {interval} –º–∏–Ω\n\n"
        )
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω f-string —Å backslash
    commands_text = (
        "üìù **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/needguide`, `/tryguide`, `/moreguide`\n"
        "‚Ä¢ `/needstart`, `/trystart`, `/morestart`\n"
        "‚Ä¢ `/needrollstart N`, `/tryrollstart N`"
    )
    text += commands_text
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:games")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_settings(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = (
        "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê**\n\n"
        f"ü§ñ Bot Token: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if Config.BOT_TOKEN else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"üì¢ –ö–∞–Ω–∞–ª: {Config.TARGET_CHANNEL_ID}\n"
        f"üëÆ –ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {Config.MODERATION_GROUP_ID}\n"
        f"üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –≥—Ä—É–ø–ø–∞: {Config.ADMIN_GROUP_ID}\n"
        f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(Config.ADMIN_IDS)}\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(Config.MODERATOR_IDS)}\n"
        f"‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω: {Config.COOLDOWN_SECONDS // 3600} —á–∞—Å–æ–≤\n"
        f"üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if Config.SCHEDULER_ENABLED else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–∞–∂–¥—ã–µ {Config.STATS_INTERVAL_HOURS} —á–∞—Å–æ–≤\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_autopost_info(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ"""
    from services.autopost_service import autopost_service
    
    status_info = autopost_service.get_status()
    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if status_info['running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    text = (
        f"üîÑ **–ê–í–¢–û–ü–û–°–¢–ò–ù–ì**\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {Config.SCHEDULER_MIN_INTERVAL}-{Config.SCHEDULER_MAX_INTERVAL} –º–∏–Ω—É—Ç\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/autopost` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º\n"
        "‚Ä¢ `/autoposttest` - —Ç–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:autopost")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_logs(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    text = (
        "üìù **–õ–û–ì–ò**\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏—Å—Ç–µ–º—ã:\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ Railway logs.\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**\n"
        "‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ `/sendstats` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É\n"
        "‚Ä¢ `/banlist` - —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n"
        "‚Ä¢ `/top` - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_admin_help(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    text = (
        "‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–û–í**\n\n"
        "**üì¢ –†–∞—Å—Å—ã–ª–∫–∞:**\n"
        "‚Ä¢ `/broadcast —Ç–µ–∫—Å—Ç` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º\n"
        "‚Ä¢ `/say USER_ID —Ç–µ–∫—Å—Ç` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ ID\n"
        "‚Ä¢ `/say —Ç–µ–∫—Å—Ç` (reply) - –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
        "**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        "‚Ä¢ `/stats` - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ `/sendstats` - –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É\n"
        "‚Ä¢ `/top` - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "**üë• –ú–æ–¥–µ—Ä–∞—Ü–∏—è:**\n"
        "‚Ä¢ `/ban @user –ø—Ä–∏—á–∏–Ω–∞`\n"
        "‚Ä¢ `/unban @user`\n"
        "‚Ä¢ `/mute @user –≤—Ä–µ–º—è`\n"
        "‚Ä¢ `/unmute @user`\n"
        "‚Ä¢ `/banlist`\n\n"
        "**üéÆ –ò–≥—Ä—ã:**\n"
        "‚Ä¢ `/needadd`, `/tryadd`, `/moreadd`\n"
        "‚Ä¢ `/needstart`, `/trystart`, `/morestart`\n"
        "‚Ä¢ `/needrollstart N`\n\n"
        "**üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:**\n"
        "‚Ä¢ `/autopost` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ `/autoposttest` - —Ç–µ—Å—Ç\n\n"
        "**‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        "‚Ä¢ `/id` - —É–∑–Ω–∞—Ç—å ID\n"
        "‚Ä¢ `/chatinfo` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ===============================
# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
# ===============================
__all__ = [
    'admin_command',
    'execute_broadcast',
    'say_command',
    'broadcast_command',
    'sendstats_command',
    'handle_admin_callback'
]
