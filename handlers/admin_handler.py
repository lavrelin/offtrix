# -*- coding: utf-8 -*-
"""
Admin Handler v2.0 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
Prefix: adm_ (admin)
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- /broadcast –æ–±–Ω–æ–≤–ª–µ–Ω
- /say —É–¥–∞–ª–µ–Ω
- /talkto @username (text) –∏–ª–∏ /talkto id (text) –¥–æ–±–∞–≤–ª–µ–Ω
- /stats –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
- /id –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω —Å—é–¥–∞
- /report –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω —Å—é–¥–∞ —Å cooldown 1 —á–∞—Å
- /silence –¥–æ–±–∞–≤–ª–µ–Ω
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.admin_notifications import admin_notifications
from services.cooldown import cooldown_service
from services.channel_stats import channel_stats
from data.user_data import user_data, update_user_activity, is_user_banned
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIX: adm_ =============
ADMIN_CALLBACKS = {
    'broadcast': 'adm_brc',
    'stats_trixbot': 'adm_st_tb',
    'stats_channels': 'adm_st_ch',
    'users': 'adm_usr',
    'settings': 'adm_set',
    'help': 'adm_hlp',
    'back': 'adm_bk',
    'confirm_broadcast': 'adm_cbc',
    'cancel_broadcast': 'adm_cnbc',
    'stats_day': 'adm_st_d',
    'stats_week': 'adm_st_w',
    'stats_month': 'adm_st_m',
}

# ============= SILENCE LIST =============
silenced_users = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ silence —Ä–µ–∂–∏–º–µ

# ============= ID COMMAND =============

async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞"""
    user = update.effective_user
    chat = update.effective_chat
    
    text = f"üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID:**\n\nüë§ –í–∞—à ID: `{user.id}`"
    
    if chat.type != 'private':
        text += f"\nüí¨ ID —á–∞—Ç–∞: `{chat.id}`\nüìù –¢–∏–ø —á–∞—Ç–∞: {chat.type}"
        if chat.title:
            text += f"\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}"
    
    update_user_activity(user.id, user.username)
    await update.message.reply_text(text, parse_mode='Markdown')

# ============= REPORT COMMAND (—Å cooldown 1 —á–∞—Å) =============

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º (cooldown 1 —á–∞—Å)"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, update.effective_user.username)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    can_report, remaining = await cooldown_service.check_cooldown(
        user_id, 'report', 3600  # 1 —á–∞—Å
    )
    
    if not can_report:
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        await update.message.reply_text(
            f"‚è≥ –°–ª–µ–¥—É—é—â—É—é –∂–∞–ª–æ–±—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\n"
            "`/report @username –ø—Ä–∏—á–∏–Ω–∞` - –∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "`/report –ø—Ä–∏—á–∏–Ω–∞` - –æ–±—â–∞—è –∂–∞–ª–æ–±–∞\n\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –º–µ–¥–∏–∞ (reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/report @baduser –°–ø–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`\n"
            "‚Ä¢ `/report –ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–Ω–∞–ª–µ`",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    target = "–û–±—â–∞—è –∂–∞–ª–æ–±–∞"
    reason = ' '.join(context.args)
    
    if context.args[0].startswith('@'):
        target = context.args[0]
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–∏—á–∏–Ω—ã
    if len(reason) < 10:
        await update.message.reply_text(
            "‚ùå –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É
    media_info = None
    link = None
    
    if update.message.reply_to_message:
        replied = update.message.reply_to_message
        if replied.photo:
            media_info = "photo"
        elif replied.video:
            media_info = "video"
        elif replied.document:
            media_info = "document"
        
        if replied.text and ('http://' in replied.text or 'https://' in replied.text):
            link = replied.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    try:
        report_text = (
            f"üö® **–ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê**\n\n"
            f"üë§ –û—Ç: @{username} (ID: `{user_id}`)\n"
            f"üéØ –ù–∞: {target}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        if media_info:
            report_text += f"\nüìé –ú–µ–¥–∏–∞: {media_info}"
        if link:
            report_text += f"\nüîó –°—Å—ã–ª–∫–∞: {link}"
        
        await context.bot.send_message(
            Config.ADMIN_GROUP_ID,
            report_text,
            parse_mode='Markdown'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        await cooldown_service.set_cooldown(user_id, 'report', 3600)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ **–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "‚ö†Ô∏è –õ–æ–∂–Ω—ã–µ –∂–∞–ª–æ–±—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.\n"
            "‚è∞ –°–ª–µ–¥—É—é—â—É—é –∂–∞–ª–æ–±—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ 1 —á–∞—Å."
        )
        
        logger.info(f"Report from {username} (ID: {user_id}) about {target}: {reason}")
        
    except Exception as e:
        logger.error(f"Error sending report notification: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# ============= SILENCE COMMAND =============

async def silence_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\n"
            "`/silence @username` - –¥–æ–±–∞–≤–∏—Ç—å –≤ silence\n"
            "`/silence id` - –¥–æ–±–∞–≤–∏—Ç—å –≤ silence\n"
            "`/silence list` - —Å–ø–∏—Å–æ–∫\n"
            "`/silence remove @username` - —É–±—Ä–∞—Ç—å",
            parse_mode='Markdown'
        )
        return
    
    if context.args[0] == 'list':
        if not silenced_users:
            await update.message.reply_text("üìä –°–ø–∏—Å–æ–∫ silence –ø—É—Å—Ç")
            return
        
        text = "üîá **SILENCE LIST:**\n\n"
        for uid in silenced_users:
            text += f"‚Ä¢ ID: `{uid}`\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    if context.args[0] == 'remove':
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        target = context.args[1]
        user_id = None
        
        if target.startswith('@'):
            from data.user_data import get_user_by_username
            user_info = get_user_by_username(target[1:])
            if user_info:
                user_id = user_info['id']
        elif target.isdigit():
            user_id = int(target)
        
        if user_id and user_id in silenced_users:
            silenced_users.remove(user_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–±—Ä–∞–Ω –∏–∑ silence")
            logger.info(f"User {user_id} removed from silence by admin {update.effective_user.id}")
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ silence")
        
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ silence
    target = context.args[0]
    user_id = None
    
    if target.startswith('@'):
        from data.user_data import get_user_by_username
        user_info = get_user_by_username(target[1:])
        if user_info:
            user_id = user_info['id']
    elif target.isdigit():
        user_id = int(target)
    
    if user_id:
        silenced_users.add(user_id)
        await update.message.reply_text(
            f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –¥–æ–±–∞–≤–ª–µ–Ω –≤ silence\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–≥–æ"
        )
        logger.info(f"User {user_id} silenced by admin {update.effective_user.id}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

def is_user_silenced(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ silence"""
    return user_id in silenced_users

# ============= ADMIN PANEL =============

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin panel"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    keyboard = [
        [
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data=ADMIN_CALLBACKS['broadcast']),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=ADMIN_CALLBACKS['stats_trixbot'])
        ],
        [
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=ADMIN_CALLBACKS['users']),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=ADMIN_CALLBACKS['settings'])
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data=ADMIN_CALLBACKS['help'])
        ]
    ]

    await update.message.reply_text(
        "üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= ADMIN CALLBACKS =============

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin callback handler"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    handlers = {
        ADMIN_CALLBACKS['broadcast']: show_broadcast_info,
        ADMIN_CALLBACKS['stats_trixbot']: show_trixbot_stats,
        ADMIN_CALLBACKS['stats_channels']: show_channels_stats,
        ADMIN_CALLBACKS['users']: show_users_info,
        ADMIN_CALLBACKS['settings']: show_settings,
        ADMIN_CALLBACKS['help']: show_admin_help,
        ADMIN_CALLBACKS['back']: show_main_admin_menu,
        ADMIN_CALLBACKS['confirm_broadcast']: execute_broadcast,
        ADMIN_CALLBACKS['cancel_broadcast']: lambda q, c: q.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"),
        ADMIN_CALLBACKS['stats_day']: lambda q, c: show_period_stats(q, c, 'day'),
        ADMIN_CALLBACKS['stats_week']: lambda q, c: show_period_stats(q, c, 'week'),
        ADMIN_CALLBACKS['stats_month']: lambda q, c: show_period_stats(q, c, 'month'),
    }
    
    handler = handlers.get(action)
    if handler:
        await handler(query, context)

# ============= STATS FUNCTIONS =============

async def show_trixbot_stats(query, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TrixBot —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–∏–æ–¥–æ–≤"""
    keyboard = [
        [
            InlineKeyboardButton("üìä –ö–∞–Ω–∞–ª—ã", callback_data=ADMIN_CALLBACKS['stats_channels']),
        ],
        [
            InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data=ADMIN_CALLBACKS['stats_day']),
            InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data=ADMIN_CALLBACKS['stats_week']),
            InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data=ADMIN_CALLBACKS['stats_month']),
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_CALLBACKS['back'])]
    ]
    
    from data.user_data import get_top_commands
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = len(user_data)
    active_24h = sum(
        1 for d in user_data.values() 
        if datetime.now() - d['last_activity'] <= timedelta(days=1)
    )
    total_commands = sum(d.get('command_count', 0) for d in user_data.values())
    
    # –¢–æ–ø –∫–æ–º–∞–Ω–¥
    top_commands = get_top_commands(5)
    top_text = "\n".join([
        f"{i+1}. /{cmd} ‚Äî {count} —Ä–∞–∑" 
        for i, (cmd, count) in enumerate(top_commands)
    ])
    
    text = (
        f"‚öôÔ∏è **–°–¢–ê–¢–ò–°–¢–ò–ö–ê TRIXBOT**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö 24—á: {active_24h}\n"
        f"‚å®Ô∏è –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}\n\n"
        f"üîù **–¢–æ–ø-5 –∫–æ–º–∞–Ω–¥:**\n{top_text}"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_channels_stats(query, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=ADMIN_CALLBACKS['stats_channels'])],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_CALLBACKS['stats_trixbot'])]
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤
    stats = await channel_stats.get_all_stats()
    
    if 'error' in stats:
        text = f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}"
    else:
        text = channel_stats.format_stats_message(stats)
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_period_stats(query, context, period: str):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_CALLBACKS['stats_trixbot'])]
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    if period == 'day':
        cutoff = datetime.now() - timedelta(days=1)
        title = "–î–µ–Ω—å"
    elif period == 'week':
        cutoff = datetime.now() - timedelta(days=7)
        title = "–ù–µ–¥–µ–ª—è"
    else:  # month
        cutoff = datetime.now() - timedelta(days=30)
        title = "–ú–µ—Å—è—Ü"
    
    # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = sum(
        1 for d in user_data.values() 
        if d['last_activity'] >= cutoff
    )
    
    text = (
        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê {title.upper()}**\n\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {cutoff.strftime('%d.%m.%Y %H:%M')}"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_broadcast_info(query, context):
    """Broadcast info"""
    text = (
        f"üì¢ **–†–ê–°–°–´–õ–ö–ê**\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/broadcast —Ç–µ–∫—Å—Ç`"
    )
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_CALLBACKS['back'])]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_users_info(query, context):
    """Users info"""
    from data.user_data import get_top_users
    
    top = get_top_users(5)
    top_text = "\n".join([f"{i+1}. @{u['username']} - {u['message_count']}" for i, u in enumerate(top)])
    
    text = f"üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò**\n\nüèÜ **–¢–æ–ø-5:**\n{top_text}"
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_CALLBACKS['back'])]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_settings(query, context):
    """Settings"""
    text = (
        f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**\n\n"
        f"üì¢ –ö–∞–Ω–∞–ª: {Config.TARGET_CHANNEL_ID}\n"
        f"üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è: {Config.MODERATION_GROUP_ID}\n"
        f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(Config.ADMIN_IDS)}\n"
        f"‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω: {Config.COOLDOWN_SECONDS // 3600}—á"
    )
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_CALLBACKS['back'])]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_admin_help(query, context):
    """Admin help"""
    text = (
        "‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê**\n\n"
        "**–†–∞—Å—Å—ã–ª–∫–∞:**\n"
        "`/broadcast —Ç–µ–∫—Å—Ç`\n\n"
        "**–°–æ–æ–±—â–µ–Ω–∏—è:**\n"
        "`/talkto @username —Ç–µ–∫—Å—Ç`\n"
        "`/talkto id —Ç–µ–∫—Å—Ç`\n\n"
        "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        "`/stats`\n\n"
        "**Silence:**\n"
        "`/silence @username`"
    )
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_CALLBACKS['back'])]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_main_admin_menu(query, context):
    """Main admin menu"""
    keyboard = [
        [
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data=ADMIN_CALLBACKS['broadcast']),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=ADMIN_CALLBACKS['stats_trixbot'])
        ],
        [
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=ADMIN_CALLBACKS['users']),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data=ADMIN_CALLBACKS['help'])
        ]
    ]
    await query.edit_message_text(
        "üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def execute_broadcast(query, context):
    """Execute broadcast"""
    text = context.user_data.get('broadcast_text')
    if not text:
        await query.edit_message_text("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await query.edit_message_text("üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    sent, failed = 0, 0
    for uid in user_data.keys():
        try:
            await context.bot.send_message(uid, text)
            sent += 1
        except:
            failed += 1

    await query.edit_message_text(
        f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ**\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        parse_mode='Markdown'
    )
    context.user_data.pop('broadcast_text', None)

# ============= TALKTO COMMAND =============

async def talkto_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–∞–º–µ–Ω–∞ /say)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\n"
            "`/talkto @username —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`\n"
            "`/talkto id —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/talkto @user –ü—Ä–∏–≤–µ—Ç!`\n"
            "‚Ä¢ `/talkto 123456789 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    message_text = ' '.join(context.args[1:])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    
    if target.startswith('@'):
        from data.user_data import get_user_by_username
        user_info = get_user_by_username(target[1:])
        if user_info:
            user_id = user_info['id']
    elif target.isdigit():
        user_id = int(target)
    
    if not user_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–∞—Ö
    if update.effective_chat.type != 'private':
        try:
            await update.message.delete()
        except:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            user_id,
            f"üì® **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message_text}",
            parse_mode='Markdown'
        )
        
        await context.bot.send_message(
            update.effective_user.id,
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target}\nüìù –¢–µ–∫—Å—Ç: {message_text[:100]}...",
            parse_mode='Markdown'
        )
        
        logger.info(f"Talkto from admin {update.effective_user.id} to {user_id}: {message_text[:50]}")
        
    except Exception as e:
        error_msg = "–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞" if "blocked" in str(e).lower() else "–Ω–µ –Ω–∞–π–¥–µ–Ω"
        await context.bot.send_message(
            update.effective_user.id,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: {error_msg}"
        )

# ============= BROADCAST COMMAND =============

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Broadcast command"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    if not context.args:
        await update.message.reply_text("üìù `/broadcast —Ç–µ–∫—Å—Ç`", parse_mode='Markdown')
        return
    
    msg_text = ' '.join(context.args)
    context.user_data['broadcast_text'] = msg_text
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=ADMIN_CALLBACKS['confirm_broadcast']),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=ADMIN_CALLBACKS['cancel_broadcast'])
        ]
    ]
    
    await update.message.reply_text(
        f"üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n{msg_text}\n\nüë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_data)}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def sendstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send stats"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    await update.message.reply_text("üìä –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    try:
        await admin_notifications.send_statistics()
        await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

__all__ = [
    'admin_command', 'handle_admin_callback', 'talkto_command',
    'broadcast_command', 'sendstats_command', 'ADMIN_CALLBACKS',
    'id_command', 'report_command', 'silence_command', 'is_user_silenced'
]
