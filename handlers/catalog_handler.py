# -*- coding: utf-8 -*-
"""
Catalog Handler - OPTIMIZED v5.2
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã callback_data: ctc_
- –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
"""
import logging
import re
from typing import Optional, Dict
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ContextTypes
from telegram.error import TelegramError, BadRequest, Forbidden
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIXES =============
CATALOG_CALLBACKS = {
    'next': 'ctc_next',
    'finish': 'ctc_finish',
    'restart': 'ctc_restart',
    'search': 'ctc_search',
    'cancel_search': 'ctc_cancel_search',
    'category': 'ctc_cat',
    'click': 'ctc_click',
    'add_cat': 'ctc_add_cat',
    'rate': 'ctc_rate',
    'cancel_review': 'ctc_cancel_review',
    'cancel': 'ctc_cancel',
    'cancel_top': 'ctc_cancel_top',
    'cancel_ad': 'ctc_cancel_ad',
    'priority_finish': 'ctc_priority_finish',
    'priority_clear': 'ctc_priority_clear',
    'priority_stats': 'ctc_priority_stats',
    'ad_by_number': 'ctc_ad_by_number',
    'ad_by_link': 'ctc_ad_by_link',
    'follow_menu': 'ctc_follow_menu',
    'follow_cat': 'ctc_follow_cat',
    'my_follows': 'ctc_my_follows',
    'unfollow': 'ctc_unfollow',
    'unfollow_all': 'ctc_unfollow_all',
    'subscribe_menu': 'ctc_subscribe_menu',
    'reviews_menu': 'ctc_reviews_menu',
    'view_reviews': 'ctc_view_reviews',
    'write_review': 'ctc_write_review',
    'remove_confirm': 'ctc_remove_confirm',
    'remove_cancel': 'ctc_remove_cancel',
    'edit': 'ctc_edit',
    'edit_cancel': 'ctc_edit_cancel',
    'close_menu': 'ctc_close_menu',
}

# ============= MEDIA EXTRACTION =============

async def extract_media_from_link(bot: Bot, telegram_link: str) -> Optional[Dict]:
    """Extract media from Telegram post - OPTIMIZED"""
    try:
        if not telegram_link or 't.me/' not in telegram_link:
            return {'success': False, 'message': '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞'}
        
        match = re.search(r't\.me/([^/]+)/(\d+)', telegram_link)
        if not match:
            return {'success': False, 'message': '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ'}
        
        channel_username = match.group(1).lstrip('@')
        message_id = int(match.group(2))
        
        # Determine chat_id
        if channel_username.startswith('-'):
            chat_id = int(channel_username)
        elif channel_username.isdigit():
            chat_id = int(f"-100{channel_username}")
        else:
            chat_id = f"@{channel_username}"
        
        logger.info(f"üì• Extracting from: {chat_id}/{message_id}")
        
        # Check bot access
        try:
            await bot.get_chat(chat_id)
        except (Forbidden, BadRequest) as e:
            logger.error(f"‚ùå No access: {e}")
            return {
                'success': False,
                'message': '‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É\n\n'
                          '1. –î–æ–±–∞–≤—å—Ç–µ @TrixLiveBot –≤ –∫–∞–Ω–∞–ª\n'
                          '2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
                          '3. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ –≤—Ä—É—á–Ω—É—é'
            }
        
        # Forward to temp chat
        try:
            forwarded = await bot.forward_message(
                chat_id=Config.MODERATION_GROUP_ID,
                from_chat_id=chat_id,
                message_id=message_id
            )
            
            result = None
            media_map = {
                'photo': lambda m: {'type': 'photo', 'file_id': m.photo[-1].file_id},
                'video': lambda m: {'type': 'video', 'file_id': m.video.file_id},
                'document': lambda m: {'type': 'document', 'file_id': m.document.file_id},
                'animation': lambda m: {'type': 'animation', 'file_id': m.animation.file_id},
            }
            
            for media_type, extractor in media_map.items():
                if getattr(forwarded, media_type, None):
                    media_data = extractor(forwarded)
                    result = {
                        'success': True,
                        **media_data,
                        'media_group_id': forwarded.media_group_id,
                        'media_json': [media_data['file_id']],
                        'message': f'‚úÖ {media_type.title()} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ'
                    }
                    break
            
            if not result:
                result = {
                    'success': False,
                    'message': '‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ\n'
                              '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ –≤—Ä—É—á–Ω—É—é'
                }
            
            # Cleanup
            try:
                await bot.delete_message(
                    chat_id=Config.MODERATION_GROUP_ID,
                    message_id=forwarded.message_id
                )
            except Exception:
                pass
            
            return result
            
        except (BadRequest, Forbidden) as e:
            logger.error(f"‚ùå Forward failed: {e}")
            return {
                'success': False,
                'message': '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞\n'
                          '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ –≤—Ä—É—á–Ω—É—é'
            }
            
    except Exception as e:
        logger.error(f"‚ùå Media extraction error: {e}", exc_info=True)
        return {'success': False, 'message': f'‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}'}

# ============= SEND POST WITH MEDIA =============

async def send_catalog_post(bot: Bot, chat_id: int, post: Dict, index: int, total: int) -> bool:
    """Send catalog card - OPTIMIZED"""
    try:
        catalog_number = post.get('catalog_number', '????')
        
        # Build card text
        card_text = (
            f"#Ô∏è‚É£ **–ü–æ—Å—Ç {catalog_number}**\n\n"
            f"üìÇ {post.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚ÑπÔ∏è {post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        )
        
        # Add tags
        tags = post.get('tags', [])
        if tags and isinstance(tags, list):
            clean_tags = [f"#{re.sub(r'[^\w\-]', '', str(tag).replace(' ', '_'))}" 
                         for tag in tags[:5] if tag]
            if clean_tags:
                card_text += f"{' '.join(clean_tags)}\n"
        
        # Add rating
        review_count = post.get('review_count', 0)
        if review_count >= 10:
            rating = post.get('rating', 0)
            stars = "‚≠ê" * int(rating)
            card_text += f"**Rating**: {stars} {rating:.1f} ({review_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
        else:
            card_text += "**Rating**: -\n"
        
        # Build keyboard
        keyboard = [
            [
                InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏", url=post.get('catalog_link', '#'), 
                                   callback_data=f"{CATALOG_CALLBACKS['click']}:{post.get('id')}"),
                InlineKeyboardButton("üßë‚Äçüßí‚Äçüßí –û—Ç–∑—ã–≤—ã", 
                                   callback_data=f"{CATALOG_CALLBACKS['reviews_menu']}:{post.get('id')}")
            ],
            [InlineKeyboardButton("üÜï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", 
                                callback_data=f"{CATALOG_CALLBACKS['subscribe_menu']}:{post.get('category')}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Send with media if available
        media_type = post.get('media_type')
        media_file_id = post.get('media_file_id')
        
        if media_file_id and media_type:
            send_funcs = {
                'photo': bot.send_photo,
                'video': bot.send_video,
                'document': bot.send_document,
                'animation': bot.send_animation,
            }
            
            send_func = send_funcs.get(media_type)
            if send_func:
                try:
                    await send_func(
                        chat_id=chat_id,
                        **{media_type: media_file_id},
                        caption=card_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    await catalog_service.increment_views(post.get('id'), chat_id)
                    return True
                except TelegramError:
                    pass
        
        # Fallback to text
        await bot.send_message(
            chat_id=chat_id,
            text=card_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        await catalog_service.increment_views(post.get('id'), chat_id)
        return True
        
    except Exception as e:
        logger.error(f"Error sending catalog post: {e}")
        return False

# ============= COMMANDS =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Browse catalog - /catalog"""
    user_id = update.effective_user.id
    posts = await catalog_service.get_random_posts_mixed(user_id, count=5)
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=CATALOG_CALLBACKS['restart'])],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mnc_back")]
        ]
        await update.message.reply_text(
            "üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç\n\n–ù–∞–∂–º–∏—Ç–µ üîÑ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    for i, post in enumerate(posts, 1):
        await send_catalog_post(context.bot, update.effective_chat.id, post, i, len(posts))
    
    keyboard = [
        [
            InlineKeyboardButton("üîÄ –°–ª–µ–¥—É—é—â–∏–µ 5", callback_data=CATALOG_CALLBACKS['next']),
            InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data=CATALOG_CALLBACKS['finish'])
        ],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=CATALOG_CALLBACKS['search'])]
    ]
    await update.message.reply_text(
        f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(posts)}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Search catalog - /search"""
    context.user_data['catalog_search'] = {'step': 'query'}
    
    keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data=CATALOG_CALLBACKS['cancel_search'])]]
    
    await update.message.reply_text(
        "üîé **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ –ü–æ —Ç–µ–≥–∞–º\n\n"
        "–ü—Ä–∏–º–µ—Ä: —Ä–µ—Å–Ω–∏—Ü—ã",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Leave review - /review [id]"""
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/review 1234`",
            parse_mode='Markdown'
        )
        return
    
    catalog_number = int(context.args[0])
    post = await catalog_service.get_post_by_number(catalog_number)
    
    if not post:
        await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{catalog_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    context.user_data['catalog_review'] = {
        'post_id': post['id'],
        'catalog_number': catalog_number,
        'step': 'rating'
    }
    
    keyboard = [
        [
            InlineKeyboardButton("‚≠ê", callback_data=f"{CATALOG_CALLBACKS['rate']}:1"),
            InlineKeyboardButton("‚≠ê‚≠ê", callback_data=f"{CATALOG_CALLBACKS['rate']}:2"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data=f"{CATALOG_CALLBACKS['rate']}:3")
        ],
        [
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"{CATALOG_CALLBACKS['rate']}:4"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"{CATALOG_CALLBACKS['rate']}:5")
        ],
        [InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=CATALOG_CALLBACKS['cancel_review'])]
    ]
    
    await update.message.reply_text(
        f"üåü **–û–¶–ï–ù–ö–ê –ü–û–°–¢–ê #{catalog_number}**\n\n"
        f"üìù {post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def categoryfollow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manage subscriptions - /categoryfollow"""
    user_id = update.effective_user.id
    
    try:
        subscriptions = await catalog_service.get_user_subscriptions(user_id)
        
        text = "üîî **–ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–¢–ï–ì–û–†–ò–ò**\n\n"
        
        if subscriptions:
            text += "‚òëÔ∏è –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            for sub in subscriptions:
                text += f"‚úÖ {sub.get('category')}\n"
            text += "\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data=CATALOG_CALLBACKS['follow_menu'])],
            [InlineKeyboardButton("‚òëÔ∏è –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data=CATALOG_CALLBACKS['my_follows'])]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in categoryfollow: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫")

async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add to catalog - /addtocatalog"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_add'] = {'step': 'link'}
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data=CATALOG_CALLBACKS['cancel'])]]
    
    await update.message.reply_text(
        "üõ§Ô∏è **–î–û–ë–ê–í–õ–ï–ù–ò–ï**\n\n–®–∞–≥ 1/5\n\n"
        "ü´ü –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/channel/123",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= ADMIN COMMANDS (SHORTENED) =============

async def addgirltocat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add to TopGirls - /addgirltocat"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    
    context.user_data['catalog_add_top'] = {'step': 'link', 'category': 'üë±üèª‚Äç‚ôÄÔ∏è TopGirls'}
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data=CATALOG_CALLBACKS['cancel_top'])]]
    
    await update.message.reply_text(
        "üíÉ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í TOPGIRLS**\n\n–®–∞–≥ 1/3\n\n"
        "üë©üèº‚Äçüíº –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def addboytocat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add to TopBoys - /addboytocat"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    
    context.user_data['catalog_add_top'] = {'step': 'link', 'category': 'ü§µüèº‚Äç‚ôÇÔ∏è TopBoys'}
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data=CATALOG_CALLBACKS['cancel_top'])]]
    
    await update.message.reply_text(
        "ü§µ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í TOPBOYS**\n\n–®–∞–≥ 1/3\n\n"
        "üßèüèª‚Äç‚ôÇÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= MORE ADMIN COMMANDS (Continued in next file) =============

async def handle_catalog_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Handle media upload - OPTIMIZED"""
    if 'catalog_add' not in context.user_data or context.user_data['catalog_add'].get('step') != 'media':
        return False
    
    data = context.user_data['catalog_add']
    
    media_map = {
        'photo': lambda m: ('photo', m.photo[-1].file_id),
        'video': lambda m: ('video', m.video.file_id),
        'document': lambda m: ('document', m.document.file_id),
        'animation': lambda m: ('animation', m.animation.file_id),
    }
    
    for media_type, extractor in media_map.items():
        if getattr(update.message, media_type, None):
            media_type, file_id = extractor(update.message)
            data.update({
                'media_type': media_type,
                'media_file_id': file_id,
                'media_group_id': update.message.media_group_id,
                'media_json': [file_id],
                'step': 'tags'
            })
            await update.message.reply_text(
                f"‚úÖ –ú–µ–¥–∏–∞: {media_type}\n\n"
                "#Ô∏è‚É£ –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):\n"
                "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä, –≥–µ–ª—å-–ª–∞–∫"
            )
            return True
    
    return False

# ============= CALLBACK HANDLER =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle all catalog callbacks - OPTIMIZED"""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split(":")
    
    # Remove prefix
    if data_parts[0].startswith('ctc_'):
        action = data_parts[0][4:]  # Remove 'ctc_' prefix
    else:
        action = data_parts[0]
    
    user_id = update.effective_user.id
    
    async def safe_edit(text, keyboard=None):
        try:
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        except Exception:
            try:
                await query.edit_message_caption(caption=text, reply_markup=keyboard, parse_mode='Markdown')
            except Exception:
                await query.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
    
    # ============= NAVIGATION =============
    
    if action == 'next':
        posts = await catalog_service.get_random_posts_mixed(user_id, count=5)
        if not posts:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=CATALOG_CALLBACKS['restart'])],
                [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mnc_back")]
            ]
            await safe_edit("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n–ù–∞–∂–º–∏—Ç–µ üîÑ –¥–ª—è —Å–±—Ä–æ—Å–∞", InlineKeyboardMarkup(keyboard))
        else:
            for i, post in enumerate(posts, 1):
                await send_catalog_post(context.bot, query.message.chat_id, post, i, len(posts))
            await query.message.delete()
    
    elif action == 'finish':
        await safe_edit(
            "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            "/catalog - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "/search - –ø–æ–∏—Å–∫\n"
            "/categoryfollow - –ø–æ–¥–ø–∏—Å–∫–∏"
        )
    
    elif action == 'restart':
        await catalog_service.reset_session(user_id)
        await safe_edit("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog")
    
    elif action == 'search':
        context.user_data['catalog_search'] = {'step': 'query'}
        keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data=CATALOG_CALLBACKS['cancel_search'])]]
        await safe_edit(
            "üîç **–ü–û–ò–°–ö**\n\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            InlineKeyboardMarkup(keyboard)
        )
    
    elif action == 'cancel_search':
        context.user_data.pop('catalog_search', None)
        await safe_edit("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω")
    
    elif action == 'click':
        post_id = int(data_parts[1]) if len(data_parts) > 1 else None
        if post_id:
            await catalog_service.increment_clicks(post_id, user_id)
    
    elif action == 'rate':
        if 'catalog_review' not in context.user_data:
            await query.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
            return
        
        rating = int(data_parts[1]) if len(data_parts) > 1 else 5
        context.user_data['catalog_review']['rating'] = rating
        context.user_data['catalog_review']['step'] = 'text'
        
        catalog_number = context.user_data['catalog_review'].get('catalog_number')
        stars = "‚≠ê" * rating
        
        keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=CATALOG_CALLBACKS['cancel_review'])]]
        
        await safe_edit(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞: {stars}\n\n"
            f"üìù –ü–æ—Å—Ç #{catalog_number}\n\n"
            f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤):",
            InlineKeyboardMarkup(keyboard)
        )
    
    # More handlers continue...

# ============= TEXT HANDLER =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input - OPTIMIZED"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # Search
    if 'catalog_search' in context.user_data:
        query_text = text.strip()
        
        if len(query_text) < 2:
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return
        
        posts = await catalog_service.search_posts(query_text, limit=10)
        
        if posts:
            for i, post in enumerate(posts, 1):
                await send_catalog_post(context.bot, update.effective_chat.id, post, i, len(posts))
            
            keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=CATALOG_CALLBACKS['finish'])]]
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(posts)}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        context.user_data.pop('catalog_search', None)
        return
    
    # Review text
    if 'catalog_review' in context.user_data:
        data = context.user_data['catalog_review']
        
        if data.get('step') == 'text':
            review_text = text.strip()[:500]
            
            if len(review_text) < 3:
                await update.message.reply_text("‚ùå –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return
            
            review_id = await catalog_service.add_review(
                post_id=data.get('post_id'),
                user_id=user_id,
                review_text=review_text,
                rating=data.get('rating', 5),
                username=update.effective_user.username,
                bot=context.bot
            )
            
            if review_id:
                await update.message.reply_text(
                    f"‚úÖ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
                    f"#{data.get('catalog_number')}\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")
            
            context.user_data.pop('catalog_review', None)
            return
    
    # Add post
    if 'catalog_add' in context.user_data:
        data = context.user_data['catalog_add']
        step = data.get('step')
        
        if step == 'link':
            if text.startswith('https://t.me/'):
                data['catalog_link'] = text
                
                await update.message.reply_text("‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –º–µ–¥–∏–∞...")
                
                media_result = await extract_media_from_link(context.bot, text)
                
                if media_result and media_result.get('success'):
                    data.update({
                        'media_type': media_result['type'],
                        'media_file_id': media_result['file_id'],
                        'media_group_id': media_result.get('media_group_id'),
                        'media_json': media_result.get('media_json', [])
                    })
                    await update.message.reply_text(f"‚úÖ –ú–µ–¥–∏–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {media_result['type']}")
                
                data['step'] = 'category'
                
                keyboard = [[InlineKeyboardButton(cat, callback_data=f"{CATALOG_CALLBACKS['add_cat']}:{cat}")] 
                           for cat in CATALOG_CATEGORIES.keys()]
                await update.message.reply_text(
                    "üìÇ –®–∞–≥ 2/5\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
        
        elif step == 'name':
            data['name'] = text[:255]
            
            if data.get('media_file_id'):
                data['step'] = 'tags'
                await update.message.reply_text(
                    f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {text[:50]}\n\n"
                    f"#Ô∏è‚É£ –®–∞–≥ 4/4\n\n–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
                )
            else:
                data['step'] = 'media'
                await update.message.reply_text(
                    "üì∏ –®–∞–≥ 4/5\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ /skip"
                )
        
        elif text == '/skip' and step == 'media':
            data['step'] = 'tags'
            await update.message.reply_text("#Ô∏è‚É£ –®–∞–≥ 4/4\n\n–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        
        elif step == 'tags':
            tags = [t.strip() for t in text.split(',') if t.strip()][:10]
            data['tags'] = tags
            
            post_id = await catalog_service.add_post(
                user_id=user_id,
                catalog_link=data['catalog_link'],
                category=data['category'],
                name=data['name'],
                tags=tags,
                media_type=data.get('media_type'),
                media_file_id=data.get('media_file_id'),
                media_group_id=data.get('media_group_id'),
                media_json=data.get('media_json', [])
            )
            
            if post_id:
                post = await catalog_service.get_post_by_id(post_id)
                await update.message.reply_text(
                    f"‚úÖ –ü–æ—Å—Ç #{post.get('catalog_number')} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üìÇ {data['category']}\n"
                    f"üìù {data['name']}\n"
                    f"üè∑Ô∏è {len(tags)} —Ç–µ–≥–æ–≤"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")
            
            context.user_data.pop('catalog_add', None)
        
        return

__all__ = [
    'catalog_command',
    'search_command',
    'review_command',
    'categoryfollow_command',
    'addtocatalog_command',
    'addgirltocat_command',
    'addboytocat_command',
    'handle_catalog_callback',
    'handle_catalog_text',
    'handle_catalog_media',
    'CATALOG_CALLBACKS',
]
