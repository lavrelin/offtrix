# -*- coding: utf-8 -*-
"""
Handler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ü—Ä–æ–µ–∫—Ç: –¢—Ä–∏–∫—Å

–ö–æ–º–∞–Ω–¥—ã:
  - /catalog           : –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥
  - /search            : –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  - /addtocatalog      : –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –≤ –∫–∞—Ç–∞–ª–æ–≥
  - /review [post_id]  : –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
  - /catalogpriority   : (–ê–î–ú–ò–ù) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
  - /addcatalogreklama : (–ê–î–ú–ò–ù) –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
  - /catalog_stats_*   : (–ê–î–ú–ò–ù) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import logging
from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, error
from telegram.ext import ContextTypes, ConversationHandler
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤ —Ñ–æ—Ä–º
STEP_LINK = 'link'
STEP_CATEGORY = 'category'
STEP_NAME = 'name'
STEP_MEDIA = 'media'
STEP_TAGS = 'tags'
STEP_DESCRIPTION = 'description'

MAX_POSTS_PER_PAGE = 5
MAX_PRIORITY_POSTS = 10
MAX_TAGS = 10
MAX_NAME_LENGTH = 255
MAX_REVIEW_LENGTH = 500
MAX_DESC_LENGTH = 1000


# ============= –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - /catalog
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        user_id = update.effective_user.id
        count = MAX_POSTS_PER_PAGE
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å—Ç—ã
        posts = await catalog_service.get_random_posts(user_id, count=count)
        
        if not posts:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
            ]
            
            await update.message.reply_text(
                "üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å\n\n"
                "–ù–∞–∂–º–∏—Ç–µ üîÑ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
        for i, post in enumerate(posts, 1):
            await send_catalog_post(update, context, post, i, len(posts))
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"),
                InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
            ],
            [InlineKeyboardButton("üïµüèª –ü–æ–∏—Å–∫", callback_data="catalog:search")]
        ]
        
        await update.message.reply_text(
            f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    except Exception as e:
        logger.error(f"Error in catalog_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É - /search
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        keyboard = []
        
        if not CATALOG_CATEGORIES:
            await update.message.reply_text(
                "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        for category in CATALOG_CATEGORIES.keys():
            keyboard.append(
                [InlineKeyboardButton(category, callback_data=f"catalog:cat:{category}")]
            )
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")])
        
        text = (
            "üïµüèº **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in search_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")


async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥ - /addtocatalog
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
    """
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        if 'catalog_add' in context.user_data:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. "
                "–ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        context.user_data['catalog_add'] = {'step': STEP_LINK}
        
        keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
        
        text = (
            "üÜï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–ê–¢–ê–õ–û–ì –£–°–õ–£–ì**\n\n"
            "–®–∞–≥ 1 –∏–∑ 5\n\n"
            "‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram-–∫–∞–Ω–∞–ª–µ:\n\n"
            "–ü—Ä–∏–º–µ—Ä: `https://t.me/catalogtrix/123`"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in addtocatalog_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ - /review [post_id]
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ
    """
    try:
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text(
                "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/review 123`",
                parse_mode='Markdown'
            )
            return
        
        post_id = int(context.args[0])
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        post = await catalog_service.get_post(post_id)
        if not post:
            await update.message.reply_text(
                f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
        context.user_data['catalog_review'] = {
            'post_id': post_id,
            'waiting': True
        }
        
        keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
        
        await update.message.reply_text(
            f"üñãÔ∏è **–û–¢–ó–´–í –û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ï**\n\n"
            f"ID –ø–æ—Å—Ç–∞: `{post_id}`\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {post.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–í–∞—à –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. {MAX_REVIEW_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in review_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# ============= –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalogpriority_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã - /catalogpriority (–ê–î–ú–ò–ù)
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    """
    if not Config.is_admin(update.effective_user.id):
        logger.warning(f"Unauthorized admin command attempt by {update.effective_user.id}")
        return
    
    try:
        context.user_data['catalog_priority'] = {'waiting': True, 'links': []}
        
        keyboard = [[InlineKeyboardButton("‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:priority_finish")]]
        
        text = (
            "üî¨ **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–°–¢–´**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {MAX_PRIORITY_POSTS} —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã (–ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏).\n\n"
            "–≠—Ç–∏ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.\n\n"
            "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: `https://t.me/catalogtrix/123`"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in catalogpriority_command: {e}")


async def addcatalogreklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç - /addcatalogreklama (–ê–î–ú–ò–ù)
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –∫–∞—Ç–∞–ª–æ–≥
    """
    if not Config.is_admin(update.effective_user.id):
        logger.warning(f"Unauthorized admin command attempt by {update.effective_user.id}")
        await update.message.reply_text("üëÆüèº‚Äç‚ôÇÔ∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        return
    
    try:
        if 'catalog_ad' in context.user_data:
            await update.message.reply_text(
                "‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã."
            )
            return
        
        context.user_data['catalog_ad'] = {'step': STEP_LINK}
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_ad")]]
        
        text = (
            "üåö **–î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–´**\n\n"
            "–®–∞–≥ 1 –∏–∑ 3\n\n"
            "‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in addcatalogreklama_command: {e}")


# ============= –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ê–î–ú–ò–ù) =============

async def catalog_stats_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üîò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalog_stats_users (–ê–î–ú–ò–ù)"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    try:
        stats = await catalog_service.get_user_stats()
        
        text = (
            "üîò **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
            f"‚óΩÔ∏è –ó–∞–ø—É—Å—Ç–∏–ª–∏ /catalog —Å–µ–≥–æ–¥–Ω—è: {stats.get('today', 0)}\n"
            f"‚óªÔ∏è –ó–∞ –Ω–µ–¥–µ–ª—é: {stats.get('week', 0)}\n"
            f"‚¨úÔ∏è –ó–∞ –º–µ—Å—è—Ü: {stats.get('month', 0)}\n\n"
            f"üé¶ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {stats.get('avg_views', 0):.1f}"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"Error in catalog_stats_users_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def catalog_stats_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - /catalog_stats_categories (–ê–î–ú–ò–ù)"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    try:
        stats = await catalog_service.get_category_stats()
        
        categories_text = "\n".join([
            f"{icon} {category}: {count}"
            for (category, icon), count in stats.items()
        ])
        
        text = (
            "üìÅ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô**\n\n"
            "üëΩ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
            f"{categories_text}"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"Error in catalog_stats_categories_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def catalog_stats_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üë®üèº‚Äçüíª –¢–û–ü 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - /catalog_stats_popular (–ê–î–ú–ò–ù)"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    try:
        top_posts = await catalog_service.get_top_posts(limit=10)
        
        posts_text = "\n".join([
            f"{i}. –ü–æ—Å—Ç #{post['id']} - {post['views']} –∫–ª–∏–∫–æ–≤ ({post['name']})"
            for i, post in enumerate(top_posts, 1)
        ])
        
        text = (
            "üèÜ **–¢–û–ü 10 –ü–û–ü–£–õ–Ø–†–ù–´–• –ü–û–°–¢–û–í**\n\n"
            f"{posts_text if posts_text else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            "üóø –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ LIVE —Ä–µ–∂–∏–º–µ"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"Error in catalog_stats_popular_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


# ============= CALLBACK HANDLERS =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"Error answering callback: {e}")
        return
    
    try:
        data = query.data
        user_id = query.from_user.id
        
        # –ü–∞—Ä—Å–∏–º callback data
        if not data.startswith("catalog:"):
            return
        
        parts = data.split(":")
        action = parts[1] if len(parts) > 1 else None
        
        if action == "next":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Å—Ç—ã
            posts = await catalog_service.get_random_posts(user_id, count=MAX_POSTS_PER_PAGE)
            
            if not posts:
                await query.edit_message_text("üìÇ –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
                return
            
            for i, post in enumerate(posts, 1):
                await send_catalog_post_callback(query, context, post, i, len(posts))
            
            await query.edit_message_text(
                f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        
        elif action == "finish":
            await query.edit_message_text("‚èπÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        elif action == "search":
            keyboard = []
            for category in CATALOG_CATEGORIES.keys():
                keyboard.append(
                    [InlineKeyboardButton(category, callback_data=f"catalog:cat:{category}")]
                )
            
            await query.edit_message_text(
                "üïµüèº –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif action == "cat":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = parts[2] if len(parts) > 2 else None
            
            if category not in CATALOG_CATEGORIES:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                return
            
            posts = await catalog_service.get_posts_by_category(category, limit=MAX_POSTS_PER_PAGE)
            
            if not posts:
                await query.edit_message_text(f"üìÇ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
                return
            
            for i, post in enumerate(posts, 1):
                await send_catalog_post_callback(query, context, post, i, len(posts))
        
        elif action == "review":
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–∑—ã–≤–∞
            post_id = int(parts[2]) if len(parts) > 2 else None
            
            if not post_id:
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ—Å—Ç–∞")
                return
            
            context.user_data['catalog_review'] = {
                'post_id': post_id,
                'waiting': True
            }
            
            keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
            
            await query.edit_message_text(
                f"üñãÔ∏è **–û–¢–ó–´–í –û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ï**\n\n"
                f"ID –ø–æ—Å—Ç–∞: `{post_id}`\n\n"
                f"–í–∞—à –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. {MAX_REVIEW_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        elif action == "addcat":
            # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
            category = parts[2] if len(parts) > 2 else None
            
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            if category not in CATALOG_CATEGORIES:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                return
            
            data = context.user_data['catalog_add']
            data['category'] = category
            data['step'] = STEP_NAME
            
            keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="catalog:skip_name")]]
            
            await query.edit_message_text(
                f"üö∂üèª –®–∞–≥ 2 –∏–∑ 5\n\n"
                f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏ (–º–∞–∫—Å. {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category}`",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        elif action == "skip_media":
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–≥–∞–º
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            data = context.user_data['catalog_add']
            data['step'] = STEP_TAGS
            
            keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:finish_add")]]
            
            await query.edit_message_text(
                "üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 4 –∏–∑ 5\n\n"
                f"#Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–º–∞–∫—Å. {MAX_TAGS}, –∫–∞–∂–¥—ã–π –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
                "–ü—Ä–∏–º–µ—Ä: `–º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –Ω–æ–≥—Ç–∏`",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        elif action == "finish_add":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            data = context.user_data['catalog_add']
            
            post_id = await catalog_service.add_post(
                user_id=user_id,
                catalog_link=data.get('link'),
                category=data.get('category'),
                name=data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                tags=data.get('tags', []),
                media_file_id=data.get('media_file_id'),
                media_type=data.get('media_type')
            )
            
            context.user_data.pop('catalog_add', None)
            
            if post_id:
                await query.edit_message_text(
                    f"üìá **–í –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è**\n\n"
                    f"üì¨ ID: {post_id}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', 'N/A')}\n"
                    f"üéöÔ∏è –¢–µ–≥–∏: {', '.join(data.get('tags', []))}",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ûñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
        
        elif action == "restart":
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
            await catalog_command(update, context)
        
        elif action == "cancel":
            context.user_data.pop('catalog_add', None)
            await query.edit_message_text("üôÖüèª –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif action == "cancel_review":
            context.user_data.pop('catalog_review', None)
            await query.edit_message_text("üöÆ –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω")
        
        elif action == "cancel_ad":
            context.user_data.pop('catalog_ad', None)
            await query.edit_message_text("üï≥Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif action == "priority_finish":
            priority_data = context.user_data.get('catalog_priority', {})
            links = priority_data.get('links', [])
            
            if not links:
                await query.edit_message_text("üñáÔ∏è –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                return
            
            count = await catalog_service.set_priority_posts(links)
            context.user_data.pop('catalog_priority', None)
            
            await query.edit_message_text(
                f"üëÄ Priority –ø–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã ü©∂\n\n"
                f"‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ: {count} –∏–∑ {len(links)}"
            )
    
    except ValueError as ve:
        logger.error(f"ValueError in handle_catalog_callback: {ve}")
        await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        logger.error(f"Error in handle_catalog_callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# ============= TEXT HANDLERS =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    try:
        # === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–ê ===
        if 'catalog_add' in context.user_data:
            await handle_add_post_flow(update, context, text)
        
        # === –û–¢–ó–´–í ===
        elif 'catalog_review' in context.user_data:
            await handle_review_flow(update, context, text)
        
        # === –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–°–¢–´ (–ê–î–ú–ò–ù) ===
        elif 'catalog_priority' in context.user_data:
            await handle_priority_flow(update, context, text)
        
        # === –†–ï–ö–õ–ê–ú–ù–´–ô –ü–û–°–¢ (–ê–î–ú–ò–ù) ===
        elif 'catalog_ad' in context.user_data:
            await handle_ad_flow(update, context, text)
    
    except Exception as e:
        logger.error(f"Error in handle_catalog_text: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def handle_add_post_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    data = context.user_data['catalog_add']
    step = data.get('step')
    
    if step == STEP_LINK:
        if not text.startswith('https://t.me/'):
            await update.message.reply_text(
                "üÜñ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n"
                "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `https://t.me/`",
                parse_mode='Markdown'
            )
            return
        
        data['link'] = text
        data['step'] = STEP_CATEGORY
        
        keyboard = []
        for category in CATALOG_CATEGORIES.keys():
            keyboard.append(
                [InlineKeyboardButton(category, callback_data=f"catalog:addcat:{category}")]
            )
        
        await update.message.reply_text(
            "üö∂üèª –®–∞–≥ 2 –∏–∑ 5\n\n"
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif step == STEP_NAME:
        name = text[:MAX_NAME_LENGTH]
        data['name'] = name
        data['step'] = STEP_MEDIA
        
        keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞", callback_data="catalog:skip_media")]]
        
        await update.message.reply_text(
            "üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 3 –∏–∑ 5\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞–ª—å–±–æ–º:\n\n"
            "üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º —É–≤–∏–¥–µ—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif step == STEP_TAGS:
        tags = [tag.strip() for tag in text.split(',')[:MAX_TAGS] if tag.strip()]
        tags = [tag[:50] for tag in tags]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
        data['tags'] = tags
        
        post_id = await catalog_service.add_post(
            user_id=user_id,
            catalog_link=data['link'],
            category=data['category'],
            name=data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            tags=tags,
            media_file_id=data.get('media_file_id'),
            media_type=data.get('media_type')
        )
        
        context.user_data.pop('catalog_add', None)
        
        if post_id:
            await update.message.reply_text(
                f"üìá **–í –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è**\n\n"
                f"üì¨ ID: {post_id}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                f"üéöÔ∏è –¢–µ–≥–∏: {', '.join(tags) if tags else '–ù–µ—Ç'}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ûñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")


async def handle_review_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    review_data = context.user_data['catalog_review']
    
    if review_data.get('waiting'):
        if len(text) > MAX_REVIEW_LENGTH:
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! "
                f"–ú–∞–∫—Å. {MAX_REVIEW_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å {len(text)}"
            )
            return
        
        post_id = review_data['post_id']
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        success = await catalog_service.add_review(
            post_id=post_id,
            user_id=user_id,
            text=text
        )
        
        context.user_data.pop('catalog_review', None)
        
        if success:
            await update.message.reply_text(
                f"üíæ **–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                f"üõÄ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! ‚òëÔ∏è",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤")


async def handle_priority_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    priority_data = context.user_data['catalog_priority']
    
    if priority_data.get('waiting'):
        if not text.startswith('https://t.me/'):
            await update.message.reply_text("üôÖüèº –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            return
        
        links = priority_data['links']
        if len(links) >= MAX_PRIORITY_POSTS:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PRIORITY_POSTS} —Å—Å—ã–ª–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç"
            )
            return
        
        links.append(text)
        count = len(links)
        
        await update.message.reply_text(
            f"‚õìÔ∏è‚Äçüí• –°—Å—ã–ª–∫–∞ {count}/{MAX_PRIORITY_POSTS} –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'"
        )


async def handle_ad_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    ad_data = context.user_data['catalog_ad']
    step = ad_data.get('step')
    
    if step == STEP_LINK:
        if not text.startswith('https://t.me/'):
            await update.message.reply_text("üß∑ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            return
        
        ad_data['link'] = text
        ad_data['step'] = STEP_DESCRIPTION
        
        await update.message.reply_text(
            "üèôÔ∏è –®–∞–≥ 2 –∏–∑ 3\n\n"
            f"üë©üèº‚Äçüíª –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã (–º–∞–∫—Å. {MAX_DESC_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):"
        )
    
    elif step == STEP_DESCRIPTION:
        if len(text) > MAX_DESC_LENGTH:
            await update.message.reply_text(
                f"‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! "
                f"–ú–∞–∫—Å. {MAX_DESC_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            return
        
        ad_data['description'] = text
        
        post_id = await catalog_service.add_ad_post(
            catalog_link=ad_data['link'],
            description=text
        )
        
        context.user_data.pop('catalog_ad', None)
        
        if post_id:
            await update.message.reply_text(
                f"üåå **–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"‚óªÔ∏è ID: {post_id}\n\n"
                f"‚ñ´Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –ø–æ—Å—Ç–æ–≤",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("üíÅüèª –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã")


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def send_catalog_post(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    post: Dict[str, Any],
    index: int,
    total: int
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        category = post.get('category', 'N/A')
        name = post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        tags = post.get('tags', [])
        views = post.get('views', 0)
        post_id = post.get('id')
        catalog_link = post.get('catalog_link', '#')
        
        text = (
            f"üèôÔ∏è **–ó–∞–ø–∏—Å—å {index}/{total}**\n\n"
            f"üèûÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category}`\n"
            f"üéë **{name}**\n\n"
            f"üåå –¢–µ–≥–∏: {', '.join(tags) if tags else '–Ω–µ—Ç'}\n"
            f"üå† –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üèÉüèª‚Äç‚ôÄÔ∏è –ö –ø–æ—Å—Ç—É", url=catalog_link)],
            [InlineKeyboardButton("üßëüèº‚Äçüíª –û—Ç–∑—ã–≤", callback_data=f"catalog:review:{post_id}")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        await catalog_service.increment_views(post_id)
    
    except Exception as e:
        logger.error(f"Error in send_catalog_post: {e}")


async def send_catalog_post_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    post: Dict[str, Any],
    index: int,
    total: int
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ callback –∑–∞–ø—Ä–æ—Å
    """
    try:
        category = post.get('category', 'N/A')
        name = post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        tags = post.get('tags', [])
        views = post.get('views', 0)
        post_id = post.get('id')
        catalog_link = post.get('catalog_link', '#')
        
        text = (
            f"ü™Ω **–ó–∞–ø–∏—Å—å {index}/{total}**\n\n"
            f"üí® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category}`\n"
            f"üåä **{name}**\n\n"
            f"üå™Ô∏è –¢–µ–≥–∏: {', '.join(tags) if tags else '–Ω–µ—Ç'}\n"
            f"üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíÅüèº –ö –ø–æ—Å—Ç—É", url=catalog_link)],
            [InlineKeyboardButton("üë±üèª‚Äç‚ôÄÔ∏è –û—Ç–∑—ã–≤", callback_data=f"catalog:review:{post_id}")]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        await catalog_service.increment_views(post_id)
    
    except Exception as e:
        logger.error(f"Error in send_catalog_post_callback: {e}")


# ============= –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =============

__all__ = [
    'catalog_command',
    'search_command',
    'addtocatalog_command',
    'review_command',
    'catalogpriority_command',
    'addcatalogreklama_command',
    'catalog_stats_users_command',
    'catalog_stats_categories_command',
    'catalog_stats_popular_command',
    'handle_catalog_callback',
    'handle_catalog_text',
]
