# -*- coding: utf-8 -*-
"""
Handler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - –í–ï–†–°–ò–Ø 2.0 –° –ü–û–õ–ù–´–ú –§–£–ù–ö–¶–ò–û–ù–ê–õ–û–ú
–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /mysubscriptions - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
- /edit [id] - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
- /remove [id] - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π  
- /bulkimport - –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
- /catalog_stats_new - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
- /catalog_stats_priority - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
- /catalog_stats_reklama - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã
- /catalog_stats_topusers - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- /catalog_stats_export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
- /foryou - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- /favorites - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ

–í–µ—Ä—Å–∏—è: 2.0.0 - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""
import logging
import re
from typing import Optional, Dict, List
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES

logger = logging.getLogger(__name__)


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def extract_media_from_link(bot: Bot, telegram_link: str) -> Optional[Dict]:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞ –≤ Telegram-–∫–∞–Ω–∞–ª–µ"""
    try:
        if not telegram_link or 't.me/' not in telegram_link:
            return None
        
        match = re.search(r't\.me/([^/]+)/(\d+)', telegram_link)
        if not match:
            return None
        
        channel_username = match.group(1)
        message_id = int(match.group(2))
        
        if channel_username.startswith('@'):
            channel_username = channel_username[1:]
        
        chat_id = f"@{channel_username}" if not channel_username.startswith('-100') else int(channel_username)
        
        try:
            message = await bot.forward_message(
                chat_id=bot.id,
                from_chat_id=chat_id,
                message_id=message_id
            )
            
            result = None
            if message.photo:
                result = {'type': 'photo', 'file_id': message.photo[-1].file_id, 'media_group_id': message.media_group_id, 'media_json': [message.photo[-1].file_id]}
            elif message.video:
                result = {'type': 'video', 'file_id': message.video.file_id, 'media_group_id': message.media_group_id, 'media_json': [message.video.file_id]}
            elif message.document:
                result = {'type': 'document', 'file_id': message.document.file_id, 'media_group_id': message.media_group_id, 'media_json': [message.document.file_id]}
            elif message.animation:
                result = {'type': 'animation', 'file_id': message.animation.file_id, 'media_group_id': message.media_group_id, 'media_json': [message.animation.file_id]}
            
            try:
                await bot.delete_message(chat_id=bot.id, message_id=message.message_id)
            except:
                pass
            
            if result:
                logger.info(f"‚úÖ Media extracted: {result['type']}")
            return result
        except TelegramError as e:
            logger.error(f"Cannot access message: {e}")
            return None
    except Exception as e:
        logger.error(f"Error extracting media: {e}")
        return None


async def send_catalog_post_with_media(bot: Bot, chat_id: int, post: Dict, index: int, total: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –º–µ–¥–∏–∞"""
    try:
        card_text = f"üÜî **–ü–æ—Å—Ç #{index} –∏–∑ {total}**\n\n"
        card_text += f"üìÇ {post.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        card_text += f"üìù {post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        
        tags = post.get('tags', [])
        if tags and isinstance(tags, list):
            tags_formatted = []
            for tag in tags[:5]:
                if tag:
                    clean_tag = re.sub(r'[^\w\-]', '', str(tag).replace(' ', '_'))
                    if clean_tag:
                        tags_formatted.append(f"#{clean_tag}")
            
            if tags_formatted:
                card_text += f"{' '.join(tags_formatted)}\n\n"
        
        card_text += f"üëÅ {post.get('views', 0)} | üîó {post.get('clicks', 0)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if post.get('rating') and post.get('review_count'):
            card_text += f"‚≠ê {post.get('rating'):.1f} ({post.get('review_count')} –æ—Ç–∑—ã–≤–æ–≤)\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=post.get('catalog_link', '#')),
                InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤", callback_data=f"catalog:review:{post.get('id')}")
            ],
            [
                InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"catalog:subscribe:{post.get('category')}"),
                InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"catalog:favorite:{post.get('id')}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        media_type = post.get('media_type')
        media_file_id = post.get('media_file_id')
        sent = False
        
        if media_file_id and media_type:
            try:
                if media_type == 'photo':
                    await bot.send_photo(chat_id=chat_id, photo=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'video':
                    await bot.send_video(chat_id=chat_id, video=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'document':
                    await bot.send_document(chat_id=chat_id, document=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'animation':
                    await bot.send_animation(chat_id=chat_id, animation=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                sent = True
            except TelegramError:
                sent = False
        
        if not sent:
            await bot.send_message(chat_id=chat_id, text=card_text, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
        
        return True
    except Exception as e:
        logger.error(f"Error sending catalog post: {e}")
        return False


async def handle_catalog_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    if 'catalog_add' not in context.user_data or context.user_data['catalog_add'].get('step') != 'media':
        return False
    
    data = context.user_data['catalog_add']
    media_type = media_file_id = None
    
    if update.message.photo:
        media_type, media_file_id = 'photo', update.message.photo[-1].file_id
    elif update.message.video:
        media_type, media_file_id = 'video', update.message.video.file_id
    elif update.message.document:
        media_type, media_file_id = 'document', update.message.document.file_id
    elif update.message.animation:
        media_type, media_file_id = 'animation', update.message.animation.file_id
    
    if media_type and media_file_id:
        data.update({
            'media_type': media_type,
            'media_file_id': media_file_id,
            'media_group_id': update.message.media_group_id,
            'media_json': [media_file_id],
            'step': 'tags'
        })
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞: {media_type}\n\n"
            "#Ô∏è‚É£ –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):\n"
            "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä, –≥–µ–ª—å-–ª–∞–∫"
        )
        return True
    return False


# ============= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ - /catalog"""
    user_id = update.effective_user.id
    count = 5
    posts = await catalog_service.get_random_posts(user_id, count=count)
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        await update.message.reply_text(
            "üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç\n\n"
            "–ù–∞–∂–º–∏—Ç–µ üîÑ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    for i, post in enumerate(posts, 1):
        await send_catalog_post_with_media(context.bot, update.effective_chat.id, post, i, len(posts))
    
    keyboard = [
        [
            InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"),
            InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
        ],
        [InlineKeyboardButton("üïµüèª‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫", callback_data="catalog:search")]
    ]
    await update.message.reply_text(
        f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(posts)}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ - /search"""
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"catalog:cat:{cat}")] for cat in CATALOG_CATEGORIES.keys()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")])
    await update.message.reply_text(
        "üïµüèº‚Äç‚ôÄÔ∏è **–ü–û–ò–°–ö**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ - /addtocatalog"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_add'] = {'step': 'link'}
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
    await update.message.reply_text(
        "üÜï **–î–û–ë–ê–í–õ–ï–ù–ò–ï**\n\n–®–∞–≥ 1/5\n\n"
        "‚õìÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/channel/123",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∑—ã–≤ - /review [id]"""
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/review 123`",
            parse_mode='Markdown'
        )
        return
    
    post_id = int(context.args[0])
    context.user_data['catalog_review'] = {'post_id': post_id, 'waiting': True}
    keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
    await update.message.reply_text(
        f"üñãÔ∏è **–û–¢–ó–´–í**\n\n"
        f"ID: {post_id}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def catalogpriority_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã - /catalogpriority"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_priority'] = {'links': [], 'step': 'collecting'}
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:priority_finish")]]
    await update.message.reply_text(
        "‚≠ê **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï**\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ (–¥–æ 10)",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addcatalogreklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É - /addcatalogreklama"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_ad'] = {'step': 'link'}
    keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_ad")]]
    await update.message.reply_text(
        "üì¢ **–†–ï–ö–õ–ê–ú–ê**\n\n–®–∞–≥ 1/2\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def catalogviews_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - /catalogviews"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_views_stats(limit=20)
        if not stats:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        
        text = "üìä **–¢–û–ü-20 –ü–û –ü–†–û–°–ú–û–¢–†–ê–ú**\n\n"
        for idx, (post_id, views, name) in enumerate(stats, 1):
            emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else "‚ñ™Ô∏è"
            text += f"{emoji} #{post_id}: {views} üëÅ - {name[:30]}...\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalog_stats_users"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_catalog_stats()
        text = (
            f"üë• **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
            f"üìä –ü–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}\n"
            f"üì∏ –° –º–µ–¥–∏–∞: {stats.get('posts_with_media', 0)} ({stats.get('media_percentage', 0)}%)\n"
            f"üìÑ –ë–µ–∑ –º–µ–¥–∏–∞: {stats.get('posts_without_media', 0)}\n\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('total_views', 0)}\n"
            f"üîó –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats.get('total_clicks', 0)}\n"
            f"üìà CTR: {stats.get('ctr', 0)}%\n\n"
            f"üî• –°–µ—Å—Å–∏–π: {stats.get('active_sessions', 0)}\n"
            f"üí¨ –û—Ç–∑—ã–≤–æ–≤: {stats.get('total_reviews', 0)}"
        )
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - /catalog_stats_categories"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_category_stats()
        if not stats:
            await update.message.reply_text("üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        
        text = "üìÅ **–ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú**\n\n"
        for category, count in stats.items():
            text += f"‚ñ™Ô∏è {category}: {count}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–û–ü-10 - /catalog_stats_popular"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_views_stats(limit=10)
        if not stats:
            await update.message.reply_text("üèÜ –¢–û–ü –ø—É—Å—Ç")
            return
        
        text = "üèÜ **–¢–û–ü-10**\n\n"
        for idx, (post_id, views, name) in enumerate(stats, 1):
            emoji = ["ü•á", "ü•à", "ü•â"][idx-1] if idx <= 3 else f"{idx}."
            text += f"{emoji} {name[:30]}... - {views} üëÅ\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


# ============= –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –í–ï–†–°–ò–ò 2.0 =============

async def mysubscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ - /mysubscriptions"""
    user_id = update.effective_user.id
    
    try:
        subscriptions = await catalog_service.get_user_subscriptions(user_id)
        
        if not subscriptions:
            keyboard = [[InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="catalog:search")]]
            await update.message.reply_text(
                "üìã **–ú–û–ò –ü–û–î–ü–ò–°–ö–ò**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥–∞—Ö!",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return
        
        text = f"üìã **–ú–û–ò –ü–û–î–ü–ò–°–ö–ò** ({len(subscriptions)})\n\n"
        
        keyboard = []
        for sub in subscriptions:
            category = sub.get('category')
            new_count = sub.get('new_count', 0)
            
            status = f"({new_count} –Ω–æ–≤—ã—Ö)" if new_count > 0 else ""
            text += f"üîî {category} {status}\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç '{category}'",
                    callback_data=f"catalog:unsub:{category}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="catalog:unsub_all")])
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="catalog:notif_settings")])
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in mysubscriptions: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫")


async def edit_catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - /catalogedit [id]"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/catalogedit [id]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/catalogedit 123`",
            parse_mode='Markdown'
        )
        return
    
    post_id = int(context.args[0])
    
    try:
        post = await catalog_service.get_post_by_id(post_id)
        
        if not post:
            await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        context.user_data['catalog_edit'] = {'post_id': post_id, 'post_data': post}
        
        text = (
            f"üõ†Ô∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post.get('category')}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {post.get('name')}\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(post.get('tags', []))}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {post.get('catalog_link')}\n\n"
            "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="catalog:edit:category")],
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="catalog:edit:name")],
            [InlineKeyboardButton("üè∑Ô∏è –¢–µ–≥–∏", callback_data="catalog:edit:tags")],
            [InlineKeyboardButton("üîó –°—Å—ã–ª–∫—É", callback_data="catalog:edit:link")],
            [InlineKeyboardButton("üì∏ –ú–µ–¥–∏–∞", callback_data="catalog:edit:media")],
            [InlineKeyboardButton("‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data="catalog:edit:priority")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="catalog:edit_cancel")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in edit_catalog: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞")


async def remove_catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - /remove [id]"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove [id]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/remove 123`",
            parse_mode='Markdown'
        )
        return
    
    post_id = int(context.args[0])
    
    try:
        post = await catalog_service.get_post_by_id(post_id)
        
        if not post:
            await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = (
            f"‚ö†Ô∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}**\n\n"
            f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {post.get('name')}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post.get('category')}\n"
            f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {post.get('views', 0)}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {post.get('rating', 0):.1f} ({post.get('review_count', 0)} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"catalog:remove_confirm:{post_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="catalog:remove_cancel")
            ]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in remove_catalog: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞")


async def bulkimport_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç - /bulkimport"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_bulk'] = {'links': [], 'step': 'collecting'}
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä", callback_data="catalog:bulk_finish")]]
    
    await update.message.reply_text(
        "üì¶ **–ú–ê–°–°–û–í–´–ô –ò–ú–ü–û–†–¢**\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã (–¥–æ 50):\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n"
        "‚Ä¢ –ò–ª–∏ –ø–æ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞ —Ä–∞–∑\n\n"
        "–ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä'",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def catalog_stats_new_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π - /catalog_stats_new"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        days_7 = await catalog_service.get_new_posts_count(days=7)
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        days_30 = await catalog_service.get_new_posts_count(days=30)
        # –°–µ–≥–æ–¥–Ω—è
        today = await catalog_service.get_new_posts_count(days=1)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        recent_posts = await catalog_service.get_recent_posts(limit=10)
        
        text = (
            f"üìä **–ù–û–í–´–ï –ó–ê–ü–ò–°–ò**\n\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è: {today}\n"
            f"üìÖ –ó–∞ 7 –¥–Ω–µ–π: {days_7}\n"
            f"üìÖ –ó–∞ 30 –¥–Ω–µ–π: {days_30}\n\n"
            f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n"
        )
        
        for idx, post in enumerate(recent_posts, 1):
            created_date = post.get('created_at', 'N/A')
            text += f"{idx}. #{post['id']} | {post['category']} - {post['name'][:25]}...\n"
            text += f"   üìÖ {created_date}\n\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in catalog_stats_new: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_priority_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ - /catalog_stats_priority"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        priority_stats = await catalog_service.get_priority_stats()
        
        if not priority_stats.get('posts'):
            await update.message.reply_text("‚≠ê –ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        
        posts = priority_stats.get('posts', [])
        avg_ctr = priority_stats.get('avg_ctr', 0)
        normal_ctr = priority_stats.get('normal_ctr', 0)
        improvement = priority_stats.get('improvement', 0)
        
        text = f"‚≠ê **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–°–¢–´** ({len(posts)}/10)\n\n"
        
        for idx, post in enumerate(posts, 1):
            emoji = ["ü•á", "ü•à", "ü•â"][idx-1] if idx <= 3 else f"{idx}Ô∏è‚É£"
            ctr = (post['clicks'] / post['views'] * 100) if post['views'] > 0 else 0
            
            text += (
                f"{emoji} #{post['id']} | {post['name'][:20]}...\n"
                f"   üëÅ {post['views']} | üñ± {post['clicks']} ({ctr:.1f}%)\n\n"
            )
        
        text += (
            f"üìà **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:**\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ CTR: {avg_ctr:.1f}%\n"
            f"‚Ä¢ –û–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã CTR: {normal_ctr:.1f}%\n"
            f"‚Ä¢ –ü—Ä–∏—Ä–æ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: +{improvement:.1f}%\n\n"
        )
        
        if len(posts) < 10:
            text += f"üí° –°–ª–æ—Ç—ã {len(posts)+1}-10 —Å–≤–æ–±–æ–¥–Ω—ã ‚Äì –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã"
        
        keyboard = [[InlineKeyboardButton("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏", callback_data="catalog:manage_priority")]]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in catalog_stats_priority: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_reklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã - /catalog_stats_reklama"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        ad_stats = await catalog_service.get_ad_stats()
        
        if not ad_stats.get('ads'):
            await update.message.reply_text("üíé –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
            return
        
        ads = ad_stats.get('ads', [])
        total_views = ad_stats.get('total_views', 0)
        total_clicks = ad_stats.get('total_clicks', 0)
        avg_ctr = ad_stats.get('avg_ctr', 0)
        
        text = f"üíé **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ö–õ–ê–ú–´**\n\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(ads)}):\n\n"
        
        for idx, ad in enumerate(ads, 1):
            ctr = (ad['clicks'] / ad['views'] * 100) if ad['views'] > 0 else 0
            
            text += (
                f"{idx}Ô∏è‚É£ {ad['name'][:25]}...\n"
                f"   üëÅ {ad['views']} | üñ± {ad['clicks']}\n"
                f"   üìà CTR: {ctr:.1f}%\n\n"
            )
        
        text += (
            f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤: {total_views:,}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {total_clicks:,}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π CTR: {avg_ctr:.1f}%\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π", callback_data="catalog:manage_ads")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="catalog:detailed_ads")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in catalog_stats_reklama: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_topusers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalog_stats_topusers"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        top_users = await catalog_service.get_top_users(limit=20)
        
        if not top_users:
            await update.message.reply_text("üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        text = "üëë **–¢–û–ü-20 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
        
        for idx, user in enumerate(top_users, 1):
            username = user.get('username', 'N/A')
            activity = user.get('activity_score', 0)
            subscriptions = user.get('subscriptions', 0)
            reviews = user.get('reviews', 0)
            
            text += (
                f"{idx}. @{username} (ID: {user['user_id']})\n"
                f"   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n"
                f"   üîî –ü–æ–¥–ø–∏—Å–æ–∫: {subscriptions} | üí¨ –û—Ç–∑—ã–≤–æ–≤: {reviews}\n\n"
            )
        
        # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
        segments = await catalog_service.get_user_segments()
        
        text += (
            f"üìä **–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è:**\n"
            f"‚Ä¢ –°—É–ø–µ—Ä-–∞–∫—Ç–∏–≤–Ω—ã–µ: {segments.get('super_active', 0)} –ø–æ–ª—å–∑.\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {segments.get('active', 0)} –ø–æ–ª—å–∑.\n"
            f"‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–µ: {segments.get('moderate', 0)} –ø–æ–ª—å–∑.\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {segments.get('inactive', 0)} –ø–æ–ª—å–∑.\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì® –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="catalog:segment_broadcast")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="catalog:detailed_users")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in catalog_stats_topusers: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - /catalog_stats_export"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚òëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="catalog:export:users")],
        [InlineKeyboardButton("‚òëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog:export:categories")],
        [InlineKeyboardButton("‚òëÔ∏è –¢–æ–ø –ø–æ—Å—Ç–æ–≤", callback_data="catalog:export:top")],
        [InlineKeyboardButton("‚òëÔ∏è –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏", callback_data="catalog:export:new")],
        [InlineKeyboardButton("‚òëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="catalog:export:subs")],
        [InlineKeyboardButton("‚òëÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="catalog:export:priority")],
        [InlineKeyboardButton("‚òëÔ∏è –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="catalog:export:ads")],
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë (Excel)", callback_data="catalog:export:all:xlsx")],
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë (CSV)", callback_data="catalog:export:all:csv")],
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë (JSON)", callback_data="catalog:export:all:json")]
    ]
    
    await update.message.reply_text(
        "üì¶ **–≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def foryou_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - /foryou"""
    user_id = update.effective_user.id
    
    try:
        recommendations = await catalog_service.get_personalized_recommendations(user_id, count=10)
        
        if not recommendations:
            await update.message.reply_text(
                "‚ú® **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**\n\n"
                "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"
            )
            return
        
        await update.message.reply_text(
            "‚ú® **–†–ï–ö–û–ú–ï–ù–î–£–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–û –î–õ–Ø –í–ê–°**\n\n"
            f"–ü–æ–¥–æ–±—Ä–∞–Ω–æ {len(recommendations)} —É—Å–ª—É–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
            "‚Ä¢ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –ù–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ"
        )
        
        for i, post in enumerate(recommendations, 1):
            await send_catalog_post_with_media(
                context.bot,
                update.effective_chat.id,
                post,
                i,
                len(recommendations)
            )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="catalog:foryou_refresh")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data="catalog:preferences")]
        ]
        
        await update.message.reply_text(
            "üí° –ü–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error in foryou: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


async def favorites_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–±—Ä–∞–Ω–Ω–æ–µ - /favorites"""
    user_id = update.effective_user.id
    
    try:
        favorites = await catalog_service.get_user_favorites(user_id)
        
        if not favorites:
            keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —É—Å–ª—É–≥", callback_data="catalog:search")]]
            await update.message.reply_text(
                "‚≠ê **–ú–û–ï –ò–ó–ë–†–ê–ù–ù–û–ï**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥\n\n"
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö!",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text(
            f"‚≠ê **–ú–û–ï –ò–ó–ë–†–ê–ù–ù–û–ï** ({len(favorites)})\n\n"
            "–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:"
        )
        
        for i, post in enumerate(favorites, 1):
            await send_catalog_post_with_media(
                context.bot,
                update.effective_chat.id,
                post,
                i,
                len(favorites)
            )
        
        keyboard = [
            [InlineKeyboardButton("üóÇÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog:favorites_sort")],
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º", callback_data="catalog:favorites_share")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="catalog:favorites_clear")]
        ]
        
        await update.message.reply_text(
            "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º:**",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error in favorites: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")


# ============= CALLBACKS =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    user_id = update.effective_user.id
    
    # ============= –ë–ê–ó–û–í–´–ï CALLBACKS =============
    
    if action == "next":
        posts = await catalog_service.get_random_posts(user_id, count=5)
        if not posts:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
            ]
            await query.edit_message_text(
                "üìÇ –í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n–ù–∞–∂–º–∏—Ç–µ üîÑ –¥–ª—è —Å–±—Ä–æ—Å–∞",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            for i, post in enumerate(posts, 1):
                await send_catalog_post_with_media(context.bot, query.message.chat_id, post, i, len(posts))
            await query.message.delete()
    
    elif action == "finish":
        await query.edit_message_text(
            "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            "/catalog - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "/search - –ø–æ–∏—Å–∫\n"
            "/mysubscriptions - –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/favorites - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        )
    
    elif action == "restart":
        await catalog_service.reset_session(user_id)
        await query.edit_message_text("üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog")
    
    elif action == "search":
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"catalog:cat:{cat}")] for cat in CATALOG_CATEGORIES.keys()]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog:finish")])
        await query.edit_message_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "cat":
        category = ":".join(data[2:])
        posts = await catalog_service.search_posts(category, limit=5)
        if posts:
            for i, post in enumerate(posts, 1):
                await send_catalog_post_with_media(context.bot, query.message.chat_id, post, i, len(posts))
            keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="catalog:finish")]]
            await query.edit_message_text(
                f"üìÇ –ù–∞–π–¥–µ–Ω–æ: {len(posts)}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
    
    elif action == "subscribe":
        category = ":".join(data[2:])
        success = await catalog_service.subscribe_to_category(user_id, category)
        await query.answer("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!" if success else "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    elif action == "review":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            context.user_data['catalog_review'] = {'post_id': post_id, 'waiting': True}
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
            await query.message.reply_text(
                f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø–æ—Å—Ç–µ #{post_id}:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif action == "cancel_review":
        context.user_data.pop('catalog_review', None)
        await query.edit_message_text("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω")
    
    elif action == "cancel":
        context.user_data.pop('catalog_add', None)
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "cancel_ad":
        context.user_data.pop('catalog_ad', None)
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "priority_finish":
        links = context.user_data.get('catalog_priority', {}).get('links', [])
        if links:
            count = await catalog_service.set_priority_posts(links)
            await query.edit_message_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        else:
            await query.edit_message_text("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        context.user_data.pop('catalog_priority', None)
    
    # ============= –ù–û–í–´–ï CALLBACKS v2.0 =============
    
    elif action == "favorite":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            success = await catalog_service.toggle_favorite(user_id, post_id)
            await query.answer(
                "‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!" if success else "‚ùå –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                show_alert=True
            )
    
    elif action == "unsub":
        category = ":".join(data[2:])
        success = await catalog_service.unsubscribe_from_category(user_id, category)
        await query.answer("‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å" if success else "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        await mysubscriptions_command(update, context)
    
    elif action == "unsub_all":
        count = await catalog_service.unsubscribe_from_all(user_id)
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ({count})\n\n/mysubscriptions"
        )
    
    elif action == "remove_confirm":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            success = await catalog_service.delete_post(post_id, user_id)
            await query.edit_message_text(
                f"üóëÔ∏è –ü–æ—Å—Ç #{post_id} —É–¥–∞–ª—ë–Ω" if success else "‚ùå –û—à–∏–±–∫–∞"
            )
    
    elif action == "remove_cancel":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "edit":
        field = data[2] if len(data) > 2 else None
        post_id = context.user_data.get('catalog_edit', {}).get('post_id')
        
        if not post_id:
            await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        context.user_data['catalog_edit']['field'] = field
        context.user_data['catalog_edit']['waiting'] = True
        
        prompts = {
            'category': "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            'name': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            'tags': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            'link': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:",
            'media': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞:"
        }
        
        await query.edit_message_text(prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
    
    elif action == "edit_cancel":
        context.user_data.pop('catalog_edit', None)
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "bulk_finish":
        links = context.user_data.get('catalog_bulk', {}).get('links', [])
        
        if not links:
            await query.edit_message_text("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return
        
        await query.edit_message_text(f"‚è≥ –ò–º–ø–æ—Ä—Ç {len(links)} –ø–æ—Å—Ç–æ–≤...")
        
        results = await catalog_service.bulk_import(links, user_id)
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=(
                f"‚úÖ **–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù**\n\n"
                f"–£—Å–ø–µ—à–Ω–æ: {results['success']}\n"
                f"–û—à–∏–±–∫–∏: {results['failed']}"
            ),
            parse_mode='Markdown'
        )
        
        context.user_data.pop('catalog_bulk', None)
    
    elif action == "foryou_refresh":
        await foryou_command(update, context)
    
    elif action == "favorites_sort":
        categories = await catalog_service.get_user_favorite_categories(user_id)
        keyboard = [
            [InlineKeyboardButton(cat, callback_data=f"catalog:fav_cat:{cat}")]
            for cat in categories
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog:favorites_back")])
        
        await query.edit_message_text(
            "üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "favorites_share":
        share_link = await catalog_service.generate_favorites_share_link(user_id)
        await query.edit_message_text(
            f"üì§ **–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º**\n\n{share_link}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!"
        )
    
    elif action == "favorites_clear":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="catalog:fav_clear_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:favorites_back")
            ]
        ]
        await query.edit_message_text(
            "‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "fav_clear_confirm":
        count = await catalog_service.clear_favorites(user_id)
        await query.edit_message_text(f"üóëÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ ({count})\n\n/favorites")
    
    elif action == "favorites_back":
        await favorites_command(update, context)
# ============= TEXT HANDLER =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # [–ü–†–ï–î–´–î–£–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô]
    # ... (–∫–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞) ...
    
    # ============= –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò v2.0 =============
    
    # –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
    if 'catalog_bulk' in context.user_data:
        if text.startswith('https://t.me/'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫
            links = [line.strip() for line in text.split('\n') if line.strip().startswith('https://t.me/')]
            
            context.user_data['catalog_bulk']['links'].extend(links)
            current_count = len(context.user_data['catalog_bulk']['links'])
            
            await update.message.reply_text(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}\n"
                f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {current_count}/50\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä'"
            )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    elif 'catalog_edit' in context.user_data and context.user_data['catalog_edit'].get('waiting'):
        post_id = context.user_data['catalog_edit'].get('post_id')
        field = context.user_data['catalog_edit'].get('field')
        
        if field == 'category':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            keyboard = [[InlineKeyboardButton(cat, callback_data=f"catalog:edit_save:category:{cat}")] for cat in CATALOG_CATEGORIES.keys()]
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif field == 'name':
            success = await catalog_service.update_post_field(post_id, 'name', text[:255])
            await update.message.reply_text(
                "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!" if success else "‚ùå –û—à–∏–±–∫–∞"
            )
            context.user_data.pop('catalog_edit', None)
        elif field == 'tags':
            tags = [t.strip() for t in text.split(',') if t.strip()][:10]
            success = await catalog_service.update_post_field(post_id, 'tags', tags)
            await update.message.reply_text(
                f"‚úÖ –¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({len(tags)})!" if success else "‚ùå –û—à–∏–±–∫–∞"
            )
            context.user_data.pop('catalog_edit', None)
        elif field == 'link':
            if text.startswith('https://t.me/'):
                success = await catalog_service.update_post_field(post_id, 'catalog_link', text)
                await update.message.reply_text(
                    "‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" if success else "‚ùå –û—à–∏–±–∫–∞"
                )
            else:
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
            context.user_data.pop('catalog_edit', None)


__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    'catalog_command',
    'search_command',
    'addtocatalog_command',
    'review_command',
    'catalogpriority_command',
    'addcatalogreklama_command',
    'catalogviews_command',
    'catalog_stats_users_command',
    'catalog_stats_categories_command',
    'catalog_stats_popular_command',
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã v2.0
    'mysubscriptions_command',
    'edit_catalog_command',
    'remove_catalog_command',
    'bulkimport_command',
    'catalog_stats_new_command',
    'catalog_stats_priority_command',
    'catalog_stats_reklama_command',
    'catalog_stats_topusers_command',
    'catalog_stats_export_command',
    'foryou_command',
    'favorites_command',
    # Handlers
    'handle_catalog_callback',
    'handle_catalog_text',
    'handle_catalog_media'
]
