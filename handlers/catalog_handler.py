from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from config import Config
from keyboards import (
    CATALOG_CALLBACKS,
    get_navigation_keyboard,
    get_catalog_card_keyboard,
    get_category_keyboard,
    get_rating_keyboard,
    get_cancel_search_keyboard,
    get_catalog_cancel_keyboard,
    get_cancel_review_keyboard,
    get_reviews_menu_keyboard
)
from services.cooldown import cooldown_service, CooldownType
from services.db import db
from models import CatalogPost, CatalogReview
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

CATALOG_CATEGORIES = ["üë±üèª‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∏", "ü§µüèº‚Äç‚ôÇÔ∏è –ü–∞—Ä–Ω–∏", "üë• –ü–∞—Ä—ã", "üé¨ –ö–æ–Ω—Ç–µ–Ω—Ç", "üé≠ –ü—Ä–æ—á–µ–µ"]
REVIEW_COOLDOWN_HOURS = 24

def check_user_reviewed_post(user_id: int, post_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤"""
    return False

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥"""
    user_id = update.effective_user.id
    
    async with db.session_maker() as session:
        try:
            from sqlalchemy import select
            
            stmt = select(CatalogPost).where(
                CatalogPost.status == 'approved'
            ).order_by(CatalogPost.created_at.desc()).limit(1)
            
            result = await session.execute(stmt)
            post = result.scalar_one_or_none()
            
            if not post:
                await update.message.reply_text(
                    "üìÇ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É: /addtocatalog"
                )
                return
            
            context.user_data['catalog_browse'] = {
                'current_post_id': post.id,
                'offset': 0
            }
            
            caption = (
                f"üìÇ {post.category}\n"
                f"üìù {post.name}\n"
                f"üè∑Ô∏è {', '.join(post.tags[:5]) if post.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
                f"‚≠ê #{post.catalog_number}\n"
                f"üí¨ –û—Ç–∑—ã–≤–æ–≤: {post.review_count or 0}"
            )
            
            if post.media_type == 'photo' and post.media_file_id:
                await update.message.reply_photo(
                    photo=post.media_file_id,
                    caption=caption,
                    reply_markup=get_catalog_card_keyboard(post.__dict__, post.catalog_number)
                )
            else:
                await update.message.reply_text(
                    caption,
                    reply_markup=get_catalog_card_keyboard(post.__dict__, post.catalog_number)
                )
            
        except Exception as e:
            logger.error(f"Catalog error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
    context.user_data['catalog_search'] = {'step': 'waiting'}
    await update.message.reply_text(
        "üîç –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏:",
        reply_markup=get_cancel_search_keyboard()
    )

async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥"""
    user_id = update.effective_user.id
    
    if user_id not in Config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    
    context.user_data['catalog_add'] = {'step': 'category'}
    await update.message.reply_text(
        "üìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥\n\n–®–∞–≥ 1/5\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_keyboard(CATALOG_CATEGORIES)
    )

async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
    args = context.args
    if not args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /review [–Ω–æ–º–µ—Ä]\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /review 123"
        )
        return
    
    try:
        catalog_number = int(args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        return
    
    user_id = update.effective_user.id
    
    async with db.session_maker() as session:
        try:
            from sqlalchemy import select
            
            stmt = select(CatalogPost).where(
                CatalogPost.catalog_number == catalog_number,
                CatalogPost.status == 'approved'
            )
            
            result = await session.execute(stmt)
            post = result.scalar_one_or_none()
            
            if not post:
                await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            if check_user_reviewed_post(user_id, post.id):
                await update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É")
                return
            
            can_use, remaining = await cooldown_service.check_cooldown(
                user_id=user_id,
                command='review',
                duration=REVIEW_COOLDOWN_HOURS * 3600,
                cooldown_type=CooldownType.NORMAL
            )
            
            if not can_use:
                hours = remaining // 3600
                minutes = (remaining % 3600) // 60
                await update.message.reply_text(
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑: {hours}—á {minutes}–º"
                )
                return
            
            context.user_data['catalog_review'] = {
                'post_id': post.id,
                'catalog_number': catalog_number,
                'step': 'rating'
            }
            
            await update.message.reply_text(
                f"‚≠ê –û—Ü–µ–Ω–∫–∞ #{catalog_number}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:",
                reply_markup=get_rating_keyboard(post.id, catalog_number)
            )
            
        except Exception as e:
            logger.error(f"Review error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")

async def categoryfollow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await update.message.reply_text(
        "üìã –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    )

async def addgirltocat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤—É—à–∫–∏"""
    if update.effective_user.id not in Config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    
    context.user_data['catalog_add'] = {
        'step': 'catalog_link',
        'category': 'üë±üèª‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∏'
    }
    await update.message.reply_text(
        "üìÇ –î–µ–≤—É—à–∫–∏\n\n–®–∞–≥ 2/5\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:",
        reply_markup=get_catalog_cancel_keyboard()
    )

async def addboytocat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–Ω—è"""
    if update.effective_user.id not in Config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    
    context.user_data['catalog_add'] = {
        'step': 'catalog_link',
        'category': 'ü§µüèº‚Äç‚ôÇÔ∏è –ü–∞—Ä–Ω–∏'
    }
    await update.message.reply_text(
        "üìÇ –ü–∞—Ä–Ω–∏\n\n–®–∞–≥ 2/5\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:",
        reply_markup=get_catalog_cancel_keyboard()
    )

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö catalog callback"""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id
    
    async def safe_edit(text, keyboard=None):
        try:
            if keyboard:
                await query.edit_message_caption(caption=text, reply_markup=keyboard)
            else:
                await query.edit_message_caption(caption=text)
        except BadRequest:
            try:
                if keyboard:
                    await query.edit_message_text(text=text, reply_markup=keyboard)
                else:
                    await query.edit_message_text(text=text)
            except:
                pass
    
    if data == CATALOG_CALLBACKS['cancel']:
        context.user_data.pop('catalog_add', None)
        context.user_data.pop('catalog_search', None)
        await safe_edit("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    if data == CATALOG_CALLBACKS['cancel_search']:
        context.user_data.pop('catalog_search', None)
        await safe_edit("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω")
        return
    
    if data == CATALOG_CALLBACKS['cancel_review']:
        context.user_data.pop('catalog_review', None)
        await safe_edit("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω")
        return
    
    if data == CATALOG_CALLBACKS['close_menu']:
        await query.message.delete()
        return
    
    if data.startswith(CATALOG_CALLBACKS['add_cat']):
        parts = data.split(':', 1)
        if len(parts) == 2:
            category = parts[1]
            context.user_data['catalog_add'] = {
                'step': 'catalog_link',
                'category': category
            }
            await safe_edit(
                f"üìÇ {category}\n\n–®–∞–≥ 2/5\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:",
                get_catalog_cancel_keyboard()
            )
        return
    
    if data.startswith(CATALOG_CALLBACKS['rate']):
        parts = data.split(':')
        
        if len(parts) == 3:
            post_id = int(parts[1])
            catalog_number = int(parts[2])
            
            if check_user_reviewed_post(user_id, post_id):
                await query.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É", show_alert=True)
                return
            
            can_use, remaining = await cooldown_service.check_cooldown(
                user_id=user_id,
                command='review',
                duration=REVIEW_COOLDOWN_HOURS * 3600,
                cooldown_type=CooldownType.NORMAL
            )
            
            if not can_use:
                hours = remaining // 3600
                minutes = (remaining % 3600) // 60
                await query.answer(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑: {hours}—á {minutes}–º", show_alert=True)
                return
            
            context.user_data['catalog_review'] = {
                'post_id': post_id,
                'catalog_number': catalog_number,
                'step': 'rating'
            }
            
            await safe_edit(
                f"‚≠ê –û—Ü–µ–Ω–∫–∞ #{catalog_number}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:",
                get_rating_keyboard(post_id, catalog_number)
            )
        
        elif len(parts) == 4:
            rating = int(parts[1])
            post_id = int(parts[2])
            catalog_number = int(parts[3])
            
            review_data = context.user_data.get('catalog_review', {})
            if review_data.get('post_id') != post_id:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return
            
            review_data['rating'] = rating
            review_data['step'] = 'text'
            
            await safe_edit(
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:",
                get_cancel_review_keyboard()
            )
        return
    
    if data.startswith(CATALOG_CALLBACKS['next']):
        browse_data = context.user_data.get('catalog_browse', {})
        
        async with db.session_maker() as session:
            try:
                from sqlalchemy import select
                
                offset = browse_data.get('offset', 0) + 1
                
                stmt = select(CatalogPost).where(
                    CatalogPost.status == 'approved'
                ).order_by(CatalogPost.created_at.desc()).offset(offset).limit(1)
                
                result = await session.execute(stmt)
                post = result.scalar_one_or_none()
                
                if not post:
                    await query.answer("üìÇ –ë–æ–ª—å—à–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç", show_alert=True)
                    return
                
                browse_data['current_post_id'] = post.id
                browse_data['offset'] = offset
                
                caption = (
                    f"üìÇ {post.category}\n"
                    f"üìù {post.name}\n"
                    f"üè∑Ô∏è {', '.join(post.tags[:5]) if post.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
                    f"‚≠ê #{post.catalog_number}\n"
                    f"üí¨ –û—Ç–∑—ã–≤–æ–≤: {post.review_count or 0}"
                )
                
                if post.media_type == 'photo' and post.media_file_id:
                    await query.message.delete()
                    await context.bot.send_photo(
                        chat_id=query.message.chat.id,
                        photo=post.media_file_id,
                        caption=caption,
                        reply_markup=get_catalog_card_keyboard(post.__dict__, post.catalog_number)
                    )
                else:
                    await safe_edit(
                        caption,
                        get_catalog_card_keyboard(post.__dict__, post.catalog_number)
                    )
                
            except Exception as e:
                logger.error(f"Next catalog error: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
        return

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if 'catalog_add' in context.user_data:
        data = context.user_data['catalog_add']
        step = data.get('step')
        
        if step == 'catalog_link':
            data['catalog_link'] = text
            data['step'] = 'name'
            await update.message.reply_text(
                "üìù –®–∞–≥ 3/5\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                reply_markup=get_catalog_cancel_keyboard()
            )
        elif step == 'name':
            data['name'] = text[:100]
            data['step'] = 'media'
            await update.message.reply_text(
                "üì∏ –®–∞–≥ 4/5\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n(–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
                reply_markup=get_catalog_cancel_keyboard()
            )
        elif text == '/skip' and step == 'media':
            data['step'] = 'tags'
            await update.message.reply_text(
                "#Ô∏è‚É£ –®–∞–≥ 5/5\n\n–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                reply_markup=get_catalog_cancel_keyboard()
            )
        elif step == 'tags':
            tags = [t.strip() for t in text.split(',') if t.strip()][:10]
            data['tags'] = tags
            
            async with db.session_maker() as session:
                try:
                    from sqlalchemy import select, func
                    
                    stmt = select(func.coalesce(func.max(CatalogPost.catalog_number), 0))
                    result = await session.execute(stmt)
                    max_number = result.scalar()
                    new_number = max_number + 1
                    
                    new_post = CatalogPost(
                        user_id=user_id,
                        catalog_link=data['catalog_link'],
                        category=data['category'],
                        name=data['name'],
                        tags=tags,
                        media_type=data.get('media_type'),
                        media_file_id=data.get('media_file_id'),
                        status='approved',
                        catalog_number=new_number,
                        created_at=datetime.utcnow(),
                        review_count=0
                    )
                    
                    session.add(new_post)
                    await session.commit()
                    
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ—Å—Ç #{new_number} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"üìÇ {data['category']}\n"
                        f"üìù {data['name']}\n"
                        f"üè∑Ô∏è {len(tags)} —Ç–µ–≥–æ–≤"
                    )
                    context.user_data.pop('catalog_add', None)
                    
                except Exception as e:
                    logger.error(f"Add post error: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
        return
    
    if 'catalog_search' in context.user_data:
        search_data = context.user_data['catalog_search']
        if search_data.get('step') == 'waiting':
            query_text = text.strip()
            
            async with db.session_maker() as session:
                try:
                    from sqlalchemy import select, or_
                    
                    try:
                        catalog_number = int(query_text)
                        stmt = select(CatalogPost).where(
                            CatalogPost.catalog_number == catalog_number,
                            CatalogPost.status == 'approved'
                        )
                    except ValueError:
                        stmt = select(CatalogPost).where(
                            CatalogPost.status == 'approved',
                            or_(
                                CatalogPost.name.ilike(f'%{query_text}%'),
                                CatalogPost.tags.contains([query_text])
                            )
                        ).limit(1)
                    
                    result = await session.execute(stmt)
                    post = result.scalar_one_or_none()
                    
                    if not post:
                        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        context.user_data.pop('catalog_search', None)
                        return
                    
                    caption = (
                        f"üìÇ {post.category}\n"
                        f"üìù {post.name}\n"
                        f"üè∑Ô∏è {', '.join(post.tags[:5]) if post.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
                        f"‚≠ê #{post.catalog_number}\n"
                        f"üí¨ –û—Ç–∑—ã–≤–æ–≤: {post.review_count or 0}"
                    )
                    
                    if post.media_type == 'photo' and post.media_file_id:
                        await update.message.reply_photo(
                            photo=post.media_file_id,
                            caption=caption,
                            reply_markup=get_catalog_card_keyboard(post.__dict__, post.catalog_number)
                        )
                    else:
                        await update.message.reply_text(
                            caption,
                            reply_markup=get_catalog_card_keyboard(post.__dict__, post.catalog_number)
                        )
                    
                    context.user_data.pop('catalog_search', None)
                    
                except Exception as e:
                    logger.error(f"Search error: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        return
    
    if 'catalog_review' in context.user_data:
        review_data = context.user_data['catalog_review']
        if review_data.get('step') == 'text':
            review_text = text[:500]
            post_id = review_data['post_id']
            rating = review_data['rating']
            
            async with db.session_maker() as session:
                try:
                    new_review = CatalogReview(
                        post_id=post_id,
                        user_id=user_id,
                        rating=rating,
                        text=review_text,
                        created_at=datetime.utcnow()
                    )
                    
                    session.add(new_review)
                    
                    post = await session.get(CatalogPost, post_id)
                    if post:
                        post.review_count = (post.review_count or 0) + 1
                    
                    await session.commit()
                    
                    await update.message.reply_text(
                        f"‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5\n"
                        f"üí¨ {review_text[:100]}"
                    )
                    context.user_data.pop('catalog_review', None)
                    
                except Exception as e:
                    logger.error(f"Review save error: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
        return

async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    
    if user_id not in Config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üóëÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove [–Ω–æ–º–µ—Ä]\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /remove 123"
        )
        return
    
    try:
        catalog_number = int(args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        return
    
    async with db.session_maker() as session:
        try:
            from sqlalchemy import select
            
            stmt = select(CatalogPost).where(
                CatalogPost.catalog_number == catalog_number
            )
            
            result = await session.execute(stmt)
            post = result.scalar_one_or_none()
            
            if not post:
                await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            post_name = post.name
            post_category = post.category
            
            await session.delete(post)
            await session.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ #{catalog_number} —É–¥–∞–ª–µ–Ω–∞\n\n"
                f"üìÇ {post_category}\n"
                f"üìù {post_name}"
            )
            
        except Exception as e:
            logger.error(f"Remove error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

async def handle_catalog_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    if 'catalog_add' in context.user_data:
        data = context.user_data['catalog_add']
        if data.get('step') == 'media':
            if update.message.photo:
                data['media_type'] = 'photo'
                data['media_file_id'] = update.message.photo[-1].file_id
            elif update.message.video:
                data['media_type'] = 'video'
                data['media_file_id'] = update.message.video.file_id
            else:
                await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
                return
            
            data['step'] = 'tags'
            await update.message.reply_text(
                "#Ô∏è‚É£ –®–∞–≥ 5/5\n\n–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                reply_markup=get_catalog_cancel_keyboard()
            )

__all__ = [
    'CATALOG_CALLBACKS',
    'catalog_command',
    'search_command',
    'addtocatalog_command',
    'remove_command',
    'review_command',
    'categoryfollow_command',
    'addgirltocat_command',
    'addboytocat_command',
    'handle_catalog_callback',
    'handle_catalog_text',
    'handle_catalog_media',
]
