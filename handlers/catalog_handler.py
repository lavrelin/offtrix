# -*- coding: utf-8 -*-
"""
Handler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 3.2

–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
- ‚úÖ –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã /addgirltocat –∏ /addboytocat
- ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–µ–¥–∏–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
- ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Å–ª–æ–≤–∞–º –∏ —Ç–µ–≥–∞–º
- ‚úÖ –°–º–µ—à–∞–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø–æ—Å—Ç–æ–≤ (4 –æ–±—ã—á–Ω—ã—Ö + 1 Top)
- ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –ø—Ä–∏ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö

–í–µ—Ä—Å–∏—è: 3.2.0
–î–∞—Ç–∞: 24.10.2025
"""
import logging
import re
from typing import Optional, Dict, List
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES

logger = logging.getLogger(__name__)


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def extract_media_from_link(bot: Bot, telegram_link: str) -> Optional[Dict]:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Å—Ç–∞—Ç—É—Å–µ"""
    try:
        if not telegram_link or 't.me/' not in telegram_link:
            return {
                'success': False,
                'message': '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞'
            }
        
        match = re.search(r't\.me/([^/]+)/(\d+)', telegram_link)
        if not match:
            return {
                'success': False,
                'message': '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏'
            }
        
        channel_username = match.group(1)
        message_id = int(match.group(2))
        
        if channel_username.startswith('@'):
            channel_username = channel_username[1:]
        
        chat_id = f"@{channel_username}" if not channel_username.startswith('-100') else int(channel_username)
        
        try:
            message = await bot.forward_message(
                chat_id=bot.id,
                from_chat_id=chat_id,
                message_id=message_id
            )
            
            result = None
            if message.photo:
                result = {
                    'success': True,
                    'type': 'photo',
                    'file_id': message.photo[-1].file_id,
                    'media_group_id': message.media_group_id,
                    'media_json': [message.photo[-1].file_id],
                    'message': '‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ'
                }
            elif message.video:
                result = {
                    'success': True,
                    'type': 'video',
                    'file_id': message.video.file_id,
                    'media_group_id': message.media_group_id,
                    'media_json': [message.video.file_id],
                    'message': '‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ'
                }
            elif message.document:
                result = {
                    'success': True,
                    'type': 'document',
                    'file_id': message.document.file_id,
                    'media_group_id': message.media_group_id,
                    'media_json': [message.document.file_id],
                    'message': '‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω'
                }
            elif message.animation:
                result = {
                    'success': True,
                    'type': 'animation',
                    'file_id': message.animation.file_id,
                    'media_group_id': message.media_group_id,
                    'media_json': [message.animation.file_id],
                    'message': '‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞'
                }
            else:
                result = {
                    'success': False,
                    'message': '‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é'
                }
            
            try:
                await bot.delete_message(chat_id=bot.id, message_id=message.message_id)
            except:
                pass
            
            if result:
                logger.info(f"‚úÖ Media extracted: {result.get('type', 'none')}, success: {result.get('success')}")
            return result
            
        except TelegramError as e:
            logger.error(f"Cannot access message: {e}")
            return {
                'success': False,
                'message': f'‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç—É. –î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –≤—Ä—É—á–Ω—É—é'
            }
            
    except Exception as e:
        logger.error(f"Error extracting media: {e}")
        return {
            'success': False,
            'message': f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –≤—Ä—É—á–Ω—É—é'
        }


async def send_catalog_post_with_media(bot: Bot, chat_id: int, post: Dict, index: int, total: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –° –ù–û–í–´–ú –§–û–†–ú–ê–¢–û–ú"""
    try:
        # ============= –ù–û–í–´–ô –§–û–†–ú–ê–¢ –ö–ê–†–¢–û–ß–ö–ò =============
        catalog_number = post.get('catalog_number', '????')
        card_text = f"#Ô∏è‚É£ **–ü–æ—Å—Ç {catalog_number}**\n\n"
        card_text += f"üìÇ {post.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        card_text += f"‚ÑπÔ∏è {post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        
        # –¢–µ–≥–∏
        tags = post.get('tags', [])
        if tags and isinstance(tags, list):
            tags_formatted = []
            for tag in tags[:5]:
                if tag:
                    clean_tag = re.sub(r'[^\w\-]', '', str(tag).replace(' ', '_'))
                    if clean_tag:
                        tags_formatted.append(f"#{clean_tag}")
            
            if tags_formatted:
                card_text += f"{' '.join(tags_formatted)}\n"
        
        # –†–µ–π—Ç–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 10+ –æ—Ç–∑—ã–≤–æ–≤)
        review_count = post.get('review_count', 0)
        if review_count >= 10:
            rating = post.get('rating', 0)
            stars = "‚≠ê" * int(rating)
            card_text += f"**Rating**: {stars} {rating:.1f} ({review_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
        else:
            card_text += f"**Rating**: -\n"
        
        # –ù–û–í–´–ï –ö–ù–û–ü–ö–ò
        keyboard = [
            [
                InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏", url=post.get('catalog_link', '#'), callback_data=f"catalog:click:{post.get('id')}"),
                InlineKeyboardButton("üßë‚Äçüßí‚Äçüßí –û—Ç–∑—ã–≤—ã", callback_data=f"catalog:reviews_menu:{post.get('id')}")
            ],
            [
                InlineKeyboardButton("üÜï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"catalog:subscribe_menu:{post.get('category')}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        media_type = post.get('media_type')
        media_file_id = post.get('media_file_id')
        sent = False
        
        if media_file_id and media_type:
            try:
                if media_type == 'photo':
                    await bot.send_photo(chat_id=chat_id, photo=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'video':
                    await bot.send_video(chat_id=chat_id, video=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'document':
                    await bot.send_document(chat_id=chat_id, document=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'animation':
                    await bot.send_animation(chat_id=chat_id, animation=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                sent = True
            except TelegramError:
                sent = False
        
        if not sent:
            await bot.send_message(chat_id=chat_id, text=card_text, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        await catalog_service.increment_views(post.get('id'), chat_id)
        
        return True
    except Exception as e:
        logger.error(f"Error sending catalog post: {e}")
        return False


async def handle_catalog_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    if 'catalog_add' not in context.user_data or context.user_data['catalog_add'].get('step') != 'media':
        return False
    
    data = context.user_data['catalog_add']
    media_type = media_file_id = None
    
    if update.message.photo:
        media_type, media_file_id = 'photo', update.message.photo[-1].file_id
    elif update.message.video:
        media_type, media_file_id = 'video', update.message.video.file_id
    elif update.message.document:
        media_type, media_file_id = 'document', update.message.document.file_id
    elif update.message.animation:
        media_type, media_file_id = 'animation', update.message.animation.file_id
    
    if media_type and media_file_id:
        data.update({
            'media_type': media_type,
            'media_file_id': media_file_id,
            'media_group_id': update.message.media_group_id,
            'media_json': [media_file_id],
            'step': 'tags'
        })
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞: {media_type}\n\n"
            "#Ô∏è‚É£ –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):\n"
            "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä, –≥–µ–ª—å-–ª–∞–∫"
        )
        return True
    return False


async def notify_subscribers_about_new_post(bot: Bot, post_id: int, category: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        subscribers = await catalog_service.get_category_subscribers(category)
        
        if not subscribers:
            logger.info(f"No subscribers for category {category}")
            return
        
        post = await catalog_service.get_post_by_id(post_id)
        
        if not post:
            logger.error(f"Post {post_id} not found for notification")
            return
        
        catalog_number = post.get('catalog_number', '????')
        
        text = (
            f"üÜï **–ù–û–í–´–ô –ü–û–°–¢ –í –ö–ê–¢–ï–ì–û–†–ò–ò**\n\n"
            f"#Ô∏è‚É£ –ü–æ—Å—Ç {catalog_number}\n"
            f"üìÇ {category}\n"
            f"üìù {post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
            f"üîó –ü–µ—Ä–µ–π—Ç–∏: {post.get('catalog_link')}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        
        keyboard = [
            [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=post.get('catalog_link'))],
            [InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"catalog:unfollow:{category}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        success_count = 0
        for user_id in subscribers:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                success_count += 1
            except Exception as e:
                logger.error(f"Failed to notify user {user_id}: {e}")
        
        logger.info(f"Notified {success_count}/{len(subscribers)} subscribers about post {post_id} in {category}")
        
    except Exception as e:
        logger.error(f"Error notifying subscribers: {e}")


# ============= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ - /catalog (—Å–º–µ—à–∞–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ 4+1)"""
    user_id = update.effective_user.id
    count = 5
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–º–µ—à–∞–Ω–Ω—É—é –≤—ã–¥–∞—á—É
    posts = await catalog_service.get_random_posts_mixed(user_id, count=count)
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        await update.message.reply_text(
            "üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç\n\n"
            "–ù–∞–∂–º–∏—Ç–µ üîÑ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    for i, post in enumerate(posts, 1):
        await send_catalog_post_with_media(context.bot, update.effective_chat.id, post, i, len(posts))
    
    keyboard = [
        [
            InlineKeyboardButton(f"üîÄ –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"),
            InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
        ],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="catalog:search")]
    ]
    await update.message.reply_text(
        f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(posts)}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Å–ª–æ–≤–∞–º –∏ —Ç–µ–≥–∞–º - /search"""
    context.user_data['catalog_search'] = {'step': 'query'}
    
    keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_search")]]
    
    await update.message.reply_text(
        "üîç **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ –ü–æ —Ç–µ–≥–∞–º\n\n"
        "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä –≥–µ–ª—å-–ª–∞–∫",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∑—ã–≤ - /review [id]"""
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/review 1234`",
            parse_mode='Markdown'
        )
        return
    
    # –ò—â–µ–º –ø–æ catalog_number
    catalog_number = int(context.args[0])
    post = await catalog_service.get_post_by_number(catalog_number)
    
    if not post:
        await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{catalog_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–≤–µ–∑–¥
    context.user_data['catalog_review'] = {
        'post_id': post['id'],
        'catalog_number': catalog_number,
        'step': 'rating'
    }
    
    keyboard = [
        [
            InlineKeyboardButton("‚≠ê", callback_data="catalog:rate:1"),
            InlineKeyboardButton("‚≠ê‚≠ê", callback_data="catalog:rate:2"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="catalog:rate:3")
        ],
        [
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="catalog:rate:4"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="catalog:rate:5")
        ],
        [InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]
    ]
    
    await update.message.reply_text(
        f"üåü **–û–¶–ï–ù–ö–ê –ü–û–°–¢–ê #{catalog_number}**\n\n"
        f"üìù {post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def categoryfollow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ - /categoryfollow"""
    user_id = update.effective_user.id
    
    try:
        subscriptions = await catalog_service.get_user_subscriptions(user_id)
        
        text = "üîî **–ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–¢–ï–ì–û–†–ò–ò**\n\n"
        
        if subscriptions:
            text += "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            for sub in subscriptions:
                text += f"‚úÖ {sub.get('category')}\n"
            text += "\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="catalog:follow_menu")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="catalog:my_follows")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in categoryfollow: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫")


async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ - /addtocatalog"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_add'] = {'step': 'link'}
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
    await update.message.reply_text(
        "üÜï **–î–û–ë–ê–í–õ–ï–ù–ò–ï**\n\n–®–∞–≥ 1/5\n\n"
        "‚õìÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/channel/123",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addgirltocat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é TopGirls - /addgirltocat"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_add_top'] = {
        'step': 'link',
        'category': 'üë±üèª‚Äç‚ôÄÔ∏è TopGirls'
    }
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_top")]]
    await update.message.reply_text(
        "üíÉ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í TOPGIRLS**\n\n"
        "–®–∞–≥ 1/3\n\n"
        "‚õìÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç:\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/channel/123",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addboytocat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é TopBoys - /addboytocat"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_add_top'] = {
        'step': 'link',
        'category': 'ü§µüèº‚Äç‚ôÇÔ∏è TopBoys'
    }
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_top")]]
    await update.message.reply_text(
        "ü§µ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í TOPBOYS**\n\n"
        "–®–∞–≥ 1/3\n\n"
        "‚õìÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç:\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/channel/123",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def edit_catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - /catalogedit [id]"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/catalogedit [–Ω–æ–º–µ—Ä]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/catalogedit 1234`",
            parse_mode='Markdown'
        )
        return
    
    catalog_number = int(context.args[0])
    post = await catalog_service.get_post_by_number(catalog_number)
    
    if not post:
        await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{catalog_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    context.user_data['catalog_edit'] = {'post_id': post['id'], 'post_data': post, 'catalog_number': catalog_number}
    
    text = (
        f"üõ†Ô∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{catalog_number}**\n\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post.get('category')}\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {post.get('name')}\n"
        f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(post.get('tags', []))}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {post.get('catalog_link')}\n\n"
        "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="catalog:edit:category")],
        [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="catalog:edit:name")],
        [InlineKeyboardButton("üè∑Ô∏è –¢–µ–≥–∏", callback_data="catalog:edit:tags")],
        [InlineKeyboardButton("üîó –°—Å—ã–ª–∫—É", callback_data="catalog:edit:link")],
        [InlineKeyboardButton("üì∏ –ú–µ–¥–∏–∞", callback_data="catalog:edit:media")],
        [InlineKeyboardButton("#Ô∏è‚É£ –ù–æ–º–µ—Ä", callback_data="catalog:edit:number")],
        [InlineKeyboardButton("‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data="catalog:edit:priority")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="catalog:edit_cancel")]
    ]
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def change_catalog_number_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ - /changenumber [—Å—Ç–∞—Ä—ã–π] [–Ω–æ–≤—ã–π]"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/changenumber [—Å—Ç–∞—Ä—ã–π] [–Ω–æ–≤—ã–π]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/changenumber 1234 5678`",
            parse_mode='Markdown'
        )
        return
    
    try:
        old_number = int(context.args[0])
        new_number = int(context.args[1])
        
        if new_number < 1 or new_number > 9999:
            await update.message.reply_text("‚ùå –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 9999")
            return
        
        success = await catalog_service.change_catalog_number(old_number, new_number)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ù–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω!\n\n"
                f"#{old_number} ‚Üí #{new_number}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞!\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ü–æ—Å—Ç #{old_number} –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                f"‚Ä¢ –ù–æ–º–µ—Ä #{new_number} —É–∂–µ –∑–∞–Ω—è—Ç"
            )
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")


async def remove_catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - /remove [id]"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove [–Ω–æ–º–µ—Ä]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/remove 1234`",
            parse_mode='Markdown'
        )
        return
    
    catalog_number = int(context.args[0])
    post = await catalog_service.get_post_by_number(catalog_number)
    
    if not post:
        await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{catalog_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = (
        f"‚ö†Ô∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ #{catalog_number}**\n\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {post.get('name')}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post.get('category')}\n"
        f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {post.get('views', 0)}\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"catalog:remove_confirm:{post['id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="catalog:remove_cancel")
        ]
    ]
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def catalogpriority_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã - /catalogpriority"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_priority'] = {'links': [], 'step': 'collecting'}
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:priority_finish")]]
    await update.message.reply_text(
        "‚≠ê **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï**\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ (–¥–æ 10)",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addcatalogreklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É - /addcatalogreklama"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    context.user_data['catalog_ad'] = {'step': 'link'}
    keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_ad")]]
    await update.message.reply_text(
        "üì¢ **–†–ï–ö–õ–ê–ú–ê**\n\n–®–∞–≥ 1/2\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def catalogview_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalogview"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        unique_viewers = await catalog_service.get_unique_viewers()
        unique_clickers = await catalog_service.get_unique_clickers()
        top_posts = await catalog_service.get_top_posts_with_clicks(limit=20)
        
        text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–°–ú–û–¢–†–û–í**\n\n"
        text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: {unique_viewers}\n"
        text += f"üñ± –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏: {unique_clickers}\n\n"
        text += "üìà **–¢–û–ü-20 –ü–û–°–¢–û–í:**\n\n"
        
        for idx, (post_id, views, clicks, name, catalog_number) in enumerate(top_posts, 1):
            emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
            ctr = (clicks / views * 100) if views > 0 else 0
            text += f"{emoji} #{catalog_number} - {name[:25]}...\n"
            text += f"   üëÅ {views} | üñ± {clicks} | CTR: {ctr:.1f}%\n\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in catalogview: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalogviews_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - /catalogviews"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_views_stats(limit=20)
        if not stats:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        
        text = "üìä **–¢–û–ü-20 –ü–û –ü–†–û–°–ú–û–¢–†–ê–ú**\n\n"
        for idx, (post_id, views, name, catalog_number) in enumerate(stats, 1):
            emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else "‚ñ™Ô∏è"
            text += f"{emoji} #{catalog_number}: {views} üëÅ - {name[:30]}...\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalog_stats_users"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_catalog_stats()
        text = (
            f"üë• **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
            f"üìä –ü–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}\n"
            f"üì∏ –° –º–µ–¥–∏–∞: {stats.get('posts_with_media', 0)} ({stats.get('media_percentage', 0)}%)\n"
            f"üìÑ –ë–µ–∑ –º–µ–¥–∏–∞: {stats.get('posts_without_media', 0)}\n\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('total_views', 0)}\n"
            f"üîó –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats.get('total_clicks', 0)}\n"
            f"üìà CTR: {stats.get('ctr', 0)}%\n\n"
            f"üî• –°–µ—Å—Å–∏–π: {stats.get('active_sessions', 0)}\n"
            f"üí¨ –û—Ç–∑—ã–≤–æ–≤: {stats.get('total_reviews', 0)}"
        )
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - /catalog_stats_categories"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_category_stats()
        if not stats:
            await update.message.reply_text("üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        
        text = "üìÅ **–ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú**\n\n"
        for category, count in stats.items():
            text += f"‚ñ™Ô∏è {category}: {count}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–û–ü-10 - /catalog_stats_popular"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        stats = await catalog_service.get_views_stats(limit=10)
        if not stats:
            await update.message.reply_text("üèÜ –¢–û–ü –ø—É—Å—Ç")
            return
        
        text = "üèÜ **–¢–û–ü-10**\n\n"
        for idx, (post_id, views, name, catalog_number) in enumerate(stats, 1):
            emoji = ["ü•á", "ü•à", "ü•â"][idx-1] if idx <= 3 else f"{idx}."
            text += f"{emoji} #{catalog_number} {name[:30]}... - {views} üëÅ\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_priority_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ - /catalog_stats_priority"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        priority_stats = await catalog_service.get_priority_stats()
        
        if not priority_stats.get('posts'):
            await update.message.reply_text("‚≠ê –ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        
        posts = priority_stats.get('posts', [])
        avg_ctr = priority_stats.get('avg_ctr', 0)
        normal_ctr = priority_stats.get('normal_ctr', 0)
        improvement = priority_stats.get('improvement', 0)
        
        text = f"‚≠ê **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–°–¢–´** ({len(posts)}/10)\n\n"
        
        for idx, post in enumerate(posts, 1):
            emoji = ["ü•á", "ü•à", "ü•â"][idx-1] if idx <= 3 else f"{idx}Ô∏è‚É£"
            ctr = (post['clicks'] / post['views'] * 100) if post['views'] > 0 else 0
            catalog_number = post.get('catalog_number', '????')
            
            text += (
                f"{emoji} #{catalog_number} | {post['name'][:20]}...\n"
                f"   üëÅ {post['views']} | üñ± {post['clicks']} ({ctr:.1f}%)\n\n"
            )
        
        text += (
            f"üìà **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:**\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ CTR: {avg_ctr:.1f}%\n"
            f"‚Ä¢ –û–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã CTR: {normal_ctr:.1f}%\n"
            f"‚Ä¢ –ü—Ä–∏—Ä–æ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: +{improvement:.1f}%\n\n"
        )
        
        if len(posts) < 10:
            text += f"üí° –°–ª–æ—Ç—ã {len(posts)+1}-10 —Å–≤–æ–±–æ–¥–Ω—ã"
        
        keyboard = [[InlineKeyboardButton("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏", callback_data="catalog:manage_priority")]]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in catalog_stats_priority: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_reklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã - /catalog_stats_reklama"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        ad_stats = await catalog_service.get_ad_stats()
        
        if not ad_stats.get('ads'):
            await update.message.reply_text("üíé –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
            return
        
        ads = ad_stats.get('ads', [])
        total_views = ad_stats.get('total_views', 0)
        total_clicks = ad_stats.get('total_clicks', 0)
        avg_ctr = ad_stats.get('avg_ctr', 0)
        
        text = f"üíé **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ö–õ–ê–ú–´**\n\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(ads)}):\n\n"
        
        for idx, ad in enumerate(ads, 1):
            ctr = (ad['clicks'] / ad['views'] * 100) if ad['views'] > 0 else 0
            catalog_number = ad.get('catalog_number', '????')
            
            text += (
                f"{idx}Ô∏è‚É£ #{catalog_number} {ad['name'][:25]}...\n"
                f"   üëÅ {ad['views']} | üñ± {ad['clicks']}\n"
                f"   üìà CTR: {ctr:.1f}%\n\n"
            )
        
        text += (
            f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤: {total_views:,}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {total_clicks:,}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π CTR: {avg_ctr:.1f}%\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π", callback_data="catalog:manage_ads")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="catalog:detailed_ads")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in catalog_stats_reklama: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


# ============= CALLBACKS =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback"""
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    user_id = update.effective_user.id
    
    # ============= –ë–ê–ó–û–í–´–ï CALLBACKS =============
    
    if action == "next":
        posts = await catalog_service.get_random_posts_mixed(user_id, count=5)
        if not posts:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
            ]
            await query.edit_message_text(
                "üìÇ –í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n–ù–∞–∂–º–∏—Ç–µ üîÑ –¥–ª—è —Å–±—Ä–æ—Å–∞",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            for i, post in enumerate(posts, 1):
                await send_catalog_post_with_media(context.bot, query.message.chat_id, post, i, len(posts))
            await query.message.delete()
    
    elif action == "finish":
        await query.edit_message_text(
            "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            "/catalog - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "/search - –ø–æ–∏—Å–∫\n"
            "/categoryfollow - –ø–æ–¥–ø–∏—Å–∫–∏"
        )
    
    elif action == "restart":
        await catalog_service.reset_session(user_id)
        await query.edit_message_text("üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog")
    
    elif action == "search":
        context.user_data['catalog_search'] = {'step': 'query'}
        keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_search")]]
        await query.edit_message_text(
            "üîç **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –ü–æ —Ç–µ–≥–∞–º\n\n"
            "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä –≥–µ–ª—å-–ª–∞–∫",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "cancel_search":
        context.user_data.pop('catalog_search', None)
        await query.edit_message_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω")
    
    elif action == "cat":
        category = ":".join(data[2:])
        posts = await catalog_service.search_posts(category, limit=5)
        if posts:
            for i, post in enumerate(posts, 1):
                await send_catalog_post_with_media(context.bot, query.message.chat_id, post, i, len(posts))
            keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="catalog:finish")]]
            await query.edit_message_text(
                f"üìÇ –ù–∞–π–¥–µ–Ω–æ: {len(posts)}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
    
    elif action == "click":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            await catalog_service.increment_clicks(post_id, user_id)
    
    # ============= CALLBACK –î–õ–Ø –í–´–ë–û–†–ê –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò =============
    elif action == "add_cat":
        if 'catalog_add' not in context.user_data:
            await query.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
            return
        
        category = ":".join(data[2:])
        context.user_data['catalog_add']['category'] = category
        context.user_data['catalog_add']['step'] = 'name'
        
        await query.edit_message_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            f"üìù –®–∞–≥ 3/5\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
    
    # ============= –û–¢–ó–´–í–´ –° –í–´–ë–û–†–û–ú –ó–í–ï–ó–î =============
    elif action == "rate":
        if 'catalog_review' not in context.user_data:
            await query.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
            return
        
        rating = int(data[2]) if len(data) > 2 else 5
        context.user_data['catalog_review']['rating'] = rating
        context.user_data['catalog_review']['step'] = 'text'
        
        stars = "‚≠ê" * rating
        catalog_number = context.user_data['catalog_review'].get('catalog_number')
        
        keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
        
        await query.edit_message_text(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞: {stars}\n\n"
            f"üìù –ü–æ—Å—Ç #{catalog_number}\n\n"
            f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "cancel_review":
        context.user_data.pop('catalog_review', None)
        await query.edit_message_text("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω")
    
    elif action == "cancel":
        context.user_data.pop('catalog_add', None)
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "cancel_top":
        context.user_data.pop('catalog_add_top', None)
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Top –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "cancel_ad":
        context.user_data.pop('catalog_ad', None)
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "priority_finish":
        links = context.user_data.get('catalog_priority', {}).get('links', [])
        if links:
            count = await catalog_service.set_priority_posts(links)
            await query.edit_message_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        else:
            await query.edit_message_text("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        context.user_data.pop('catalog_priority', None)
    
    # ============= –ü–û–î–ü–ò–°–ö–ò =============
    
    elif action == "follow_menu":
        keyboard = []
        for main_cat in CATALOG_CATEGORIES.keys():
            keyboard.append([InlineKeyboardButton(
                main_cat, 
                callback_data=f"catalog:follow_cat:{main_cat}"
            )])
        keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="catalog:my_follows")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog:finish")])
        
        await query.edit_message_text(
            "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "follow_cat":
        category = ":".join(data[2:])
        success = await catalog_service.subscribe_to_category(user_id, category)
        
        if success:
            await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", show_alert=True)
            await query.edit_message_text(
                f"üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n**{category}**\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö!",
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
    
    elif action == "my_follows":
        subscriptions = await catalog_service.get_user_subscriptions(user_id)
        
        if not subscriptions:
            await query.edit_message_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
                "/categoryfollow - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
            )
            return
        
        text = f"üìã **–í–ê–®–ò –ü–û–î–ü–ò–°–ö–ò** ({len(subscriptions)})\n\n"
        keyboard = []
        
        for sub in subscriptions:
            category = sub.get('category')
            text += f"‚úÖ {category}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç '{category}'",
                    callback_data=f"catalog:unfollow:{category}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="catalog:unfollow_all")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog:follow_menu")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "unfollow":
        category = ":".join(data[2:])
        success = await catalog_service.unsubscribe_from_category(user_id, category)
        await query.answer("‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å" if success else "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
        subscriptions = await catalog_service.get_user_subscriptions(user_id)
        
        if not subscriptions:
            await query.edit_message_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
                "/categoryfollow - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
            )
            return
        
        text = f"üìã **–í–ê–®–ò –ü–û–î–ü–ò–°–ö–ò** ({len(subscriptions)})\n\n"
        keyboard = []
        
        for sub in subscriptions:
            cat = sub.get('category')
            text += f"‚úÖ {cat}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç '{cat}'",
                    callback_data=f"catalog:unfollow:{cat}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="catalog:unfollow_all")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog:follow_menu")])
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    elif action == "unfollow_all":
        count = await catalog_service.unsubscribe_from_all(user_id)
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ({count})\n\n"
            "/categoryfollow - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
        )
    
    elif action == "subscribe_menu":
        category = ":".join(data[2:])
        
        subscriptions = await catalog_service.get_user_subscriptions(user_id)
        is_subscribed = any(s.get('category') == category for s in subscriptions)
        
        keyboard = []
        
        if is_subscribed:
            keyboard.append([InlineKeyboardButton(
                f"üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç '{category}'",
                callback_data=f"catalog:unfollow:{category}"
            )])
        else:
            keyboard.append([InlineKeyboardButton(
                f"üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ '{category}'",
                callback_data=f"catalog:follow_cat:{category}"
            )])
        
        keyboard.append([InlineKeyboardButton("üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog:follow_menu")])
        keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="catalog:my_follows")])
        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="catalog:close_menu")])
        
        status = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã" if is_subscribed else "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã"
        
        await query.edit_message_text(
            f"üîî **–ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–¢–ï–ì–û–†–ò–Æ**\n\n"
            f"üìÇ {category}\n"
            f"{status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    # ============= –û–¢–ó–´–í–´ =============
    
    elif action == "reviews_menu":
        post_id = int(data[2]) if len(data) > 2 else None
        if not post_id:
            return
        
        reviews = await catalog_service.get_reviews(post_id, limit=100)
        count = len(reviews)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
        post = await catalog_service.get_post_by_id(post_id)
        catalog_number = post.get('catalog_number', '????') if post else '????'
        
        keyboard = [
            [InlineKeyboardButton(f"üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã ({count})", callback_data=f"catalog:view_reviews:{post_id}")],
            [InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"catalog:write_review:{post_id}:{catalog_number}")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="catalog:close_menu")]
        ]
        
        await query.edit_message_text(
            f"üßë‚Äçüßí‚Äçüßí **–û–¢–ó–´–í–´ –û –ü–û–°–¢–ï #{catalog_number}**\n\n"
            f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {count}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "view_reviews":
        post_id = int(data[2]) if len(data) > 2 else None
        if not post_id:
            return
        
        reviews = await catalog_service.get_reviews(post_id, limit=10)
        post = await catalog_service.get_post_by_id(post_id)
        catalog_number = post.get('catalog_number', '????') if post else '????'
        
        if not reviews:
            await query.edit_message_text(
                f"üìù –û—Ç–∑—ã–≤–æ–≤ –æ –ø–æ—Å—Ç–µ #{catalog_number} –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                "/catalog - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"
            )
            return
        
        text = f"üëÄ **–û–¢–ó–´–í–´ –û –ü–û–°–¢–ï #{catalog_number}**\n\n"
        
        for idx, review in enumerate(reviews, 1):
            username = review.get('username', '–ê–Ω–æ–Ω–∏–º')
            rating = "‚≠ê" * review.get('rating', 5)
            text += f"{idx}. @{username} - {rating}\n"
            text += f"   {review.get('review_text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')[:100]}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"catalog:write_review:{post_id}:{catalog_number}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog:reviews_menu:{post_id}")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "write_review":
        post_id = int(data[2]) if len(data) > 2 else None
        catalog_number = int(data[3]) if len(data) > 3 else None
        if not post_id:
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –∑–≤–µ–∑–¥
        context.user_data['catalog_review'] = {
            'post_id': post_id,
            'catalog_number': catalog_number,
            'step': 'rating'
        }
        
        keyboard = [
            [
                InlineKeyboardButton("‚≠ê", callback_data="catalog:rate:1"),
                InlineKeyboardButton("‚≠ê‚≠ê", callback_data="catalog:rate:2"),
                InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="catalog:rate:3")
            ],
            [
                InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="catalog:rate:4"),
                InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="catalog:rate:5")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]
        ]
        
        await query.edit_message_text(
            f"üåü **–û–¶–ï–ù–ö–ê –ü–û–°–¢–ê #{catalog_number}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    # ============= –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï =============
    
    elif action == "remove_confirm":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            success = await catalog_service.delete_post(post_id, user_id)
            await query.edit_message_text(
                f"üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω" if success else "‚ùå –û—à–∏–±–∫–∞"
            )
    
    elif action == "remove_cancel":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "edit":
        field = data[2] if len(data) > 2 else None
        post_id = context.user_data.get('catalog_edit', {}).get('post_id')
        
        if not post_id:
            await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        context.user_data['catalog_edit']['field'] = field
        context.user_data['catalog_edit']['waiting'] = True
        
        prompts = {
            'category': "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            'name': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            'tags': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            'link': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:",
            'media': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞:",
            'number': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä (1-9999):"
        }
        
        await query.edit_message_text(prompts.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
    
    elif action == "edit_cancel":
        context.user_data.pop('catalog_edit', None)
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "close_menu":
        await query.delete_message()


# ============= TEXT HANDLER =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # ============= –ü–û–ò–°–ö =============
    if 'catalog_search' in context.user_data:
        query_text = text.strip()
        
        if len(query_text) < 2:
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
            return
        
        posts = await catalog_service.search_posts(query_text, limit=10)
        
        if posts:
            for i, post in enumerate(posts, 1):
                await send_catalog_post_with_media(context.bot, update.effective_chat.id, post, i, len(posts))
            
            keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="catalog:finish")]]
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(posts)} –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query_text}\"",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query_text}\"")
        
        context.user_data.pop('catalog_search', None)
        return
    
    # ============= –û–ë–†–ê–ë–û–¢–ö–ê TOP –ü–û–°–¢–û–í =============
    if 'catalog_add_top' in context.user_data:
        data = context.user_data['catalog_add_top']
        step = data.get('step')
        
        if step == 'link':
            if text.startswith('https://t.me/'):
                data['catalog_link'] = text
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
                media_result = await extract_media_from_link(context.bot, text)
                
                if media_result and media_result.get('success'):
                    data['media_type'] = media_result['type']
                    data['media_file_id'] = media_result['file_id']
                    data['media_group_id'] = media_result.get('media_group_id')
                    data['media_json'] = media_result.get('media_json', [])
                    
                    await update.message.reply_text(f"{media_result['message']}")
                else:
                    await update.message.reply_text(f"{media_result.get('message', '‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –≤—Ä—É—á–Ω—É—é')}")
                
                data['step'] = 'description'
                await update.message.reply_text(
                    "üìù –®–∞–≥ 2/3\n\n"
                    "–û–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤):"
                )
            else:
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
        
        elif step == 'description':
            data['name'] = text[:255]
            data['step'] = 'tags'
            await update.message.reply_text(
                "üè∑Ô∏è –®–∞–≥ 3/3\n\n"
                "–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):"
            )
        
        elif step == 'tags':
            tags = [t.strip() for t in text.split(',') if t.strip()][:10]
            data['tags'] = tags
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
            category = data['category']
            post_id = await catalog_service.add_post(
                user_id=user_id,
                catalog_link=data['catalog_link'],
                category=category,
                name=data['name'],
                tags=tags,
                media_type=data.get('media_type'),
                media_file_id=data.get('media_file_id'),
                media_group_id=data.get('media_group_id'),
                media_json=data.get('media_json', [])
            )
            
            if post_id:
                post = await catalog_service.get_post_by_id(post_id)
                catalog_number = post.get('catalog_number', '????')
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ—Å—Ç #{catalog_number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {category}!\n\n"
                    f"üìù {data['name']}\n"
                    f"üè∑Ô∏è {len(tags)} —Ç–µ–≥–æ–≤\n"
                    f"üì∏ –ú–µ–¥–∏–∞: {'–î–∞' if data.get('media_file_id') else '–ù–µ—Ç'}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                await notify_subscribers_about_new_post(context.bot, post_id, category)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
            
            context.user_data.pop('catalog_add_top', None)
        
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ (–¢–ï–ö–°–¢ –ü–û–°–õ–ï –í–´–ë–û–†–ê –ó–í–ï–ó–î)
    if 'catalog_review' in context.user_data and context.user_data['catalog_review'].get('step') == 'text':
        post_id = context.user_data['catalog_review'].get('post_id')
        rating = context.user_data['catalog_review'].get('rating', 5)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        review_id = await catalog_service.add_review(
            post_id=post_id,
            user_id=user_id,
            review_text=text[:500],
            rating=rating,
            username=update.effective_user.username,
            bot=context.bot
        )
        
        if review_id:
            stars = "‚≠ê" * rating
            await update.message.reply_text(
                f"‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–û—Ü–µ–Ω–∫–∞: {stars}\n\n"
                f"/catalog - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
        
        context.user_data.pop('catalog_review', None)
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    if 'catalog_add' in context.user_data:
        data = context.user_data['catalog_add']
        step = data.get('step')
        
        if step == 'link':
            if text.startswith('https://t.me/'):
                data['catalog_link'] = text
                data['step'] = 'category'
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –º–µ–¥–∏–∞
                media_result = await extract_media_from_link(context.bot, text)
                if media_result and media_result.get('success'):
                    data['media_type'] = media_result['type']
                    data['media_file_id'] = media_result['file_id']
                    data['media_group_id'] = media_result.get('media_group_id')
                    data['media_json'] = media_result.get('media_json', [])
                    await update.message.reply_text(f"{media_result['message']}")
                else:
                    await update.message.reply_text(f"{media_result.get('message', '‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –≤—Ä—É—á–Ω—É—é')}")
                
                keyboard = [[InlineKeyboardButton(cat, callback_data=f"catalog:add_cat:{cat}")] for cat in CATALOG_CATEGORIES.keys()]
                await update.message.reply_text(
                    "üìÇ –®–∞–≥ 2/5\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
        
        elif step == 'name':
            data['name'] = text[:255]
            data['step'] = 'media'
            await update.message.reply_text(
                "üì∏ –®–∞–≥ 4/5\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –µ—Å–ª–∏ –º–µ–¥–∏–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
            )
        
        elif step == 'tags':
            tags = [t.strip() for t in text.split(',') if t.strip()][:10]
            data['tags'] = tags
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
            post_id = await catalog_service.add_post(
                user_id=user_id,
                catalog_link=data['catalog_link'],
                category=data['category'],
                name=data['name'],
                tags=tags,
                media_type=data.get('media_type'),
                media_file_id=data.get('media_file_id'),
                media_group_id=data.get('media_group_id'),
                media_json=data.get('media_json', [])
            )
            
            if post_id:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞
                post = await catalog_service.get_post_by_id(post_id)
                catalog_number = post.get('catalog_number', '????')
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ—Å—Ç #{catalog_number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!\n\n"
                    f"üìÇ {data['category']}\n"
                    f"üìù {data['name']}\n"
                    f"üè∑Ô∏è {len(tags)} —Ç–µ–≥–æ–≤\n"
                    f"üì∏ –ú–µ–¥–∏–∞: {'–î–∞' if data.get('media_file_id') else '–ù–µ—Ç'}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                await notify_subscribers_about_new_post(context.bot, post_id, data['category'])
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
            
            context.user_data.pop('catalog_add', None)
        
        return
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
    if 'catalog_priority' in context.user_data and context.user_data['catalog_priority'].get('step') == 'collecting':
        if text.startswith('https://t.me/'):
            links = context.user_data['catalog_priority'].get('links', [])
            links.append(text)
            context.user_data['catalog_priority']['links'] = links
            
            await update.message.reply_text(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(links)}/10\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'"
            )
        return
    
    # –†–µ–∫–ª–∞–º–∞
    if 'catalog_ad' in context.user_data:
        data = context.user_data['catalog_ad']
        step = data.get('step')
        
        if step == 'link':
            if text.startswith('https://t.me/'):
                data['catalog_link'] = text
                data['step'] = 'description'
                await update.message.reply_text("üìù –®–∞–≥ 2/2\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã:")
            else:
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
        
        elif step == 'description':
            ad_id = await catalog_service.add_ad_post(
                catalog_link=data['catalog_link'],
                description=text[:255]
            )
            
            if ad_id:
                await update.message.reply_text(f"‚úÖ –†–µ–∫–ª–∞–º–∞ #{ad_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã")
            
            context.user_data.pop('catalog_ad', None)
        
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    if 'catalog_edit' in context.user_data and context.user_data['catalog_edit'].get('waiting'):
        post_id = context.user_data['catalog_edit'].get('post_id')
        field = context.user_data['catalog_edit'].get('field')
        
        if field == 'name':
            success = await catalog_service.update_post_field(post_id, 'name', text[:255])
            await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!" if success else "‚ùå –û—à–∏–±–∫–∞")
            context.user_data.pop('catalog_edit', None)
        
        elif field == 'tags':
            tags = [t.strip() for t in text.split(',') if t.strip()][:10]
            success = await catalog_service.update_post_field(post_id, 'tags', tags)
            await update.message.reply_text(f"‚úÖ –¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({len(tags)})!" if success else "‚ùå –û—à–∏–±–∫–∞")
            context.user_data.pop('catalog_edit', None)
        
        elif field == 'link':
            if text.startswith('https://t.me/'):
                success = await catalog_service.update_post_field(post_id, 'catalog_link', text)
                await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" if success else "‚ùå –û—à–∏–±–∫–∞")
            else:
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
            context.user_data.pop('catalog_edit', None)
        
        elif field == 'number':
            try:
                new_number = int(text)
                if new_number < 1 or new_number > 9999:
                    await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 9999")
                else:
                    success = await catalog_service.update_post_field(post_id, 'catalog_number', new_number)
                    if success:
                        await update.message.reply_text(f"‚úÖ –ù–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ #{new_number}")
                    else:
                        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9999")
            context.user_data.pop('catalog_edit', None)


__all__ = [
    'catalog_command',
    'search_command',
    'review_command',
    'categoryfollow_command',
    'addtocatalog_command',
    'addgirltocat_command',
    'addboytocat_command',
    'edit_catalog_command',
    'remove_catalog_command',
    'catalogpriority_command',
    'addcatalogreklama_command',
    'catalogview_command',
    'catalogviews_command',
    'catalog_stats_users_command',
    'catalog_stats_categories_command',
    'catalog_stats_popular_command',
    'catalog_stats_priority_command',
    'catalog_stats_reklama_command',
    'handle_catalog_callback',
    'handle_catalog_text',
    'handle_catalog_media',
    'change_catalog_number_command'
]
