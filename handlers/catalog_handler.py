# -*- coding: utf-8 -*-
"""
Handler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ú–ï–î–ò–ê
–ö–æ–º–∞–Ω–¥—ã: /catalog, /search, /addtocatalog, /review, /catalogpriority, /addcatalogreklama
"""
import logging
from typing import Optional, Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES

logger = logging.getLogger(__name__)

# ============= –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - /catalog"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º 5-10 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    count = 5
    posts = await catalog_service.get_random_posts(user_id, count=count)
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        
        await update.message.reply_text(
            "üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å\n\n"
            "–ù–∞–∂–º–∏—Ç–µ üîÑ'–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –° –ú–ï–î–ò–ê
    for i, post in enumerate(posts, 1):
        await send_catalog_post_with_media(
            context.bot,
            update.effective_chat.id,
            post,
            i,
            len(posts)
        )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"),
            InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
        ],
        [InlineKeyboardButton("üïµüèª‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫", callback_data="catalog:search")]
    ]
    
    await update.message.reply_text(
        f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É - /search"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category in CATALOG_CATEGORIES.keys():
        keyboard.append([InlineKeyboardButton(category, callback_data=f"catalog:cat:{category}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")])
    
    text = (
        "üïµüèº‚Äç‚ôÄÔ∏è **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥ - /addtocatalog"""
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    context.user_data['catalog_add'] = {'step': 'link'}
    
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
    
    text = (
        "üÜï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–ê–¢–ê–õ–û–ì –£–°–õ–£–ì**\n\n"
        "–®–∞–≥ 1 –∏–∑ 5\n\n"
        "‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram-–∫–∞–Ω–∞–ª–µ:\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/catalogtrix/123"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ü§≥üèº–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ - /review [post_id]"""
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/review 123`",
            parse_mode='Markdown'
        )
        return
    
    post_id = int(context.args[0])
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
    context.user_data['catalog_review'] = {
        'post_id': post_id,
        'waiting': True
    }
    
    keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
    
    await update.message.reply_text(
        f"üñãÔ∏è **–û–¢–ó–´–í –û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ï**\n\n"
        f"ID –ø–æ—Å—Ç–∞: {post_id}\n\n"
        f"–í–∞—à –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============= –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalogpriority_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üß¨–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã - /catalogpriority (—Å–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è)"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    context.user_data['catalog_priority'] = {'waiting': True, 'links': []}
    
    keyboard = [[InlineKeyboardButton("‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:priority_finish")]]
    
    text = (
        "üî¨ **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–°–¢–´**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã (–ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏).\n\n"
        "–≠—Ç–∏ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.\n\n"
        "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: https://t.me/catalogtrix/123"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addcatalogreklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç - /addcatalogreklama"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("üëÆüèº‚Äç‚ôÇÔ∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        return
    
    context.user_data['catalog_ad'] = {'step': 'link'}
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–±–æ–π", callback_data="catalog:cancel_ad")]]
    
    text = (
        "üåö **–î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–´**\n\n"
        "–®–∞–≥ 1 –∏–∑ 3\n\n"
        "‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç:"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============= –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ê–î–ú–ò–ù) =============

async def catalog_stats_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üîò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalog_stats_users"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    text = (
        "üîò **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
        "‚óΩÔ∏è –ó–∞–ø—É—Å—Ç–∏–ª–∏ /catalog —Å–µ–≥–æ–¥–Ω—è: 0\n"
        "‚óªÔ∏è –ó–∞ –Ω–µ–¥–µ–ª—é: 0\n"
        "‚¨úÔ∏è –ó–∞ –º–µ—Å—è—Ü: 0\n\n"
        "üé¶ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: 0"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')


async def catalog_stats_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - /catalog_stats_categories"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    text = (
        "üìÅ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô**\n\n"
        "üëΩ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        "üë©üèΩ‚Äçü¶≥ –ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥: 0\n"
        "üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ç–µ–ª–æ: 0\n"
        "üî£ –£—Å–ª—É–≥–∏ –∏ –ø–æ–º–æ—â—å: 0\n"
        "üìì –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ: 0\n"
        "ü¶ç –î–æ—Å—É–≥ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è: 0"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')


async def catalog_stats_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üë®üèº‚Äçüíª–¢–û–ü10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π - /catalog_stats_popular"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    text = (
        "üèÜ **üíª TOP10 –ü–û–ü–£–õ–Ø–†–ù–´–• –ü–û–°–¢–û–í**\n\n"
        "1. –ü–æ—Å—Ç #123 - 150 –∫–ª–∏–∫–æ–≤\n"
        "2. –ü–æ—Å—Ç #456 - 120 –∫–ª–∏–∫–æ–≤\n"
        "...\n\n"
        "üóø –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ LIVE —Ä–µ–∂–∏–º–µ"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')


# ============= CALLBACK HANDLERS =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    user_id = update.effective_user.id
    
    # ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====
    if action == "next":
        count = 5
        posts = await catalog_service.get_random_posts(user_id, count=count)
        
        if not posts:
            await query.edit_message_text(
                "üé¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω\n\n"
                "ü§≥üèº –ö–æ–º–∞–Ω–¥–∞ /catalog –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é."
            )
            return
        
        await query.message.delete()
        
        for i, post in enumerate(posts, 1):
            await send_catalog_post_with_media(
                context.bot,
                query.message.chat_id,
                post,
                i,
                len(posts)
            )
        
        keyboard = [
            [
                InlineKeyboardButton(f"üéë –ï—â—ë {count}", callback_data="catalog:next"),
                InlineKeyboardButton("‚öìÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
            ]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üåÉ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {len(posts)}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "finish":
        await query.edit_message_text(
            "üî≠ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "–°—Ç–∞–±–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )
    
    elif action == "restart":
        await catalog_service.reset_session(user_id)
        await query.edit_message_text(
            "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        )
    
    # ===== –ü–û–ò–°–ö =====
    elif action == "search":
        keyboard = []
        for category in CATALOG_CATEGORIES.keys():
            keyboard.append([InlineKeyboardButton(category, callback_data=f"catalog:cat:{category}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog:back_main")])
        
        await query.edit_message_text(
            "üî¶ **–ü–û–ò–°–ö**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "cat":
        category = ":".join(data[2:])
        subcategories = CATALOG_CATEGORIES.get(category, [])
        
        keyboard = []
        for subcat in subcategories:
            keyboard.append([InlineKeyboardButton(subcat, callback_data=f"catalog:searchcat:{category}:{subcat}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog:search")])
        
        await query.edit_message_text(
            f"üìÇ **{category}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "searchcat":
        category = data[2] if len(data) > 2 else None
        subcategory = data[3] if len(data) > 3 else None
        
        posts = await catalog_service.search_posts(category=subcategory or category, limit=10)
        
        if not posts:
            await query.edit_message_text(
                f"ü´ô –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory or category}' –ø—É—Å—Ç–∞—è.\n\n"
                "üí£ –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...üî¨ –ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üóÑÔ∏è"
            )
            return
        
        await query.message.delete()
        
        for i, post in enumerate(posts, 1):
            await send_catalog_post_with_media(
                context.bot,
                query.message.chat_id,
                post,
                i,
                len(posts)
            )
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üíø –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(posts)}"
        )
    
    # ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò =====
    elif action == "addcat":
        category = ":".join(data[2:])
        
        if 'catalog_add' not in context.user_data:
            await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            return
        
        context.user_data['catalog_add']['category'] = category
        context.user_data['catalog_add']['step'] = 'name'
        
        await query.edit_message_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            f"üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 3 –∏–∑ 5\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ:",
            parse_mode='Markdown'
        )
    
    # ===== –ü–†–û–ü–£–°–ö –ú–ï–î–ò–ê =====
    elif action == "skip_media":
        if 'catalog_add' not in context.user_data:
            await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            return
        
        context.user_data['catalog_add']['step'] = 'tags'
        
        await query.edit_message_text(
            "‚è≠Ô∏è –ú–µ–¥–∏–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ\n\n"
            "üèÉüèª‚Äç‚û°Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç\n\n"
            "#Ô∏è‚É£ –î–æ–±–∞–≤—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):\n\n"
            "–ü—Ä–∏–º–µ—Ä: –∂–∏–∑–Ω—å, –≤—Å–µ–≥–¥–∞, –¥–∞—ë—Ç, —à–∞–Ω—Å—ã"
        )
    
    # ===== –î–ï–ô–°–¢–í–ò–Ø =====
    elif action == "click":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            await catalog_service.increment_clicks(post_id)
            await query.answer("üß∑ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ üÜó", show_alert=False)
    
    elif action == "cancel":
        context.user_data.pop('catalog_add', None)
        await query.edit_message_text("üôÖüèª –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "cancel_review":
        context.user_data.pop('catalog_review', None)
        await query.edit_message_text("üöÆ –û—Ç–∑—ã–≤ –≤ –º—É—Å–æ—Ä–∫—É")
    
    elif action == "cancel_ad":
        context.user_data.pop('catalog_ad', None)
        await query.edit_message_text("üï≥Ô∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã")
    
    elif action == "priority_finish":
        priority_data = context.user_data.get('catalog_priority', {})
        links = priority_data.get('links', [])
        
        if not links:
            await query.edit_message_text("üñáÔ∏è –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return
        
        count = await catalog_service.set_priority_posts(links)
        
        context.user_data.pop('catalog_priority', None)
        
        await query.edit_message_text(
            f"üëÄ Priority –ø–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã ü©∂\n\n"
            f"‚òëÔ∏è –£–∂–µ: {count} –∏–∑ {len(links)}"
        )


# ============= TEXT HANDLERS =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    if 'catalog_add' in context.user_data:
        data = context.user_data['catalog_add']
        step = data.get('step')
        
        if step == 'link':
            if not text.startswith('https://t.me/'):
                await update.message.reply_text("üÜñ –§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ - –ø–æ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π!")
                return
            
            data['link'] = text
            data['step'] = 'category'
            
            keyboard = []
            for category in CATALOG_CATEGORIES.keys():
                keyboard.append([InlineKeyboardButton(category, callback_data=f"catalog:addcat:{category}")])
            
            await update.message.reply_text(
                "üö∂üèª‚Äç‚û°Ô∏è –®–∞–≥ 2 –∏–∑ 5\n\nüìÇ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif step == 'name':
            data['name'] = text[:255]
            data['step'] = 'media'
            
            keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞", callback_data="catalog:skip_media")]]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
            media_extracted = await extract_media_from_link(context.bot, data['link'])
            
            if media_extracted:
                # –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ
                data['media_type'] = media_extracted['type']
                data['media_file_id'] = media_extracted['file_id']
                data['media_group_id'] = media_extracted.get('media_group_id')
                data['media_json'] = media_extracted.get('media_json', [])
                data['step'] = 'tags'
                
                await update.message.reply_text(
                    f"‚úÖ –ú–µ–¥–∏–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ø–æ—Å—Ç–∞!\n"
                    f"üìé –¢–∏–ø: {media_extracted['type']}\n\n"
                    "üèÉüèª‚Äç‚û°Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç\n\n"
                    "#Ô∏è‚É£ –î–æ–±–∞–≤—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):\n\n"
                    "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä, –≥–µ–ª—å-–ª–∞–∫, –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ"
                )
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Ä—É—á–Ω—É—é
                keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞", callback_data="catalog:skip_media")]]
                
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞\n\n"
                    "üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 4 –∏–∑ 5\n\n"
                    "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF –∏–ª–∏ –∞–ª—å–±–æ–º –≤—Ä—É—á–Ω—É—é:\n\
