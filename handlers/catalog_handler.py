# -*- coding: utf-8 -*-
"""
Handler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ú–ï–î–ò–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
–ö–æ–º–∞–Ω–¥—ã: /catalog, /search, /addtocatalog, /review, /catalogpriority, /addcatalogreklama
–í–µ—Ä—Å–∏—è: 2.0.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏
"""
import logging
import re
from typing import Optional, Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES

logger = logging.getLogger(__name__)


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def extract_media_from_link(bot: Bot, telegram_link: str) -> Optional[Dict]:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞ –≤ Telegram-–∫–∞–Ω–∞–ª–µ"""
    try:
        if not telegram_link or 't.me/' not in telegram_link:
            return None
        
        match = re.search(r't\.me/([^/]+)/(\d+)', telegram_link)
        if not match:
            return None
        
        channel_username = match.group(1)
        message_id = int(match.group(2))
        
        if channel_username.startswith('@'):
            channel_username = channel_username[1:]
        
        chat_id = f"@{channel_username}" if not channel_username.startswith('-100') else int(channel_username)
        
        try:
            message = await bot.forward_message(
                chat_id=bot.id,
                from_chat_id=chat_id,
                message_id=message_id
            )
            
            result = None
            if message.photo:
                result = {'type': 'photo', 'file_id': message.photo[-1].file_id, 'media_group_id': message.media_group_id, 'media_json': [message.photo[-1].file_id]}
            elif message.video:
                result = {'type': 'video', 'file_id': message.video.file_id, 'media_group_id': message.media_group_id, 'media_json': [message.video.file_id]}
            elif message.document:
                result = {'type': 'document', 'file_id': message.document.file_id, 'media_group_id': message.media_group_id, 'media_json': [message.document.file_id]}
            elif message.animation:
                result = {'type': 'animation', 'file_id': message.animation.file_id, 'media_group_id': message.media_group_id, 'media_json': [message.animation.file_id]}
            
            try:
                await bot.delete_message(chat_id=bot.id, message_id=message.message_id)
            except:
                pass
            
            if result:
                logger.info(f"‚úÖ Media extracted: {result['type']}")
            return result
        except TelegramError as e:
            logger.error(f"Cannot access message: {e}")
            return None
    except Exception as e:
        logger.error(f"Error extracting media: {e}")
        return None


async def send_catalog_post_with_media(bot: Bot, chat_id: int, post: Dict, index: int, total: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –º–µ–¥–∏–∞"""
    try:
        card_text = f"üÜî **–ü–æ—Å—Ç #{index} –∏–∑ {total}**\n\n"
        card_text += f"üìÇ {post.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        card_text += f"üìù {post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        
        tags = post.get('tags', [])
        if tags and isinstance(tags, list):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ (–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \w –≤ f-string)
            tags_formatted = []
            for tag in tags[:5]:
                if tag:
                    clean_tag = re.sub(r'[^\w\-]', '', str(tag).replace(' ', '_'))
                    if clean_tag:
                        tags_formatted.append(f"#{clean_tag}")
            
            if tags_formatted:
                card_text += f"{' '.join(tags_formatted)}\n\n"
        
        card_text += f"üëÅ {post.get('views', 0)} | üîó {post.get('clicks', 0)}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=post.get('catalog_link', '#')), InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤", callback_data=f"catalog:review:{post.get('id')}")],
            [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"catalog:subscribe:{post.get('category')}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        media_type = post.get('media_type')
        media_file_id = post.get('media_file_id')
        sent = False
        
        if media_file_id and media_type:
            try:
                if media_type == 'photo':
                    await bot.send_photo(chat_id=chat_id, photo=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'video':
                    await bot.send_video(chat_id=chat_id, video=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'document':
                    await bot.send_document(chat_id=chat_id, document=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                elif media_type == 'animation':
                    await bot.send_animation(chat_id=chat_id, animation=media_file_id, caption=card_text, reply_markup=reply_markup, parse_mode='Markdown')
                sent = True
            except TelegramError:
                sent = False
        
        if not sent:
            await bot.send_message(chat_id=chat_id, text=card_text, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
        
        return True
    except Exception as e:
        logger.error(f"Error sending catalog post: {e}")
        return False


async def handle_catalog_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    if 'catalog_add' not in context.user_data or context.user_data['catalog_add'].get('step') != 'media':
        return False
    
    data = context.user_data['catalog_add']
    media_type = media_file_id = None
    
    if update.message.photo:
        media_type, media_file_id = 'photo', update.message.photo[-1].file_id
    elif update.message.video:
        media_type, media_file_id = 'video', update.message.video.file_id
    elif update.message.document:
        media_type, media_file_id = 'document', update.message.document.file_id
    elif update.message.animation:
        media_type, media_file_id = 'animation', update.message.animation.file_id
    
    if media_type and media_file_id:
        data.update({'media_type': media_type, 'media_file_id': media_file_id, 'media_group_id': update.message.media_group_id, 'media_json': [media_file_id], 'step': 'tags'})
        await update.message.reply_text(f"‚úÖ –ú–µ–¥–∏–∞: {media_type}\n\n#Ô∏è‚É£ –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):\n–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä, –≥–µ–ª—å-–ª–∞–∫")
        return True
    return False


# ============= –ö–û–ú–ê–ù–î–´ =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ - /catalog"""
    user_id = update.effective_user.id
    count = 5
    posts = await catalog_service.get_random_posts(user_id, count=count)
    
    if not posts:
        keyboard = [[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")], [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]]
        await update.message.reply_text("üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç\n\n–ù–∞–∂–º–∏—Ç–µ üîÑ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'", reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    for i, post in enumerate(posts, 1):
        await send_catalog_post_with_media(context.bot, update.effective_chat.id, post, i, len(posts))
    
    keyboard = [[InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"), InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")], [InlineKeyboardButton("üïµüèª‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫", callback_data="catalog:search")]]
    await update.message.reply_text(f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(posts)}", reply_markup=InlineKeyboardMarkup(keyboard))


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ - /search"""
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"catalog:cat:{cat}")] for cat in CATALOG_CATEGORIES.keys()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")])
    await update.message.reply_text("üïµüèº‚Äç‚ôÄÔ∏è **–ü–û–ò–°–ö**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ - /addtocatalog"""
    context.user_data['catalog_add'] = {'step': 'link'}
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
    await update.message.reply_text("üÜï **–î–û–ë–ê–í–õ–ï–ù–ò–ï**\n\n–®–∞–≥ 1/5\n\n‚õìÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:\n–ü—Ä–∏–º–µ—Ä: https://t.me/channel/123", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∑—ã–≤ - /review [id]"""
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä]`\n\n–ü—Ä–∏–º–µ—Ä: `/review 123`", parse_mode='Markdown')
        return
    
    post_id = int(context.args[0])
    context.user_data['catalog_review'] = {'post_id': post_id, 'waiting': True}
    keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
    await update.message.reply_text(f"üñãÔ∏è **–û–¢–ó–´–í**\n\nID: {post_id}\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def catalogpriority_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã - /catalogpriority"""
    if not Config.is_admin(update.effective_user.id):
        return
    context.user_data['catalog_priority'] = {'links': [], 'step': 'collecting'}
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:priority_finish")]]
    await update.message.reply_text("‚≠ê **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï**\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ (–¥–æ 10)", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def addcatalogreklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É - /addcatalogreklama"""
    if not Config.is_admin(update.effective_user.id):
        return
    context.user_data['catalog_ad'] = {'step': 'link'}
    keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_ad")]]
    await update.message.reply_text("üì¢ **–†–ï–ö–õ–ê–ú–ê**\n\n–®–∞–≥ 1/2\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def catalogviews_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - /catalogviews"""
    if not Config.is_admin(update.effective_user.id):
        return
    try:
        stats = await catalog_service.get_views_stats(limit=20)
        if not stats:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        text = "üìä **–¢–û–ü-20 –ü–û –ü–†–û–°–ú–û–¢–†–ê–ú**\n\n"
        for idx, (post_id, views, name) in enumerate(stats, 1):
            emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else "‚ñ™Ô∏è"
            text += f"{emoji} #{post_id}: {views} üëÅ - {name[:30]}...\n"
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalog_stats_users"""
    if not Config.is_admin(update.effective_user.id):
        return
    try:
        stats = await catalog_service.get_catalog_stats()
        text = f"üë• **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\nüìä –ü–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}\nüì∏ –° –º–µ–¥–∏–∞: {stats.get('posts_with_media', 0)} ({stats.get('media_percentage', 0)}%)\nüìÑ –ë–µ–∑ –º–µ–¥–∏–∞: {stats.get('posts_without_media', 0)}\n\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('total_views', 0)}\nüîó –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats.get('total_clicks', 0)}\nüìà CTR: {stats.get('ctr', 0)}%\n\nüî• –°–µ—Å—Å–∏–π: {stats.get('active_sessions', 0)}\nüí¨ –û—Ç–∑—ã–≤–æ–≤: {stats.get('total_reviews', 0)}"
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - /catalog_stats_categories"""
    if not Config.is_admin(update.effective_user.id):
        return
    try:
        stats = await catalog_service.get_category_stats()
        if not stats:
            await update.message.reply_text("üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return
        text = "üìÅ **–ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú**\n\n"
        for category, count in stats.items():
            text += f"‚ñ™Ô∏è {category}: {count}\n"
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


async def catalog_stats_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–û–ü-10 - /catalog_stats_popular"""
    if not Config.is_admin(update.effective_user.id):
        return
    try:
        stats = await catalog_service.get_views_stats(limit=10)
        if not stats:
            await update.message.reply_text("üèÜ –¢–û–ü –ø—É—Å—Ç")
            return
        text = "üèÜ **–¢–û–ü-10**\n\n"
        for idx, (post_id, views, name) in enumerate(stats, 1):
            emoji = ["ü•á", "ü•à", "ü•â"][idx-1] if idx <= 3 else f"{idx}."
            text += f"{emoji} {name[:30]}... - {views} üëÅ\n"
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")


# ============= CALLBACKS =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback"""
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    user_id = update.effective_user.id
    
    if action == "next":
        posts = await catalog_service.get_random_posts(user_id, count=5)
        if not posts:
            await query.edit_message_text("üé¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω\n\n/catalog - –æ–±–Ω–æ–≤–∏—Ç—å")
            return
        await query.message.delete()
        for i, post in enumerate(posts, 1):
            await send_catalog_post_with_media(context.bot, query.message.chat_id, post, i, len(posts))
        keyboard = [[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ 5", callback_data="catalog:next"), InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")]]
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(posts)}", reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif action == "finish":
        await query.edit_message_text("üî≠ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n/start - –º–µ–Ω—é")
    
    elif action == "restart":
        await catalog_service.reset_session(user_id)
        await query.edit_message_text("üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞\n\n/catalog")
    
    elif action == "search":
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"catalog:cat:{cat}")] for cat in CATALOG_CATEGORIES.keys()]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog:back_main")])
        await query.edit_message_text("üî¶ **–ü–û–ò–°–ö**\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    elif action == "cat":
        category = ":".join(data[2:])
        subcats = CATALOG_CATEGORIES.get(category, [])
        keyboard = [[InlineKeyboardButton(s, callback_data=f"catalog:searchcat:{category}:{s}")] for s in subcats]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog:search")])
        await query.edit_message_text(f"üìÇ **{category}**\n\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    elif action == "searchcat":
        category = data[2] if len(data) > 2 else None
        subcategory = data[3] if len(data) > 3 else None
        posts = await catalog_service.search_posts(query=subcategory or category, limit=10)
        if not posts:
            await query.edit_message_text(f"ü´ô '{subcategory or category}' –ø—É—Å—Ç–∞")
            return
        await query.message.delete()
        for i, post in enumerate(posts, 1):
            await send_catalog_post_with_media(context.bot, query.message.chat_id, post, i, len(posts))
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"üíø –ù–∞–π–¥–µ–Ω–æ: {len(posts)}")
    
    elif action == "addcat":
        if 'catalog_add' not in context.user_data:
            await query.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return
        category = ":".join(data[2:])
        context.user_data['catalog_add']['category'] = category
        context.user_data['catalog_add']['step'] = 'name'
        await query.edit_message_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\nüö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 3/5\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ:")
    
    elif action == "skip_media":
        if 'catalog_add' not in context.user_data:
            await query.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return
        context.user_data['catalog_add']['step'] = 'tags'
        await query.edit_message_text("‚è≠Ô∏è –ú–µ–¥–∏–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ\n\n#Ô∏è‚É£ –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    
    elif action == "subscribe":
        category = ":".join(data[2:])
        success = await catalog_service.subscribe_to_category(user_id, category)
        await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!" if success else "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    elif action == "unsubscribe":
        category = ":".join(data[2:])
        success = await catalog_service.unsubscribe_from_category(user_id, category)
        await query.answer("‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å" if success else "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    elif action == "click":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            await catalog_service.increment_clicks(post_id)
    
    elif action == "review":
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            context.user_data['catalog_review'] = {'post_id': post_id, 'waiting': True}
            keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
            await query.message.reply_text(f"üñãÔ∏è **–û–¢–ó–´–í**\n\nID: {post_id}\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    elif action == "cancel":
        context.user_data.pop('catalog_add', None)
        await query.edit_message_text("üôÖüèª –û—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "cancel_review":
        context.user_data.pop('catalog_review', None)
        await query.edit_message_text("üöÆ –û—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "cancel_ad":
        context.user_data.pop('catalog_ad', None)
        await query.edit_message_text("üï≥Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "priority_finish":
        links = context.user_data.get('catalog_priority', {}).get('links', [])
        if not links:
            await query.edit_message_text("üñáÔ∏è –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return
        count = await catalog_service.set_priority_posts(links)
        context.user_data.pop('catalog_priority', None)
        await query.edit_message_text(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {count}/{len(links)}")


# ============= TEXT HANDLER =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –û—Ç–∑—ã–≤—ã
    if 'catalog_review' in context.user_data and context.user_data['catalog_review'].get('waiting'):
        post_id = context.user_data['catalog_review'].get('post_id')
        success = await catalog_service.add_review(post_id=post_id, user_id=user_id, review_text=text[:1000], rating=5, username=update.effective_user.username)
        await update.message.reply_text("‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω! üíö" if success else "‚ùå –û—à–∏–±–∫–∞")
        context.user_data.pop('catalog_review', None)
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    if 'catalog_add' in context.user_data:
        data = context.user_data['catalog_add']
        step = data.get('step')
        
        if step == 'link':
            if not text.startswith('https://t.me/'):
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
                return
            data['link'] = text
            data['step'] = 'category'
            keyboard = [[InlineKeyboardButton(cat, callback_data=f"catalog:addcat:{cat}")] for cat in CATALOG_CATEGORIES.keys()]
            await update.message.reply_text("üö∂üèª‚Äç‚û°Ô∏è –®–∞–≥ 2/5\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif step == 'name':
            data['name'] = text[:255]
            data['step'] = 'media'
            keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="catalog:skip_media")]]
            media = await extract_media_from_link(context.bot, data['link'])
            if media:
                data.update({'media_type': media['type'], 'media_file_id': media['file_id'], 'media_group_id': media.get('media_group_id'), 'media_json': media.get('media_json', []), 'step': 'tags'})
                await update.message.reply_text(f"‚úÖ –ú–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω–æ: {media['type']}\n\n#Ô∏è‚É£ –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ ‚Üí", reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif step == 'tags':
            tags = [t.strip() for t in text.split(',') if t.strip()][:10]
            data['tags'] = tags
            post_id = await catalog_service.add_post(
                user_id=user_id,
                catalog_link=data['link'],
                category=data.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                name=data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                tags=tags,
                media_type=data.get('media_type'),
                media_file_id=data.get('media_file_id'),
                media_group_id=data.get('media_group_id'),
                media_json=data.get('media_json', [])
            )
            
            if post_id:
                subscribers = await catalog_service.get_category_subscribers(data.get('category'))
                for sub_id in subscribers:
                    try:
                        await context.bot.send_message(chat_id=sub_id, text=f"üîî –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ '{data.get('category')}'!\n\n{data.get('link')}")
                    except:
                        pass
                await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\nID: {post_id}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–æ: {len(subscribers)}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")
            
            context.user_data.pop('catalog_add', None)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    elif 'catalog_priority' in context.user_data:
        if text.startswith('https://t.me/'):
            context.user_data['catalog_priority']['links'].append(text)
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ({len(context.user_data['catalog_priority']['links'])}/10)")
    
    # –†–µ–∫–ª–∞–º–∞
    elif 'catalog_ad' in context.user_data:
        ad_data = context.user_data['catalog_ad']
        if ad_data.get('step') == 'link':
            if not text.startswith('https://t.me/'):
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
                return
            ad_data['link'] = text
            ad_data['step'] = 'description'
            await update.message.reply_text("üì¢ –®–∞–≥ 2/2\n\n–û–ø–∏—Å–∞–Ω–∏–µ:")
        elif ad_data.get('step') == 'description':
            post_id = await catalog_service.add_ad_post(catalog_link=ad_data['link'], description=text[:500])
            await update.message.reply_text(f"‚úÖ –†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nID: {post_id}" if post_id else "‚ùå –û—à–∏–±–∫–∞")
            context.user_data.pop('catalog_ad', None)


__all__ = ['catalog_command', 'search_command', 'addtocatalog_command', 'review_command', 'catalogpriority_command', 'addcatalogreklama_command', 'catalogviews_command', 'catalog_stats_users_command', 'catalog_stats_categories_command', 'catalog_stats_popular_command', 'handle_catalog_callback', 'handle_catalog_text', 'handle_catalog_media']
