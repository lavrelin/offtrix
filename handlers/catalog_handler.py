# -*- coding: utf-8 -*-
"""
Handler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø V3
–ü—Ä–æ–µ–∫—Ç: –¢—Ä–∏–∫—Å

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø V3:
‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ç–æ –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ –≤—ã–±–æ—Ä
‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –æ—Ç–∑—ã–≤—ã
‚úÖ –£–±—Ä–∞–ª–∏ –ø–æ–∫–∞–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ /catalogview –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

–ö–æ–º–∞–Ω–¥—ã:
  - /catalog           : –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥
  - /search            : –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  - /addtocatalog      : –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –≤ –∫–∞—Ç–∞–ª–æ–≥
  - /review [post_id]  : –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
  - /catalogpriority   : (–ê–î–ú–ò–ù) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
  - /addcatalogreklama : (–ê–î–ú–ò–ù) –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
  - /catalogview       : (–ê–î–ú–ò–ù) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
"""

import logging
from typing import Optional, List, Dict, Any
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES
from services.db import db

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤ —Ñ–æ—Ä–º
STEP_LINK = 'link'
STEP_CATEGORY = 'category'
STEP_NAME = 'name'
STEP_MEDIA_SOURCE = 'media_source'
STEP_MEDIA = 'media'
STEP_TAGS = 'tags'
STEP_DESCRIPTION = 'description'

MAX_POSTS_PER_PAGE = 5
MAX_PRIORITY_POSTS = 10
MAX_TAGS = 10
MAX_NAME_LENGTH = 255
MAX_REVIEW_LENGTH = 500
MAX_DESC_LENGTH = 1000


# ============= –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - /catalog"""
    try:
        user_id = update.effective_user.id
        count = MAX_POSTS_PER_PAGE
        
        posts = await catalog_service.get_random_posts(user_id, count=count)
        
        if not posts:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
            ]
            await update.message.reply_text(
                "üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å\n\n"
                "–ù–∞–∂–º–∏—Ç–µ üîÑ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        for i, post in enumerate(posts, 1):
            await send_catalog_post(update, context, post, i, len(posts))
        
        keyboard = [
            [
                InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"),
                InlineKeyboardButton("‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
            ],
            [InlineKeyboardButton("üïµüèª –ü–æ–∏—Å–∫", callback_data="catalog:search")]
        ]
        
        await update.message.reply_text(
            f"üîÉ –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    except Exception as e:
        logger.error(f"Error in catalog_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É - /search"""
    try:
        keyboard = [
            [InlineKeyboardButton("üî§ –ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É", callback_data="catalog:search:keyword")],
            [InlineKeyboardButton("üè∑Ô∏è –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog:search:category")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        text = (
            "üïµüèº **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in search_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∏—Å–∫–∞.")


async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥ - /addtocatalog"""
    try:
        if 'catalog_add' in context.user_data:
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return
        
        context.user_data['catalog_add'] = {'step': STEP_LINK}
        
        keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
        
        text = (
            "üÜï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–ê–¢–ê–õ–û–ì –£–°–õ–£–ì**\n\n"
            "–®–∞–≥ 1 –∏–∑ 5\n\n"
            "‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram-–∫–∞–Ω–∞–ª–µ:\n"
            "–ü—Ä–∏–º–µ—Ä: `https://t.me/catalogtrix/123`"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in addtocatalog_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ - /review [post_id]"""
    try:
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text(
                "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]`\n\n–ü—Ä–∏–º–µ—Ä: `/review 123`",
                parse_mode='Markdown'
            )
            return
        
        post_id = int(context.args[0])
        
        post = await catalog_service.get_post_by_id(post_id)
        if not post:
            await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        context.user_data['catalog_review'] = {'post_id': post_id, 'waiting': True}
        
        keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
        
        await update.message.reply_text(
            f"üñãÔ∏è **–û–¢–ó–´–í –û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ï**\n\n"
            f"ID –ø–æ—Å—Ç–∞: `{post_id}`\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {post.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–í–∞—à –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. {MAX_REVIEW_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in review_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# ============= –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalogpriority_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã - /catalogpriority (–ê–î–ú–ò–ù)"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    try:
        context.user_data['catalog_priority'] = {'waiting': True, 'links': []}
        
        keyboard = [[InlineKeyboardButton("‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:priority_finish")]]
        
        text = (
            "üî¨ **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–°–¢–´**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {MAX_PRIORITY_POSTS} —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã (–ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏).\n\n"
            "–≠—Ç–∏ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.\n\n"
            "‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: `https://t.me/catalogtrix/123`"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in catalogpriority_command: {e}")


async def addcatalogreklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç - /addcatalogreklama (–ê–î–ú–ò–ù)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("üëÆüèº‚Äç‚ôÇÔ∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        return
    
    try:
        if 'catalog_ad' in context.user_data:
            await update.message.reply_text("‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.")
            return
        
        context.user_data['catalog_ad'] = {'step': STEP_LINK}
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_ad")]]
        
        text = (
            "üåö **–î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–´**\n\n"
            "–®–∞–≥ 1 –∏–∑ 3\n\n"
            "‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç:"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in addcatalogreklama_command: {e}")


async def catalogview_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ - /catalogview (–ê–î–ú–ò–ù)"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    try:
        stats = await catalog_service.get_catalog_stats()
        
        text = (
            "üëÄ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–°–ú–û–¢–†–û–í –ö–ê–¢–ê–õ–û–ì–ê**\n\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}\n"
            f"üì∏ –° –º–µ–¥–∏–∞: {stats.get('posts_with_media', 0)}\n\n"
            f"üìà –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('total_views', 0)}\n"
            f"üñ±Ô∏è –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {stats.get('total_clicks', 0)}\n"
            f"üìä CTR: {stats.get('ctr', 0)}%\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats.get('active_sessions', 0)}\n"
            f"‚úÖ –ú–µ–¥–∏–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ: {stats.get('media_percentage', 0)}%"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"Error in catalogview_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


# ============= CALLBACK HANDLERS =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"Error answering callback: {e}")
        return
    
    try:
        data = query.data
        user_id = query.from_user.id
        
        if not data.startswith("catalog:"):
            return
        
        parts = data.split(":")
        action = parts[1] if len(parts) > 1 else None
        
        if action == "next":
            posts = await catalog_service.get_random_posts(user_id, count=MAX_POSTS_PER_PAGE)
            
            if not posts:
                await query.edit_message_text("üìÇ –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
                return
            
            for i, post in enumerate(posts, 1):
                await send_catalog_post_callback(query, context, post, i, len(posts))
        
        elif action == "search":
            keyboard = [
                [InlineKeyboardButton("üî§ –ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É", callback_data="catalog:search:keyword")],
                [InlineKeyboardButton("üè∑Ô∏è –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog:search:category")],
            ]
            
            try:
                await query.edit_message_text(
                    "üïµüèº **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        elif action == "search" and len(parts) > 2:
            search_type = parts[2]
            
            if search_type == "keyword":
                context.user_data['catalog_search'] = {'type': 'keyword', 'waiting': True}
                keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_search")]]
                
                try:
                    await query.edit_message_text(
                        "üî§ **–ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–û–ú–£ –°–õ–û–í–£**\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, —Ç–µ–≥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception:
                    pass
            
            elif search_type == "category":
                keyboard = []
                for category in CATALOG_CATEGORIES.keys():
                    keyboard.append(
                        [InlineKeyboardButton(category, callback_data=f"catalog:cat:{category}")]
                    )
                
                try:
                    await query.edit_message_text(
                        "üìÇ **–ü–û–ò–°–ö –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                except Exception:
                    pass
        
        elif action == "cat":
            category = parts[2] if len(parts) > 2 else None
            
            if category not in CATALOG_CATEGORIES:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                return
            
            posts = await catalog_service.search_posts(category=category, limit=MAX_POSTS_PER_PAGE)
            
            if not posts:
                await query.edit_message_text(f"üìÇ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
                return
            
            for i, post in enumerate(posts, 1):
                await send_catalog_post_callback(query, context, post, i, len(posts))
        
        elif action == "review":
            post_id = int(parts[2]) if len(parts) > 2 else None
            
            if not post_id:
                await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ—Å—Ç–∞")
                return
            
            context.user_data['catalog_review'] = {'post_id': post_id, 'waiting': True}
            
            keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
            
            try:
                await query.edit_message_text(
                    f"üñãÔ∏è **–û–¢–ó–´–í**\n\nID –ø–æ—Å—Ç–∞: `{post_id}`\n\n"
                    f"–í–∞—à –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. {MAX_REVIEW_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        elif action == "addcat":
            category = parts[2] if len(parts) > 2 else None
            
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            if category not in CATALOG_CATEGORIES:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                return
            
            data = context.user_data['catalog_add']
            data['category'] = category
            data['step'] = STEP_NAME
            
            keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="catalog:skip_name")]]
            
            try:
                await query.edit_message_text(
                    f"üö∂üèª –®–∞–≥ 2 –∏–∑ 5\n\n"
                    f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category}`",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        elif action == "skip_name":
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            data = context.user_data['catalog_add']
            data['name'] = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            data['step'] = STEP_MEDIA_SOURCE
            
            keyboard = [
                [InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø–æ—Å—Ç–∞", callback_data="catalog:import_photo")],
                [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ", callback_data="catalog:upload_photo")],
                [InlineKeyboardButton("‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="catalog:skip_media")]
            ]
            
            try:
                await query.edit_message_text(
                    "üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 3 –∏–∑ 5\n\n"
                    "üì∏ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        elif action == "import_photo":
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            data = context.user_data['catalog_add']
            data['step'] = 'waiting_import_link'
            
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
            
            try:
                await query.edit_message_text(
                    "üì• **–ò–ú–ü–û–†–¢ –§–û–¢–û**\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ:\n"
                    "–ü—Ä–∏–º–µ—Ä: `https://t.me/channel/123`",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        elif action == "upload_photo":
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            data = context.user_data['catalog_add']
            data['step'] = STEP_MEDIA
            
            keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="catalog:skip_media")]]
            
            try:
                await query.edit_message_text(
                    "üì§ **–ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û**\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        elif action == "skip_media":
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            data = context.user_data['catalog_add']
            data['step'] = STEP_TAGS
            
            keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:finish_add")]]
            
            try:
                await query.edit_message_text(
                    "üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 4 –∏–∑ 5\n\n"
                    f"#Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–º–∞–∫—Å. {MAX_TAGS}):\n\n"
                    "–ü—Ä–∏–º–µ—Ä: `–º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –Ω–æ–≥—Ç–∏`",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception:
                pass
        
        elif action == "finish_add":
            if 'catalog_add' not in context.user_data:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            data = context.user_data['catalog_add']
            
            post_id = await catalog_service.add_post(
                user_id=user_id,
                catalog_link=data.get('link'),
                category=data.get('category'),
                name=data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                tags=data.get('tags', []),
                media_file_id=data.get('media_file_id'),
                media_type=data.get('media_type')
            )
            
            context.user_data.pop('catalog_add', None)
            
            if post_id:
                try:
                    await query.edit_message_text(
                        f"üìá **–í –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è!**\n\n"
                        f"üì¨ ID: {post_id}\n"
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', 'N/A')}\n"
                        f"üéöÔ∏è –¢–µ–≥–∏: {', '.join(data.get('tags', [])) or '–ù–µ—Ç'}",
                        parse_mode='Markdown'
                    )
                except Exception:
                    pass
            else:
                await query.edit_message_text("‚ûñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")
        
        elif action == "restart":
            await catalog_command(update, context)
        
        elif action == "finish":
            await query.edit_message_text("‚èπÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        elif action == "cancel":
            context.user_data.pop('catalog_add', None)
            try:
                await query.edit_message_text("üôÖüèª –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            except Exception:
                pass
        
        elif action == "cancel_search":
            context.user_data.pop('catalog_search', None)
            try:
                await query.edit_message_text("üôÖüèª –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            except Exception:
                pass
        
        elif action == "cancel_review":
            context.user_data.pop('catalog_review', None)
            try:
                await query.edit_message_text("üöÆ –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω")
            except Exception:
                pass
        
        elif action == "cancel_ad":
            context.user_data.pop('catalog_ad', None)
            try:
                await query.edit_message_text("üï≥Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
            except Exception:
                pass
        
        elif action == "priority_finish":
            priority_data = context.user_data.get('catalog_priority', {})
            links = priority_data.get('links', [])
            
            if not links:
                await query.edit_message_text("üñáÔ∏è –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                return
            
            count = await catalog_service.set_priority_posts(links)
            context.user_data.pop('catalog_priority', None)
            
            try:
                await query.edit_message_text(
                    f"üëÄ Priority –ø–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n"
                    f"‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ: {count} –∏–∑ {len(links)}"
                )
            except Exception:
                pass
    
    except ValueError as ve:
        logger.error(f"ValueError in handle_catalog_callback: {ve}")
        try:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception:
            pass
    except Exception as e:
        logger.error(f"Error in handle_catalog_callback: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception:
            pass


# ============= TEXT HANDLERS =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    text = update.message.text.strip() if update.message.text else ""
    
    try:
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        if 'catalog_search' in context.user_data:
            search_data = context.user_data['catalog_search']
            if search_data.get('waiting') and search_data.get('type') == 'keyword':
                await handle_search_flow(update, context, text)
                return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
        if 'catalog_add' in context.user_data:
            await handle_add_post_flow(update, context, text, context.bot)
            return
        
        # –û—Ç–∑—ã–≤
        if 'catalog_review' in context.user_data:
            await handle_review_flow(update, context, text)
            return
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        if 'catalog_priority' in context.user_data:
            await handle_priority_flow(update, context, text)
            return
        
        # –†–µ–∫–ª–∞–º–∞
        if 'catalog_ad' in context.user_data:
            await handle_ad_flow(update, context, text)
            return
    
    except Exception as e:
        logger.error(f"Error in handle_catalog_text: {e}")
        try:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        except:
            pass


async def handle_catalog_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    try:
        if 'catalog_add' not in context.user_data:
            return False
        
        data = context.user_data['catalog_add']
        step = data.get('step')
        
        if step != STEP_MEDIA:
            return False
        
        media_type = None
        media_file_id = None
        
        if update.message.photo:
            media_type = 'photo'
            media_file_id = update.message.photo[-1].file_id
        elif update.message.video:
            media_type = 'video'
            media_file_id = update.message.video.file_id
        elif update.message.animation:
            media_type = 'animation'
            media_file_id = update.message.animation.file_id
        
        if not media_file_id:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return True
        
        data['media_file_id'] = media_file_id
        data['media_type'] = media_type
        data['step'] = STEP_TAGS
        
        keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:finish_add")]]
        
        await update.message.reply_text(
            "üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 4 –∏–∑ 5\n\n"
            f"#Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ (–º–∞–∫—Å. {MAX_TAGS}):\n\n"
            "–ü—Ä–∏–º–µ—Ä: `–º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –Ω–æ–≥—Ç–∏`",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return True
    
    except Exception as e:
        logger.error(f"Error in handle_catalog_media: {e}")
        return True


# ============= FLOW HANDLERS =============

async def handle_search_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, query_text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    user_id = update.effective_user.id
    
    if not query_text or len(query_text) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        return
    
    all_posts = await catalog_service.get_random_posts(user_id, count=100)
    
    query_lower = query_text.lower()
    found_posts = []
    
    for post in all_posts:
        name = post.get('name', '').lower()
        tags = [tag.lower() for tag in post.get('tags', [])]
        category = post.get('category', '').lower()
        
        if (query_lower in name or 
            any(query_lower in tag for tag in tags) or
            query_lower in category):
            found_posts.append(post)
    
    context.user_data.pop('catalog_search', None)
    
    if not found_posts:
        keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="catalog:search:keyword")]]
        await update.message.reply_text(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query_text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    found_posts = found_posts[:MAX_POSTS_PER_PAGE]
    
    await update.message.reply_text(
        f"‚úÖ **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(found_posts)}**",
        parse_mode='Markdown'
    )
    
    for i, post in enumerate(found_posts, 1):
        await send_catalog_post(update, context, post, i, len(found_posts))
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="catalog:search:keyword")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
    ]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_add_post_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    data = context.user_data['catalog_add']
    step = data.get('step')
    
    if step == STEP_LINK:
        if not text.startswith('https://t.me/'):
            await update.message.reply_text("üÜñ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!")
            return
        
        data['link'] = text
        data['step'] = STEP_CATEGORY
        
        keyboard = []
        for category in CATALOG_CATEGORIES.keys():
            keyboard.append([InlineKeyboardButton(category, callback_data=f"catalog:addcat:{category}")])
        
        await update.message.reply_text(
            "üö∂üèª –®–∞–≥ 2 –∏–∑ 5\n\nüìÇ –í—ã–±–µ —Ä–∏—Ç–µ—Ä–∏—Ç—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif step == STEP_NAME:
        data['name'] = text[:MAX_NAME_LENGTH]
        data['step'] = STEP_MEDIA_SOURCE
        
        keyboard = [
            [InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø–æ—Å—Ç–∞", callback_data="catalog:import_photo")],
            [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë", callback_data="catalog:upload_photo")],
            [InlineKeyboardButton("‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="catalog:skip_media")]
        ]
        
        await update.message.reply_text(
            "üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 3 –∏–∑ 5\n\nüì∏ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif step == 'waiting_import_link':
        if not text.startswith('https://t.me/'):
            await update.message.reply_text("üÜñ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!")
            return
        
        await update.message.reply_text("‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Å—Ç–∞...")
        
        media_info = await extract_media_from_link(text, bot)
        
        if media_info and media_info.get('found'):
            data['media_file_id'] = media_info.get('file_id')
            data['media_type'] = media_info.get('media_type')
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë.")
        
        data['step'] = STEP_TAGS
        
        keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:finish_add")]]
        
        await update.message.reply_text(
            f"üö∂‚Äç‚ôÄÔ∏è –®–∞–≥ 4 –∏–∑ 5\n\n#Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ (–º–∞–∫—Å. {MAX_TAGS}):\n\n"
            "–ü—Ä–∏–º–µ—Ä: `–º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –Ω–æ–≥—Ç–∏`",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif step == STEP_TAGS:
        tags = [tag.strip() for tag in text.split(',')[:MAX_TAGS] if tag.strip()]
        tags = [tag[:50] for tag in tags]
        data['tags'] = tags
        
        post_id = await catalog_service.add_post(
            user_id=user_id,
            catalog_link=data['link'],
            category=data['category'],
            name=data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            tags=tags,
            media_file_id=data.get('media_file_id'),
            media_type=data.get('media_type')
        )
        
        context.user_data.pop('catalog_add', None)
        
        if post_id:
            await update.message.reply_text(
                f"üìá **–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"üì¨ ID: {post_id}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                f"üéöÔ∏è –¢–µ–≥–∏: {', '.join(tags) if tags else '–ù–µ—Ç'}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ûñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")


async def handle_review_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    review_data = context.user_data['catalog_review']
    
    if review_data.get('waiting'):
        if len(text) > MAX_REVIEW_LENGTH:
            await update.message.reply_text(
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤! –ú–∞–∫—Å. {MAX_REVIEW_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            return
        
        post_id = review_data['post_id']
        user_id = update.effective_user.id
        
        try:
            async with db.get_session() as session:
                from models import CatalogReview
                
                review = CatalogReview(
                    post_id=post_id,
                    user_id=user_id,
                    text=text,
                    created_at=datetime.utcnow()
                )
                
                session.add(review)
                await session.commit()
                
                context.user_data.pop('catalog_review', None)
                
                await update.message.reply_text(
                    "üíæ **–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                    "üõÄ –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! ‚òëÔ∏è",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"Error saving review: {e}")
            context.user_data.pop('catalog_review', None)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")


async def handle_priority_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    priority_data = context.user_data['catalog_priority']
    
    if priority_data.get('waiting'):
        if not text.startswith('https://t.me/'):
            await update.message.reply_text("üôÖüèº –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            return
        
        links = priority_data['links']
        if len(links) >= MAX_PRIORITY_POSTS:
            await update.message.reply_text(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PRIORITY_POSTS} —Å—Å—ã–ª–æ–∫")
            return
        
        links.append(text)
        count = len(links)
        
        await update.message.reply_text(
            f"‚õìÔ∏è –°—Å—ã–ª–∫–∞ {count}/{MAX_PRIORITY_POSTS} –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        )


async def handle_ad_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    ad_data = context.user_data['catalog_ad']
    step = ad_data.get('step')
    
    if step == STEP_LINK:
        if not text.startswith('https://t.me/'):
            await update.message.reply_text("üß∑ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            return
        
        ad_data['link'] = text
        ad_data['step'] = STEP_DESCRIPTION
        
        await update.message.reply_text(
            "üèôÔ∏è –®–∞–≥ 2 –∏–∑ 3\n\nüë©üèº‚Äçüíª –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã:"
        )
    
    elif step == STEP_DESCRIPTION:
        if len(text) > MAX_DESC_LENGTH:
            await update.message.reply_text(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å. {MAX_DESC_LENGTH}")
            return
        
        post_id = await catalog_service.add_ad_post(
            catalog_link=ad_data['link'],
            description=text
        )
        
        context.user_data.pop('catalog_ad', None)
        
        if post_id:
            await update.message.reply_text(
                f"üåå **–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"‚óªÔ∏è ID: {post_id}\n\n"
                f"‚ñ´Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –ø–æ—Å—Ç–æ–≤",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("üíÅüèª –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def extract_media_from_link(link: str, bot) -> Optional[Dict]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram –ø–æ—Å—Ç"""
    try:
        if not link.startswith('https://t.me/'):
            return None
        
        parts = link.replace('https://t.me/', '').split('/')
        
        if len(parts) < 2:
            return None
        
        if parts[0] == 'c' and len(parts) == 3:
            channel_id = f"-100{parts[1]}"
            message_id = int(parts[2])
        else:
            channel_id = parts[0]
            message_id = int(parts[1])
        
        try:
            message = await bot.get_chat(channel_id)
            msg = await bot.get_chat_message(channel_id, message_id)
            
            if msg.photo:
                return {'media_type': 'photo', 'file_id': msg.photo[-1].file_id, 'found': True}
            elif msg.video:
                return {'media_type': 'video', 'file_id': msg.video.file_id, 'found': True}
            elif msg.animation:
                return {'media_type': 'animation', 'file_id': msg.animation.file_id, 'found': True}
            else:
                return {'found': False}
        except Exception as e:
            logger.warning(f"Could not fetch message: {e}")
            return None
    
    except Exception as e:
        logger.error(f"Error extracting media: {e}")
        return None


async def send_catalog_post(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           post: dict, index: int, total: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç (–±–µ–∑ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)"""
    try:
        text = (
            f"üèôÔ∏è **–ó–∞–ø–∏—Å—å {index}/{total}**\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{post.get('category', 'N/A')}`\n"
            f"üéë **{post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n\n"
            f"üåå –¢–µ–≥–∏: {', '.join(post.get('tags', [])) if post.get('tags') else '–Ω–µ—Ç'}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üèÉüèª‚Äç‚ôÄÔ∏è –ö –ø–æ—Å—Ç—É", url=post.get('catalog_link', '#'))],
            [InlineKeyboardButton("üßëüèº‚Äçüíª –û—Ç–∑—ã–≤", callback_data=f"catalog:review:{post['id']}")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        await catalog_service.increment_views(post['id'])
    
    except Exception as e:
        logger.error(f"Error in send_catalog_post: {e}")


async def send_catalog_post_callback(query, context: ContextTypes.DEFAULT_TYPE, 
                                    post: dict, index: int, total: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ callback (–±–µ–∑ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)"""
    try:
        text = (
            f"ü™Ω **–ó–∞–ø–∏—Å—å {index}/{total}**\n\n"
            f"üí® –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{post.get('category', 'N/A')}`\n"
            f"üåä **{post.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n\n"
            f"üå™Ô∏è –¢–µ–≥–∏: {', '.join(post.get('tags', [])) if post.get('tags') else '–Ω–µ—Ç'}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíÅüèº –ö –ø–æ—Å—Ç—É", url=post.get('catalog_link', '#'))],
            [InlineKeyboardButton("üë±üèª‚Äç‚ôÄÔ∏è –û—Ç–∑—ã–≤", callback_data=f"catalog:review:{post['id']}")]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        await catalog_service.increment_views(post['id'])
    
    except Exception as e:
        logger.error(f"Error in send_catalog_post_callback: {e}")


__all__ = [
    'catalog_command',
    'search_command',
    'addtocatalog_command',
    'review_command',
    'catalogpriority_command',
    'addcatalogreklama_command',
    'catalogview_command',
    'handle_catalog_callback',
    'handle_catalog_text',
    'handle_catalog_media',
]
