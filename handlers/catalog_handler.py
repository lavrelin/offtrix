# -*- coding: utf-8 -*-
"""
Handler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥
–ö–æ–º–∞–Ω–¥—ã: /catalog, /search, /addtocatalog, /review, /catalogpriority, /addcatalogreklama
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.catalog_service import catalog_service, CATALOG_CATEGORIES

logger = logging.getLogger(__name__)

# ============= –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥ - /catalog"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º 5-10 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    count = 5
    posts = await catalog_service.get_random_posts(user_id, count=count)
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="catalog:restart")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        
        await update.message.reply_text(
            "üìã –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
    for i, post in enumerate(posts, 1):
        await send_catalog_post(update, context, post, i, len(posts))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"),
            InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
        ],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="catalog:search")]
    ]
    
    await update.message.reply_text(
        f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É - /search"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category in CATALOG_CATEGORIES.keys():
        keyboard.append([InlineKeyboardButton(category, callback_data=f"catalog:cat:{category}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")])
    
    text = (
        "üîç **–ü–û–ò–°–ö –í –ö–ê–¢–ê–õ–û–ì–ï**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addtocatalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥ - /addtocatalog"""
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    context.user_data['catalog_add'] = {'step': 'link'}
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel")]]
    
    text = (
        "üìù **–î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–ê–¢–ê–õ–û–ì –£–°–õ–£–ì**\n\n"
        "–®–∞–≥ 1 –∏–∑ 4\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram-–∫–∞–Ω–∞–ª–µ:\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/catalogtrix/123"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def review_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ - /review [post_id]"""
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/review [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/review 123`",
            parse_mode='Markdown'
        )
        return
    
    post_id = int(context.args[0])
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
    context.user_data['catalog_review'] = {
        'post_id': post_id,
        'waiting': True
    }
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_review")]]
    
    await update.message.reply_text(
        f"üìù **–û–¢–ó–´–í –û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ï**\n\n"
        f"ID –ø–æ—Å—Ç–∞: {post_id}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============= –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ =============

async def catalogpriority_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã - /catalogpriority (—Å–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è)"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    context.user_data['catalog_priority'] = {'waiting': True, 'links': []}
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="catalog:priority_finish")]]
    
    text = (
        "‚≠êÔ∏è **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–°–¢–´**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã (–ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏).\n\n"
        "–≠—Ç–∏ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/catalogtrix/123"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def addcatalogreklama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç - /addcatalogreklama"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    context.user_data['catalog_ad'] = {'step': 'link'}
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="catalog:cancel_ad")]]
    
    text = (
        "üì¢ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–´**\n\n"
        "–®–∞–≥ 1 –∏–∑ 3\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç:"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============= –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ê–î–ú–ò–ù) =============

async def catalog_stats_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /catalog_stats_users"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
        "üë• –ó–∞–ø—É—Å—Ç–∏–ª–∏ /catalog —Å–µ–≥–æ–¥–Ω—è: 0\n"
        "üë• –ó–∞ –Ω–µ–¥–µ–ª—é: 0\n"
        "üë• –ó–∞ –º–µ—Å—è—Ü: 0\n\n"
        "üìà –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: 0"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')


async def catalog_stats_categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - /catalog_stats_categories"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    text = (
        "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô**\n\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        "üíá‚Äç‚ôÄÔ∏è –ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥: 0\n"
        "ü©∫ –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ç–µ–ª–æ: 0\n"
        "üõ†Ô∏è –£—Å–ª—É–≥–∏ –∏ –ø–æ–º–æ—â—å: 0\n"
        "üìö –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ: 0\n"
        "üé≠ –î–æ—Å—É–≥ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è: 0"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')


async def catalog_stats_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ - /catalog_stats_popular"""
    if not Config.is_admin(update.effective_user.id):
        return
    
    text = (
        "üèÜ **–¢–û–ü-10 –ü–û–ü–£–õ–Ø–†–ù–´–• –ü–û–°–¢–û–í**\n\n"
        "1. –ü–æ—Å—Ç #123 - 150 –∫–ª–∏–∫–æ–≤\n"
        "2. –ü–æ—Å—Ç #456 - 120 –∫–ª–∏–∫–æ–≤\n"
        "...\n\n"
        "üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')


# ============= CALLBACK HANDLERS =============

async def handle_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    user_id = update.effective_user.id
    
    if action == "next":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Å—Ç—ã
        count = 5
        posts = await catalog_service.get_random_posts(user_id, count=count)
        
        if not posts:
            await query.edit_message_text(
                "‚úÖ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."
            )
            return
        
        await query.message.delete()
        
        for i, post in enumerate(posts, 1):
            await send_catalog_post_callback(query, context, post, i, len(posts))
        
        keyboard = [
            [
                InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {count}", callback_data="catalog:next"),
                InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="catalog:finish")
            ]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "finish":
        await query.edit_message_text(
            "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! üôè\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )
    
    elif action == "restart":
        # –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é
        await catalog_service.reset_session(user_id)
        await query.edit_message_text(
            "üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        )
    
    elif action == "search":
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
        keyboard = []
        for category in CATALOG_CATEGORIES.keys():
            keyboard.append([InlineKeyboardButton(category, callback_data=f"catalog:cat:{category}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog:back_main")])
        
        await query.edit_message_text(
            "üîç **–ü–û–ò–°–ö**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "cat":
        # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        category = ":".join(data[2:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = CATALOG_CATEGORIES.get(category, [])
        
        keyboard = []
        for subcat in subcategories:
            keyboard.append([InlineKeyboardButton(subcat, callback_data=f"catalog:search:{category}:{subcat}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog:search")])
        
        await query.edit_message_text(
            f"üìÇ **{category}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif action == "search" and len(data) > 2:
        # –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = data[2]
        subcategory = data[3] if len(data) > 3 else None
        
        # –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
        posts = await catalog_service.search_posts(category=subcategory or category, limit=10)
        
        if not posts:
            await query.edit_message_text(
                f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subcategory or category}' –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
            )
            return
        
        await query.message.delete()
        
        for i, post in enumerate(posts, 1):
            await send_catalog_post_callback(query, context, post, i, len(posts))
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(posts)}"
        )
    
    elif action == "click":
        # –ö–ª–∏–∫ –ø–æ –ø–æ—Å—Ç—É
        post_id = int(data[2]) if len(data) > 2 else None
        if post_id:
            await catalog_service.increment_clicks(post_id)
            await query.answer("üëç –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω!", show_alert=False)
    
    elif action == "cancel":
        context.user_data.pop('catalog_add', None)
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "cancel_review":
        context.user_data.pop('catalog_review', None)
        await query.edit_message_text("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω")
    
    elif action == "cancel_ad":
        context.user_data.pop('catalog_ad', None)
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif action == "priority_finish":
        # –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        priority_data = context.user_data.get('catalog_priority', {})
        links = priority_data.get('links', [])
        
        if not links:
            await query.edit_message_text("‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏")
            return
        
        count = await catalog_service.set_priority_posts(links)
        
        context.user_data.pop('catalog_priority', None)
        
        await query.edit_message_text(
            f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
            f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ: {count} –∏–∑ {len(links)}"
        )


# ============= TEXT HANDLERS =============

async def handle_catalog_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    if 'catalog_add' in context.user_data:
        data = context.user_data['catalog_add']
        step = data.get('step')
        
        if step == 'link':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
            if not text.startswith('https://t.me/'):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
                return
            
            data['link'] = text
            data['step'] = 'category'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            keyboard = []
            for category in CATALOG_CATEGORIES.keys():
                keyboard.append([InlineKeyboardButton(category, callback_data=f"catalog:addcat:{category}")])
            
            await update.message.reply_text(
                "üìù –®–∞–≥ 2 –∏–∑ 4\n\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif step == 'name':
            data['name'] = text[:255]
            data['step'] = 'tags'
            
            await update.message.reply_text(
                "üìù –®–∞–≥ 4 –∏–∑ 4\n\n"
                "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ 10):\n\n"
                "–ü—Ä–∏–º–µ—Ä: –º–∞–Ω–∏–∫—é—Ä, –≥–µ–ª—å-–ª–∞–∫, –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ"
            )
        
        elif step == 'tags':
            tags = [tag.strip() for tag in text.split(',')[:10]]
            data['tags'] = tags
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            post_id = await catalog_service.add_post(
                user_id=user_id,
                catalog_link=data['link'],
                category=data['category'],
                name=data['name'],
                tags=tags
            )
            
            context.user_data.pop('catalog_add', None)
            
            if post_id:
                await update.message.reply_text(
                    f"‚úÖ **–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥!**\n\n"
                    f"üÜî ID: {post_id}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                    f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(tags)}",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    
    # –û—Ç–∑—ã–≤
    elif 'catalog_review' in context.user_data:
        review_data = context.user_data['catalog_review']
        
        if review_data.get('waiting'):
            # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –ë–î
            post_id = review_data['post_id']
            
            context.user_data.pop('catalog_review', None)
            
            await update.message.reply_text(
                f"‚úÖ **–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üôè",
                parse_mode='Markdown'
            )
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
    elif 'catalog_priority' in context.user_data:
        priority_data = context.user_data['catalog_priority']
        
        if priority_data.get('waiting'):
            if text.startswith('https://t.me/'):
                priority_data['links'].append(text)
                
                count = len(priority_data['links'])
                await update.message.reply_text(
                    f"‚úÖ –°—Å—ã–ª–∫–∞ {count}/10 –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'"
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
    
    # –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
    elif 'catalog_ad' in context.user_data:
        ad_data = context.user_data['catalog_ad']
        step = ad_data.get('step')
        
        if step == 'link':
            if not text.startswith('https://t.me/'):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
                return
            
            ad_data['link'] = text
            ad_data['step'] = 'description'
            
            await update.message.reply_text(
                "üìù –®–∞–≥ 2 –∏–∑ 3\n\n"
                "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã:"
            )
        
        elif step == 'description':
            ad_data['description'] = text
            ad_data['step'] = 'finish'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            post_id = await catalog_service.add_ad_post(
                catalog_link=ad_data['link'],
                description=ad_data['description']
            )
            
            context.user_data.pop('catalog_ad', None)
            
            if post_id:
                await update.message.reply_text(
                    f"‚úÖ **–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                    f"üÜî ID: {post_id}\n\n"
                    f"–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 –ø–æ—Å—Ç–æ–≤.",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def send_catalog_post(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           post: dict, index: int, total: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞"""
    text = (
        f"üìã **–ó–∞–ø–∏—Å—å {index}/{total}**\n\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post['category']}\n"
        f"üìù {post['name']}\n\n"
        f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(post['tags']) if post['tags'] else '–Ω–µ—Ç'}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {post['views']}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=post['catalog_link'], callback_data=f"catalog:click:{post['id']}")],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"catalog:review:{post['id']}")]
    ]
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    await catalog_service.increment_views(post['id'])


async def send_catalog_post_callback(query, context: ContextTypes.DEFAULT_TYPE, 
                                    post: dict, index: int, total: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ callback"""
    text = (
        f"üìã **–ó–∞–ø–∏—Å—å {index}/{total}**\n\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post['category']}\n"
        f"üìù {post['name']}\n\n"
        f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(post['tags']) if post['tags'] else '–Ω–µ—Ç'}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {post['views']}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=post['catalog_link'])],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"catalog:review:{post['id']}")]
    ]
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    await catalog_service.increment_views(post['id'])


__all__ = [
    'catalog_command',
    'search_command',
    'addtocatalog_command',
    'review_command',
    'catalogpriority_command',
    'addcatalogreklama_command',
    'catalog_stats_users_command',
    'catalog_stats_categories_command',
    'catalog_stats_popular_command',
    'handle_catalog_callback',
    'handle_catalog_text'
]
