# -*- coding: utf-8 -*-
"""
TrixActivity System - Instagram/Threads –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω
–°–∏—Å—Ç–µ–º–∞ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª—é—Ç–æ–π "—Ç—Ä–∏–∫—Å–∏–∫–∏"
"""

from datetime import datetime, timedelta
from typing import Dict, Optional, List
import asyncio
import logging

logger = logging.getLogger(__name__)

# ============= –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =============

class TrixikiAccount:
    """–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–∏–∫—Å–∏–∫–∞–º–∏"""
    def __init__(self, user_id: int, username: str):
        self.user_id = user_id
        self.username = username
        self.instagram = None
        self.threads = None
        self.balance = 0
        self.max_balance = 15  # –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç
        self.last_daily_claim = None
        self.frozen_trixiki = 0  # –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–∏–∫—Å–∏–∫–∏
        self.active_functions = {
            'like': True,
            'comment': True,
            'follow': True
        }
        self.enabled = True

class Task:
    """–ó–∞–¥–∞–Ω–∏–µ –≤ –ø—É–ª–µ"""
    def __init__(self, task_id: int, creator_id: int, task_type: str, 
                 content: str, cost: int):
        self.task_id = task_id
        self.creator_id = creator_id
        self.task_type = task_type  # like, comment, follow
        self.content = content
        self.cost = cost
        self.created_at = datetime.now()
        self.status = 'active'  # active, completed, cancelled
        self.performer_id = None
        self.performed_at = None
        self.confirmation_deadline = None

class TrixActivityService:
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"""
    
    def __init__(self):
        self.accounts: Dict[int, TrixikiAccount] = {}
        self.tasks: Dict[int, Task] = {}
        self.pending_confirmations: Dict[int, Dict] = {}
        self.task_counter = 1
        self.freeze_duration = 3 * 3600  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.daily_reward = 10
        self.daily_reset_hour = 0
        
        # –¶–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
        self.prices = {
            'like': 3,
            'comment': 4,
            'follow': 5
        }
        
        # –õ–∏–º–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
        self.limits = {
            'like': 5,  # –º–∞–∫—Å–∏–º—É–º 5 –ø–æ—Å—Ç–æ–≤
            'comment': 2,  # –º–∞–∫—Å–∏–º—É–º 2 –ø–æ—Å—Ç–∞
            'follow': 1  # 1 –∞–∫–∫–∞—É–Ω—Ç
        }
    
    # ============= –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø =============
    
    def register_user(self, user_id: int, username: str) -> TrixikiAccount:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.accounts:
            return self.accounts[user_id]
        
        account = TrixikiAccount(user_id, username)
        self.accounts[user_id] = account
        logger.info(f"User {user_id} registered in TrixActivity")
        return account
    
    def set_social_accounts(self, user_id: int, instagram: str, threads: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        if user_id not in self.accounts:
            return False
        
        account = self.accounts[user_id]
        account.instagram = instagram.lstrip('@')
        account.threads = threads.lstrip('@')
        logger.info(f"User {user_id} set socials: IG={instagram}, Threads={threads}")
        return True
    
    # ============= –ë–ê–õ–ê–ù–° –ò –¢–†–ò–ö–°–ò–ö–ò =============
    
    async def claim_daily_reward(self, user_id: int) -> tuple[bool, int, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É"""
        if user_id not in self.accounts:
            return False, 0, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        now = datetime.now()
        if account.last_daily_claim:
            last_claim = account.last_daily_claim
            if (last_claim.date() == now.date()):
                return False, account.balance, "‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if account.balance >= account.max_balance:
            return False, account.balance, (
                f"üìä –í–∞—à –±–∞–ª–∞–Ω—Å ({account.balance}) –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ ({account.max_balance})"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        reward = min(self.daily_reward, account.max_balance - account.balance)
        account.balance += reward
        account.last_daily_claim = now
        
        return True, account.balance, (
            f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {reward} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {account.balance}/{account.max_balance}"
        )
    
    def get_balance(self, user_id: int) -> tuple[int, int, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å (—Ç–µ–∫—É—â–∏–π, –º–∞–∫—Å, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π)"""
        if user_id not in self.accounts:
            return 0, 15, 0
        
        account = self.accounts[user_id]
        return account.balance, account.max_balance, account.frozen_trixiki
    
    def can_afford_action(self, user_id: int, action: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
        if user_id not in self.accounts:
            return False, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[user_id]
        
        if not account.enabled:
            return False, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        if not account.active_functions.get(action, False):
            return False, f"‚ùå –§—É–Ω–∫—Ü–∏—è '{action}' –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        cost = self.prices.get(action, 0)
        available = account.balance - account.frozen_trixiki
        
        if available < cost:
            return False, (
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!\n"
                f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available}\n"
                f"üí∏ –ù—É–∂–Ω–æ: {cost}"
            )
        
        return True, "‚úÖ"
    
    # ============= –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–ô =============
    
    def create_task(self, user_id: int, task_type: str, links: List[str]) -> tuple[bool, int, str]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        if user_id not in self.accounts:
            return False, 0, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å
        can_afford, msg = self.can_afford_action(user_id, task_type)
        if not can_afford:
            return False, 0, msg
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        max_links = self.limits.get(task_type, 1)
        if len(links) > max_links:
            return False, 0, (
                f"‚ùå –ú–∞–∫—Å–∏–º—É–º {max_links} —Å—Å—ã–ª–æ–∫ –¥–ª—è {task_type}\n"
                f"–í—ã —É–∫–∞–∑–∞–ª–∏: {len(links)}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        cost = self.prices[task_type]
        content = "|".join(links)
        
        task = Task(
            self.task_counter,
            user_id,
            task_type,
            content,
            cost
        )
        
        self.tasks[self.task_counter] = task
        task_id = self.task_counter
        self.task_counter += 1
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∏–∫—Å–∏–∫–∏
        account.balance -= cost
        logger.info(f"Task {task_id} created by user {user_id} (type: {task_type})")
        
        return True, task_id, (
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üÜî ID: {task_id}\n"
            f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {account.balance}/{account.max_balance}"
        )
    
    # ============= –ü–£–õ –ó–ê–î–ê–ù–ò–ô =============
    
    def get_active_tasks(self, user_id: int) -> List[Task]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–∫—Ä–æ–º–µ —Å–≤–æ–∏—Ö)"""
        user_tasks = []
        
        for task in self.tasks.values():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è
            if task.creator_id == user_id:
                continue
            
            # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
            if task.status != 'active':
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            creator = self.accounts.get(task.creator_id)
            if not creator or not creator.active_functions.get(task.task_type):
                continue
            
            user_tasks.append(task)
        
        return user_tasks
    
    # ============= –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ô =============
    
    def perform_task(self, task_id: int, performer_id: int) -> tuple[bool, str]:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"""
        if task_id not in self.tasks:
            return False, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        if performer_id not in self.accounts:
            return False, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        task = self.tasks[task_id]
        account = self.accounts[performer_id]
        
        if task.status != 'active':
            return False, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ"
        
        if task.performer_id is not None:
            return False, "‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        
        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ç—Ä–∏–∫—Å–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        account.frozen_trixiki += task.cost
        
        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        task.performer_id = performer_id
        task.performed_at = datetime.now()
        task.confirmation_deadline = datetime.now() + timedelta(seconds=self.freeze_duration)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.pending_confirmations[task_id] = {
            'creator_id': task.creator_id,
            'performer_id': performer_id,
            'task_id': task_id,
            'created_at': datetime.now(),
            'deadline': task.confirmation_deadline,
            'cost': task.cost
        }
        
        logger.info(f"Task {task_id} performed by user {performer_id}")
        
        return True, (
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!\n"
            f"üÜî Task ID: {task_id}\n"
            f"‚è≥ –°–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤\n"
            f"üí∞ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {task.cost} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"
        )
    
    def confirm_task(self, task_id: int, user_id: int, approve: bool) -> tuple[bool, str]:
        """–°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        if task_id not in self.tasks:
            return False, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        task = self.tasks[task_id]
        
        if task.creator_id != user_id:
            return False, "‚ùå –í—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
        
        if task.performer_id is None:
            return False, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        
        performer = self.accounts.get(task.performer_id)
        creator = self.accounts.get(task.creator_id)
        
        if not performer or not creator:
            return False, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —Ç—Ä–∏–∫—Å–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        performer.frozen_trixiki -= task.cost
        
        if approve:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–∏–∫—Å–∏–∫–∏
            performer.balance += task.cost
            task.status = 'completed'
            
            msg = (
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
                f"üí∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @{performer.username} –ø–æ–ª—É—á–∏–ª {task.cost} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"
            )
        else:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º - –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º
            task.status = 'disputed'
            
            msg = (
                f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
            )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        if task_id in self.pending_confirmations:
            del self.pending_confirmations[task_id]
        
        logger.info(f"Task {task_id} {'approved' if approve else 'rejected'} by creator {user_id}")
        
        return True, msg
    
    async def auto_confirm_expired_tasks(self) -> List[int]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
        confirmed = []
        now = datetime.now()
        
        for task_id, confirmation in list(self.pending_confirmations.items()):
            if confirmation['deadline'] < now:
                task = self.tasks.get(task_id)
                if task and task.status == 'active' and task.performer_id:
                    
                    performer = self.accounts.get(task.performer_id)
                    if performer:
                        # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        performer.frozen_trixiki -= task.cost
                        performer.balance += task.cost
                        task.status = 'completed'
                        confirmed.append(task_id)
                    
                    del self.pending_confirmations[task_id]
        
        if confirmed:
            logger.info(f"Auto-confirmed {len(confirmed)} tasks: {confirmed}")
        
        return confirmed
    
    # ============= –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–û–ö =============
    
    def request_subscription_check(self, user_id: int) -> tuple[bool, str]:
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
        if user_id not in self.accounts:
            return False, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[user_id]
        
        if account.max_balance >= 20:
            return True, "‚úÖ –í–∞—à –ª–∏–º–∏—Ç —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª–µ–Ω (20 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        
        return True, (
            f"üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
            f"‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞:\n"
            f"  ‚Ä¢ Instagram @budapesttrix\n"
            f"  ‚Ä¢ Threads @budapesttrix\n\n"
            f"‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
        )
    
    # ============= –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò =============
    
    def admin_enable_user(self, user_id: int) -> tuple[bool, str]:
        """–í–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.accounts:
            return False, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        self.accounts[user_id].enabled = True
        return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∫–ª—é—á–µ–Ω"
    
    def admin_disable_user(self, user_id: int) -> tuple[bool, str]:
        """–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.accounts:
            return False, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        self.accounts[user_id].enabled = False
        return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–µ–Ω"
    
    def admin_add_trixiki(self, user_id: int, amount: int) -> tuple[bool, str]:
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–∫—Å–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id not in self.accounts:
            return False, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[user_id]
        old_balance = account.balance
        account.balance = min(account.balance + amount, account.max_balance)
        added = account.balance - old_balance
        
        return True, (
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {account.balance}/{account.max_balance}"
        )
    
    def admin_increase_limit(self, user_id: int) -> tuple[bool, str]:
        """–£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ 20"""
        if user_id not in self.accounts:
            return False, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[user_id]
        
        if account.max_balance >= 20:
            return False, "‚ùå –õ–∏–º–∏—Ç —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ"
        
        account.max_balance = 20
        return True, (
            f"‚úÖ –õ–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
            f"üìä –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º: 20 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"
        )
    
    def admin_dispute_report(self, task_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–ø–æ—Ä–µ"""
        if task_id not in self.tasks:
            return "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        task = self.tasks[task_id]
        creator = self.accounts.get(task.creator_id)
        performer = self.accounts.get(task.performer_id)
        
        report = (
            f"üìã –û–¢–ß–ï–¢ –ü–û –°–ü–û–†–£ #{task_id}\n\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator.username if creator else 'unknown'} (ID: {task.creator_id})\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{performer.username if performer else 'unknown'} (ID: {task.performer_id})\n"
            f"üìå –¢–∏–ø: {task.task_type.upper()}\n"
            f"üí∞ –°—É–º–º–∞: {task.cost} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task.performed_at.strftime('%d.%m.%Y %H:%M') if task.performed_at else 'N/A'}\n\n"
            f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {task.content[:100]}...\n"
        )
        
        return report
    
    # ============= –°–¢–ê–¢–ò–°–¢–ò–ö–ê =============
    
    def get_top_users(self, limit: int = 10) -> List[tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∏–∫—Å–∏–∫–∞–º"""
        sorted_users = sorted(
            self.accounts.values(),
            key=lambda a: a.balance,
            reverse=True
        )
        
        return [(u.username, u.balance, u.max_balance) for u in sorted_users[:limit]]
    
    def get_task_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏–π"""
        active = sum(1 for t in self.tasks.values() if t.status == 'active')
        completed = sum(1 for t in self.tasks.values() if t.status == 'completed')
        disputed = sum(1 for t in self.tasks.values() if t.status == 'disputed')
        
        by_type = {}
        for task in self.tasks.values():
            by_type.setdefault(task.task_type, 0)
            by_type[task.task_type] += 1
        
        return {
            'active': active,
            'completed': completed,
            'disputed': disputed,
            'total': len(self.tasks),
            'by_type': by_type,
            'pending_confirmations': len(self.pending_confirmations)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
trix_activity = TrixActivityService()
