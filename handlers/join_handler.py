# handlers/join_handler.py
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from config import Config
from services.join_stats_db import increment, get, get_all

logger = logging.getLogger(__name__)

# –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
GROUPS = {
    "chat": {
        "link": "https://t.me/tgchatxxx",
        "title": "üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç",
        "id": -1002919380244,
    },
    "public": {
        "link": "https://t.me/snghu",
        "title": "üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç",
        "id": -1002743668534,
    },
    "catalog": {
        "link": "https://t.me/catalogtrix",
        "title": "üôÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –ë—É–¥–∞–ø–µ—à—Ç",
        "id": -1002601716810,
    },
    "marketplace": {
        "link": "https://t.me/hungarytrade",
        "title": "üïµüèª‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º",
        "id": -1003033694255,
    },
    "citytoppeople": {
        "link": "https://t.me/socialuck",
        "title": "üèÜ Top Budapest üì± Social üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –õ—é–¥–∏ –ë—É–¥–∞–ø–µ—à—Ç",
        "id": -1003088023508,
    },
    "citypartners": {
        "link": "https://t.me/budapestpartners",
        "title": "Budapest üì≥ Partners",
        "id": -1003033694255,
    },
    "budapesocial": {
        "link": "https://t.me/budapesocial",
        "title": "BudapeSocial",
        "id": -1003114019170,
    },
}

def _is_admin(update: Update) -> bool:
    user = update.effective_user
    return bool(user and Config.is_admin(user.id))

async def _send_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str):
    if not _is_admin(update):
        try:
            await update.effective_message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        except:
            pass
        return

    group = GROUPS.get(key)
    if not group:
        await update.effective_message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    text = f"{group['title']}\n–°—Å—ã–ª–∫–∞: {group['link']}\nId: {group['id']}"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=group['link'])],
        [InlineKeyboardButton("‚úÖ –Ø –ø–µ—Ä–µ—à—ë–ª", callback_data=f"join_ack:{key}")]
    ])

    await update.effective_message.reply_text(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥—ã
async def chat_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_group_message(update, context, "chat")

async def public_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_group_message(update, context, "public")

async def catalog_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_group_message(update, context, "catalog")

async def marketplace_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_group_message(update, context, "marketplace")

async def join_citytoppeople_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_group_message(update, context, "citytoppeople")

async def join_citypartners_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_group_message(update, context, "citypartners")

async def join_budapesocial_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_group_message(update, context, "budapesocial")


# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø–µ—Ä–µ—à—ë–ª"
async def handle_join_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data:
        return

    if not query.data.startswith("join_ack:"):
        return

    key = query.data.split(":", 1)[1]
    if key not in GROUPS:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞", show_alert=True)
        return

    # –ü–æ–¥—Å—á—ë—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –ë–î —Å–µ—Ä–≤–∏—Å
    try:
        new_value = await increment(key)
        await query.answer(f"–°–ø–∞—Å–∏–±–æ! –û—Ç–º–µ—á–µ–Ω–æ: {new_value}", show_alert=False)
    except Exception as e:
        logger.error(f"Error incrementing join stats: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


# –ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
async def groupstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        try:
            await update.effective_message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        except:
            pass
        return

    data = await get_all()
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    lines = []
    for key, meta in GROUPS.items():
        cnt = data.get(key, 0)
        lines.append(f"{meta['title']}: {cnt} –ø–µ—Ä–µ—Ö–æ–¥(–æ–≤)")
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º:\n\n" + "\n".join(lines)
    await update.effective_message.reply_text(text)
