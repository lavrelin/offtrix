import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from config import Config
from services.join_stats_db import (
    register_join_user, has_user_joined, get_all_unique_counts
)

logger = logging.getLogger(__name__)

# ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ (GROUPS, –∫–æ–º–∞–Ω–¥—ã –∏ —Ç.–¥.) ...

# ====== CALLBACK HANDLER –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –í–°–¢–£–ü–õ–ï–ù–ò–Ø ======
async def handle_join_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback: join_ack:group_key:user_id
        data = query.data
        if not data.startswith('join_ack:'):
            return
            
        parts = data.split(':')
        if len(parts) != 3:
            return
            
        group_key = parts[1]
        user_id = int(parts[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if query.from_user.id != user_id:
            await query.edit_message_text("‚ùå –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        if group_key not in GROUPS:
            await query.edit_message_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        group = GROUPS[group_key]
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        already_joined = await has_user_joined(group_key, user_id)
        if already_joined:
            await query.edit_message_text(
                f"‚úÖ –í—ã —É–∂–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ {group['title']}!\n\n"
                f"–°—Å—ã–ª–∫–∞: https://t.me/{group['link']}"
            )
        else:
            success = await register_join_user(group_key, user_id)
            if success:
                await query.edit_message_text(
                    f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {group['title']}!\n\n"
                    f"‚úÖ –í–∞—à –ø–µ—Ä–µ—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω.\n"
                    f"–°—Å—ã–ª–∫–∞: https://t.me/{group['link']}"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞")
                
    except Exception as e:
        logger.error(f"Error in handle_join_callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

# ====== –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø join_menu –° –ö–ù–û–ü–ö–ê–ú–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø ======
async def join_menu_with_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é /join —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    stats = await get_all_unique_counts()
    
    text = "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n"
    for key, group in GROUPS.items():
        count = stats.get(key, 0)
        text += f"‚Ä¢ <b>{group['title']}</b> ‚Äî <i>{count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>\n"
    
    keyboard = []
    for key, group in GROUPS.items():
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É
        join_btn = InlineKeyboardButton(
            f"üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ {group['title']}", 
            url=f"https://t.me/{group['link']}"
        )
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        confirm_btn = InlineKeyboardButton(
            "‚úÖ –Ø –≤—Å—Ç—É–ø–∏–ª(–∞)", 
            callback_data=f"join_ack:{key}:{user_id}"
        )
        keyboard.append([join_btn])
        keyboard.append([confirm_btn])
    
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(
        text,
        reply_markup=markup,
        parse_mode="HTML"
    )
