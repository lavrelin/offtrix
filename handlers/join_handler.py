import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from config import Config
from services.join_stats_db import (
    register_join_user, has_user_joined, get_join_count, get_all_unique_counts
)

logger = logging.getLogger(__name__)

# –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –≥—Ä—É–ø–ø! –¢–æ–ª—å–∫–æ username —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–µ–∑ https://t.me/
GROUPS = {
    "chat": {
        "link": "tgchatxxx",
        "title": "üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç",
        "desc": "–ì–ª–∞–≤–Ω—ã–π —á–∞—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –ë—É–¥–∞–ø–µ—à—Ç-–∫–æ–º—å—é–Ω–∏—Ç–∏.",
        "id": -1002919380244,
    },
    "public": {
        "link": "snghu",
        "title": "üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç",
        "desc": "–ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
        "id": -1002743668534,
    },
    "catalog": {
        "link": "catalogtrix",
        "title": "üôÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –ë—É–¥–∞–ø–µ—à—Ç",
        "desc": "–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥, –º–∞—Å—Ç–µ—Ä–æ–≤, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.",
        "id": -1002601716810,
    },
    "marketplace": {
        "link": "hungarytrade",
        "title": "üïµüèª‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç –ö—É–ø–ª—é/–û—Ç–¥–∞–º/–ü—Ä–æ–¥–∞–º",
        "desc": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≤–µ–Ω–≥–µ—Ä—Å–∫–æ–π –∫–æ–º—å—é–Ω–∏—Ç–∏.",
        "id": -1003033694255,
    },
    "citytoppeople": {
        "link": "socialuck",
        "title": "üèÜ Top Budapest üì± Social üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –õ—é–¥–∏ –ë—É–¥–∞–ø–µ—à—Ç",
        "desc": "–õ—É—á—à–∏–µ –ª—é–¥–∏ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–∞!",
        "id": -1003088023508,
    },
    "citypartners": {
        "link": "budapestpartners",
        "title": "Budapest üì≥ Partners",
        "desc": "–ü–∞—Ä—Ç–Ω–µ—Ä—ã –∏ –±–∏–∑–Ω–µ—Å-—Å–≤—è–∑–∏.",
        "id": -1003033694255,
    },
    "budapesocial": {
        "link": "budapesocial",
        "title": "BudaPesü¶Ñ",
        "desc": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –∏ –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º.",
        "id": -1003114019170,
    },
}

def _is_admin(update: Update) -> bool:
    user = update.effective_user
    return bool(user and Config.is_admin(user.id))

# ============ –ö–†–ê–°–ò–í–û–ï –ú–ï–ù–Æ /join ============
async def join_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = await get_all_unique_counts()
    text = "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n"
    for key, group in GROUPS.items():
        count = stats.get(key, 0)
        text += f"‚Ä¢ <b>{group['title']}</b> ‚Äî <i>{count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>\n"
    keyboard = []
    for key, group in GROUPS.items():
        join_btn = InlineKeyboardButton(
            f"üîó –í–æ–π—Ç–∏", url=f"https://t.me/{group['link']}?start={user_id}_{key}"
        )
        desc_btn = InlineKeyboardButton(
            "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"join_desc:{key}"
        )
        keyboard.append([join_btn, desc_btn])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(
        text,
        reply_markup=markup,
        parse_mode="HTML"
    )

# ============ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ============
async def handle_desc_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data.startswith("join_desc:"):
        return
    key = query.data.split(":", 1)[1]
    group = GROUPS.get(key)
    if not group:
        await query.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await query.answer()
    desc = group.get("desc", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")
    text = (
        f"<b>{group['title']}</b>\n"
        f"{desc}\n\n"
        f"–°—Å—ã–ª–∫–∞: <a href='https://t.me/{group['link']}?start={query.from_user.id}_{key}'>–í–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É</a>"
    )
    await query.edit_message_text(
        text, parse_mode="HTML", disable_web_page_preview=True
    )

# ============ /join_chat ============
async def join_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["chat"]
    link = f"https://t.me/{group['link']}?start={user_id}_chat"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –í–æ–π—Ç–∏ –≤ —á–∞—Ç", url=link)],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="join_desc:chat")]
    ])
    await update.effective_message.reply_text(
        f"{group['title']}\n\n{group['desc']}\n\n–ü–µ—Ä–µ—Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (—É–Ω–∏–∫–∞–ª—å–Ω–æ).",
        reply_markup=keyboard
    )

# ============ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ============
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args and "_" in args[0]:
        try:
            user_id, key = args[0].split("_", 1)
            user_id = int(user_id)
            if key in GROUPS and update.effective_user.id == user_id:
                already = await has_user_joined(key, user_id)
                if already:
                    await update.effective_message.reply_text("‚úÖ –í–∞—à –ø–µ—Ä–µ—Ö–æ–¥ —É–∂–µ —É—á—Ç–µ–Ω!")
                else:
                    ok = await register_join_user(key, user_id)
                    if ok:
                        await update.effective_message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø–µ—Ä–µ—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω! üéâ")
                    else:
                        await update.effective_message.reply_text("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —É–∂–µ –±—ã–ª —É—á—Ç–µ–Ω —Ä–∞–Ω–µ–µ!")
                # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                return
        except Exception:
            pass
    await update.effective_message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")

# ============ /groupstats –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ============
async def groupstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not (user and Config.is_admin(user.id)):
        await update.effective_message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    stats = await get_all_unique_counts()
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:\n\n"
    for key, group in GROUPS.items():
        count = stats.get(key, 0)
        text += f"{group['title']}: {count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥(–æ–≤)\n"
    await update.effective_message.reply_text(text)
