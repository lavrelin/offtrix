import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from config import Config
from services.join_stats_db import (
    register_join_user, has_user_joined, get_all_unique_counts
)

logger = logging.getLogger(__name__)

GROUPS = {
    "chat": {
        "link": "tgchatxxx",
        "title": "üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç",
        "id": -1002919380244,
    },
    "public": {
        "link": "snghu",
        "title": "üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç",
        "id": -1002743668534,
    },
    "catalog": {
        "link": "catalogtrix",
        "title": "üôÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –ë—É–¥–∞–ø–µ—à—Ç",
        "id": -1002601716810,
    },
    "marketplace": {
        "link": "hungarytrade",
        "title": "üïµüèª‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç –ö—É–ø–ª—é/–û—Ç–¥–∞–º/–ü—Ä–æ–¥–∞–º",
        "id": -1003033694255,
    },
    "citytoppeople": {
        "link": "socialuck",
        "title": "üèÜ Top Budapest üì± Social üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –õ—é–¥–∏ –ë—É–¥–∞–ø–µ—à—Ç",
        "id": -1003088023508,
    },
    "citypartners": {
        "link": "budapestpartners",
        "title": "Budapest üì≥ Partners",
        "id": -1003033694255,
    },
    "budapesocial": {
        "link": "budapesocial",
        "title": "BudaPesü¶Ñ",
        "id": -1003114019170,
    },
}

def _get_btn(text, url):
    return [InlineKeyboardButton(text, url=url)]

# ====== –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è) ======
async def chat_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["chat"]
    link = f"https://t.me/{group['link']}?start={user_id}_chat"
    keyboard = InlineKeyboardMarkup([_get_btn("üîó –í–æ–π—Ç–∏ –≤ —á–∞—Ç", link)])
    await update.effective_message.reply_text(
        f"{group['title']}",
        reply_markup=keyboard
    )

async def public_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["public"]
    link = f"https://t.me/{group['link']}?start={user_id}_public"
    keyboard = InlineKeyboardMarkup([_get_btn("üîó –í–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", link)])
    await update.effective_message.reply_text(
        f"{group['title']}",
        reply_markup=keyboard
    )

async def catalog_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["catalog"]
    link = f"https://t.me/{group['link']}?start={user_id}_catalog"
    keyboard = InlineKeyboardMarkup([_get_btn("üîó –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", link)])
    await update.effective_message.reply_text(
        f"{group['title']}",
        reply_markup=keyboard
    )

async def marketplace_join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["marketplace"]
    link = f"https://t.me/{group['link']}?start={user_id}_marketplace"
    keyboard = InlineKeyboardMarkup([_get_btn("üîó –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", link)])
    await update.effective_message.reply_text(
        f"{group['title']}",
        reply_markup=keyboard
    )

async def join_citytoppeople_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["citytoppeople"]
    link = f"https://t.me/{group['link']}?start={user_id}_citytoppeople"
    keyboard = InlineKeyboardMarkup([_get_btn("üîó –í–æ–π—Ç–∏ –≤ —Ç–æ–ø-–ª—é–¥–µ–π", link)])
    await update.effective_message.reply_text(
        f"{group['title']}",
        reply_markup=keyboard
    )

async def join_citypartners_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["citypartners"]
    link = f"https://t.me/{group['link']}?start={user_id}_citypartners"
    keyboard = InlineKeyboardMarkup([_get_btn("üîó –í–æ–π—Ç–∏ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—ã", link)])
    await update.effective_message.reply_text(
        f"{group['title']}",
        reply_markup=keyboard
    )

async def join_budapesocial_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group = GROUPS["budapesocial"]
    link = f"https://t.me/{group['link']}?start={user_id}_budapesocial"
    keyboard = InlineKeyboardMarkup([_get_btn("üîó –í–æ–π—Ç–∏ –≤ Budapesocial", link)])
    await update.effective_message.reply_text(
        f"{group['title']}",
        reply_markup=keyboard
    )

# ====== –ú–µ–Ω—é—à–∫–∞ /join –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π ======
async def join_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = await get_all_unique_counts()
    text = "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n"
    for key, group in GROUPS.items():
        count = stats.get(key, 0)
        text += f"‚Ä¢ <b>{group['title']}</b> ‚Äî <i>{count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>\n"
    keyboard = []
    for key, group in GROUPS.items():
        join_btn = InlineKeyboardButton(
            f"üîó –í–æ–π—Ç–∏", url=f"https://t.me/{group['link']}?start={user_id}_{key}"
        )
        keyboard.append([join_btn])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(
        text,
        reply_markup=markup,
        parse_mode="HTML"
    )

# ====== /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è —É—á—ë—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ ======
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args and "_" in args[0]:
        try:
            user_id, key = args[0].split("_", 1)
            user_id = int(user_id)
            if key in GROUPS and update.effective_user.id == user_id:
                already = await has_user_joined(key, user_id)
                if already:
                    await update.effective_message.reply_text("‚úÖ –í–∞—à –ø–µ—Ä–µ—Ö–æ–¥ —É–∂–µ —É—á—Ç–µ–Ω!")
                else:
                    ok = await register_join_user(key, user_id)
                    if ok:
                        await update.effective_message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø–µ—Ä–µ—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω! üéâ")
                    else:
                        await update.effective_message.reply_text("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —É–∂–µ –±—ã–ª —É—á—Ç–µ–Ω —Ä–∞–Ω–µ–µ!")
                return
        except Exception:
            pass
    await update.effective_message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")

# ====== /groupstats –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ======
async def groupstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not (user and Config.is_admin(user.id)):
        await update.effective_message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    stats = await get_all_unique_counts()
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:\n\n"
    for key, group in GROUPS.items():
        count = stats.get(key, 0)
        text += f"{group['title']}: {count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥(–æ–≤)\n"
    await update.effective_message.reply_text(text)

# ====== CALLBACK HANDLER –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –í–°–¢–£–ü–õ–ï–ù–ò–Ø ======
async def handle_join_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è!")
    except Exception as e:
        logger.error(f"Error in handle_join_callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
