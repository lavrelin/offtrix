# -*- coding: utf-8 -*-
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from data.user_data import ban_user, unban_user, mute_user, unmute_user, get_banned_users, get_user_by_username, get_user_by_id, get_top_users, get_user_stats
from services.admin_notifications import admin_notifications
from utils.validators import parse_time
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

# ============= MODERATION CALLBACK HANDLERS =============

async def handle_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle moderation callbacks with improved error handling"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"Moderation callback from user {user_id}: {query.data}")
    
    if not Config.is_moderator(user_id):
        await query.answer("üëÆ What?", show_alert=True)
        logger.warning(f"Access denied for user {user_id}")
        return
    
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    logger.info(f"Moderation: action={action}, post_id={post_id}, moderator={user_id}")
    
    if not post_id:
        logger.error(f"Missing post_id in callback: {query.data}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    if action == "approve":
        await start_approve_process(update, context, post_id, chat=False)
    elif action == "approve_chat":
        await start_approve_process(update, context, post_id, chat=True)
    elif action == "reject":
        await start_reject_process(update, context, post_id)
    else:
        logger.error(f"Unknown moderation action: {action}")
        await query.edit_message_text("ü§° –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç...")

async def handle_moderation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input from moderators"""
    user_id = update.effective_user.id
    
    logger.info(f"Moderation text from user {user_id}")
    
    if not Config.is_moderator(user_id):
        logger.warning(f"Non-moderator {user_id} tried to send moderation text")
        return
    
    waiting_for = context.user_data.get('mod_waiting_for')
    logger.info(f"Moderator {user_id} waiting_for: {waiting_for}")
    
    if waiting_for == 'approve_link':
        await process_approve_with_link(update, context)
    elif waiting_for == 'reject_reason':
        await process_reject_with_reason(update, context)
    else:
        logger.info(f"Moderator {user_id} sent text but not in moderation process")

async def start_approve_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, chat: bool = False):
    """Start approval process"""
    try:
        logger.info(f"Starting approve process for post {post_id}, chat={chat}")
        
        from services.db import db
        if not db.session_maker:
            logger.error("Database not available")
            await update.callback_query.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        try:
            from models import Post
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(select(Post).where(Post.id == post_id))
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"‚ùå Post {post_id} not found")
                    await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                logger.info(f"‚úÖ Found post {post_id}, user {post.user_id}")
                
        except Exception as db_error:
            logger.error(f"Database error: {db_error}", exc_info=True)
            await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ë–î", show_alert=True)
            return
        
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = post.user_id
        context.user_data['mod_waiting_for'] = 'approve_link'
        context.user_data['mod_is_chat'] = chat
        
        destination = "—á–∞—Ç–µ (–±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ)" if chat else "–∫–∞–Ω–∞–ª–µ"
        
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
            logger.info("Removed buttons from moderation message")
        except Exception as e:
            logger.warning(f"Could not remove buttons: {e}")
        
        try:
            original_text = update.callback_query.message.text
            updated_text = f"{original_text}\n\n‚è≥ –í –û–ë–†–ê–ë–û–¢–ö–ï –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{update.effective_user.username or 'Unknown'}"
            await update.callback_query.edit_message_text(text=updated_text)
        except Exception as e:
            logger.warning(f"Could not update message text: {e}")
        
        instruction_text = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ\n\n"
            f"‚ö°Ô∏è Post ID: {post_id}\n"
            f"üôãüèº‚Äç‚ôÇÔ∏è User ID: {post.user_id}\n"
            f"üé¢ –ü–æ—Å—Ç –¥–ª—è: {destination}\n\n"
            f"üö® –ê–≤—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã–π –ø–æ—Å—Ç\n"
            f"‚òÑÔ∏è –°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞üßè‚Äç‚ôÇÔ∏è\n\n"
            f"üê¶‚Äçüî• –¢–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É ‚ÄºÔ∏è–û–î–ù–ò–ú –°–û–û–ë–©–ï–ù–ò–ï–ú‚ÄºÔ∏è–¢—Ä–∏–∫—Å—É –≤ –õ–°"
        )
        
        try:
            await context.bot.send_message(chat_id=update.effective_user.id, text=instruction_text)
            logger.info(f"‚úÖ Sent instruction to moderator {update.effective_user.id}")
        except Exception as send_error:
            logger.error(f"‚ùå Could not send to PM: {send_error}")
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚ö†Ô∏è @{update.effective_user.username or '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'}, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ /start!\n\n{instruction_text}",
                    reply_to_message_id=update.callback_query.message.message_id
                )
            except Exception as group_error:
                logger.error(f"Could not send to group: {group_error}")
        
    except Exception as e:
        logger.error(f"Error starting approve: {e}", exc_info=True)

async def start_reject_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Start rejection process"""
    try:
        logger.info(f"Starting reject process for post {post_id}")
        
        from services.db import db
        if not db.session_maker:
            await update.callback_query.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        from models import Post
        from sqlalchemy import select
        
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = post.user_id
        context.user_data['mod_waiting_for'] = 'reject_reason'
        
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
        except:
            pass
        
        instruction_text = (
            f"üíî –û—Ç–∫–∞–∑\n\n"
            f"‚òÄÔ∏è Post ID: {post_id}\n\n"
            f"üë®üèº‚Äç‚öñÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞‚ùóÔ∏è"
        )
        
        try:
            await context.bot.send_message(chat_id=update.effective_user.id, text=instruction_text)
        except:
            pass
        
    except Exception as e:
        logger.error(f"Error starting reject: {e}", exc_info=True)

async def process_approve_with_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process approval with link"""
    try:
        link = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        is_chat = context.user_data.get('mod_is_chat', False)
        
        if not post_id or not user_id:
            await update.message.reply_text("üëπ –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if not link.startswith('https://t.me/'):
            await update.message.reply_text("–ì–æ—Ä–∏—Ç...ü§¨.–ü–æ—Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª‚ùóÔ∏è")
            return
        
        from services.db import db
        from models import Post, PostStatus
        from sqlalchemy import select
        
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            post.status = PostStatus.APPROVED
            await session.commit()
        
        destination_text = "—á–∞—Ç–µ" if is_chat else "–∫–∞–Ω–∞–ª–µ"
        user_notified = False
        
        try:
            success_keyboard = [
                [InlineKeyboardButton("üë• –ü–æ—Å—Ç", url=link)],
                [InlineKeyboardButton("ü´Ç –ß–∞—Ç", url="https://t.me/tgchatxxx")]
            ]
            
            user_message = (
                f"üì± –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞\n\n"
                f"üì≤ –í–∞—à –ø–æ—Å—Ç –≤ {destination_text}.\n\n"
                f"ü§≥üèº –°—Å—ã–ª–∫–∞: {link}"
            )
            
            await context.bot.send_message(
                chat_id=user_id,
                text=user_message,
                reply_markup=InlineKeyboardMarkup(success_keyboard)
            )
            
            user_notified = True
            
        except Exception as notify_error:
            logger.error(f"Error notifying user: {notify_error}")
        
        if user_notified:
            await update.message.reply_text(f"üü© –ó–∞—è–≤–∫–∞ OK\n\nUSER –≤ –∫—É—Ä—Å–µ ‚úÖ\nPost ID: {post_id}")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ OK, –Ω–æ user –Ω–µ –∑–Ω–∞–µ—Ç –æ–± —ç—Ç–æ–º‚ùóÔ∏è\nPost ID: {post_id}")
        
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        context.user_data.pop('mod_is_chat', None)
        
    except Exception as e:
        logger.error(f"Error processing approval: {e}", exc_info=True)
        await update.message.reply_text("ü§¶ ERROR‚ÄºÔ∏è")

async def process_reject_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process rejection with reason"""
    try:
        reason = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        
        if not post_id or not user_id:
            await update.message.reply_text("üëπ –û—à–∏–±–∫–∞ - –Ω–µ—Ç—É –∏–Ω—Ñ—ã")
            return
        
        if len(reason) < 5:
            await update.message.reply_text("5Ô∏è‚É£ —Å–∏–º–≤–æ–ª–æ–≤ –º–∏–Ω–∏–º—É–º ")
            return
        
        from services.db import db
        from models import Post, PostStatus
        from sqlalchemy import select
        
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.message.reply_text("üí® –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            post.status = PostStatus.REJECTED
            await session.commit()
        
        try:
            user_message = (
                f"‚òπÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                f"ü§• –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {reason}\n\n"
                f"üò≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
            )
            
            await context.bot.send_message(chat_id=user_id, text=user_message)
            await update.message.reply_text(f"üõë –ó–∞—è–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ωüì≠\nPost ID: {post_id}")
            
        except Exception as notify_error:
            logger.error(f"Error notifying user: {notify_error}")
            await update.message.reply_text(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–æ user –Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ωüì™")
        
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        
    except Exception as e:
        logger.error(f"Error processing rejection: {e}", exc_info=True)

# ============= BASIC MODERATION COMMANDS =============

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ban user"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("üöî –í–∏—É-–≤–∏—É-–≤–∏—É")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –ø—Ä–∏—á–∏–Ω–∞")
        return
    
    username = context.args[0].lstrip('@')
    reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    user_data = get_user_by_username(username)
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    ban_user(user_data['id'], reason)
    
    await update.message.reply_text(f"üßè‚Äç‚ôÇÔ∏è @{username} —Ç–µ–ø–µ—Ä—å baned\n–ü–æ—Ç–æ–º—É —á—Ç–æ: {reason}")
    
    await admin_notifications.notify_ban(
        username=username,
        user_id=user_data['id'],
        reason=reason,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unban user"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("üßñ‚Äç‚ôÄÔ∏è –ë–µ–∑ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @username")
        return
    
    username = context.args[0].lstrip('@')
    user_data = get_user_by_username(username)
    
    if not user_data:
        await update.message.reply_text("üßê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ")
        return
    
    unban_user(user_data['id'])
    await update.message.reply_text(f"üôãüèº‚Äç‚ôÇÔ∏è @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω")

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mute user"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("üôá –ü–æ–Ω–∏–º–∞—é... –Ω–æ –Ω–µ–ª—å–∑—è")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username 10m")
        return
    
    username = context.args[0].lstrip('@')
    time_str = context.args[1]
    
    seconds = parse_time(time_str)
    if not seconds:
        await update.message.reply_text("‚åöÔ∏è –§–æ—Ä–º–∞—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π")
        return
    
    user_data = get_user_by_username(username)
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    until = datetime.now() + timedelta(seconds=seconds)
    mute_user(user_data['id'], until)
    
    await update.message.reply_text(f"‚úÖ @{username} –∑–∞–º—É—á–µ–Ω –Ω–∞ {time_str}")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unmute user"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("ü§ê mmm... –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute @username")
        return
    
    username = context.args[0].lstrip('@')
    user_data = get_user_by_username(username)
    
    if not user_data:
        await update.message.reply_text("ü§∑–ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
        return
    
    unmute_user(user_data['id'])
    await update.message.reply_text(f"‚úÖ @{username} —Ä–∞–∑–º—É—á–µ–Ω")

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show banned users"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("ü§¨ –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    banned = get_banned_users()
    
    if not banned:
        await update.message.reply_text("üõ£Ô∏èBanList –ø—É—Å—Ç–æ–π")
        return
    
    text = f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned)}\n\n"
    for user in banned[:20]:
        text += f"‚Ä¢ @{user['username']} - {user.get('ban_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    
    await update.message.reply_text(text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bot stats"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –ù–µ–ª—å–∑—è")
        return
    
    stats = get_user_stats()
    
    text = (
        f"üíπ Stats\n\n"
        f"üë• Users: {stats['total_users']}\n"
        f"üé° Active 24: {stats['active_24h']}\n"
        f"üíÉ Active 7d: {stats['active_7d']}\n"
        f"üë®üèº‚Äçüíª Messages: {stats['total_messages']}\n"
        f"üë©‚Äç‚öñÔ∏è Baned: {stats['banned_count']}\n"
        f"ü§∑üèª‚Äç‚ôÄÔ∏è Muted: {stats['muted_count']}"
    )
    
    await update.message.reply_text(text)

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show top users"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("üöó –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ")
        return
    
    limit = 10
    if context.args and context.args[0].isdigit():
        limit = int(context.args[0])
    
    top_users = get_top_users(limit)
    
    text = f"üèÜ Top {limit} users\n\n"
    for i, user in enumerate(top_users, 1):
        text += f"{i}. @{user['username']} - {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(text)

async def lastseen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show last seen"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("ü§£ –£ —Ç–µ–±—è –Ω–µ—Ç—É –ø—Ä–∞–≤")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lastseen @username")
        return
    
    username = context.args[0].lstrip('@')
    user_data = get_user_by_username(username)
    
    if not user_data:
        await update.message.reply_text("ü•µ –ü–æ–∏—Å–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π")
        return
    
    last_activity = user_data['last_activity'].strftime('%d.%m.%Y %H:%M')
    
    await update.message.reply_text(f"‚ö°Ô∏è @{username}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}")
