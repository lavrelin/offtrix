from telegram import Update, ChatPermissions
from telegram.ext import ContextTypes
from config import Config
from data.user_data import user_data, get_user_by_username, get_user_by_id
from utils.validators import parse_time
from datetime import datetime, timedelta
import logging
import asyncio

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á lockdown
lockdown_tasks = {}

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–µ–ø–ª–∞–π)"""
    if not Config.is_moderator(update.effective_user.id):
        # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –õ–°
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not update.message.reply_to_message:
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
        return
    
    try:
        await update.message.reply_to_message.delete()
        await update.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
        logger.info(f"Message deleted by {update.effective_user.id}")
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def purge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not update.message.reply_to_message:
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
        return
    
    try:
        start_id = update.message.reply_to_message.message_id
        end_id = update.message.message_id
        chat_id = update.effective_chat.id
        
        deleted_count = 0
        for msg_id in range(start_id, end_id + 1):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                deleted_count += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except:
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        result_msg = await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        await asyncio.sleep(5)
        await result_msg.delete()
        
        logger.info(f"Purged {deleted_count} messages by {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error in purge command: {e}")
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")

async def slowmode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/slowmode —Å–µ–∫—É–Ω–¥—ã`\n"
            "–ü—Ä–∏–º–µ—Ä: `/slowmode 30` (30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)\n"
            "`/slowmode 0` - –æ—Ç–∫–ª—é—á–∏—Ç—å",
            parse_mode='Markdown'
        )
        return
    
    seconds = int(context.args[0])
    
    try:
        await context.bot.set_chat_permissions(
            chat_id=update.effective_chat.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True
            )
        )
        
        if seconds > 0:
            await update.message.reply_text(
                f"üêå **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω**: {seconds} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚úÖ **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω**", parse_mode='Markdown')
            
        logger.info(f"Slowmode set to {seconds}s by {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error setting slowmode: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞")

async def noslowmode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    try:
        await context.bot.set_chat_permissions(
            chat_id=update.effective_chat.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_invite_users=True
            )
        )
        await update.message.reply_text("‚úÖ **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω**", parse_mode='Markdown')
        logger.info(f"Slowmode disabled by {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error disabling slowmode: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞")

async def lockdown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞ –Ω–∞ –≤—Ä–µ–º—è"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/lockdown –≤—Ä–µ–º—è`\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/lockdown 10m` - –Ω–∞ 10 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `/lockdown 1h` - –Ω–∞ 1 —á–∞—Å\n"
            "‚Ä¢ `/lockdown off` - –æ—Ç–∫–ª—é—á–∏—Ç—å",
            parse_mode='Markdown'
        )
        return
    
    chat_id = update.effective_chat.id
    
    if context.args[0].lower() == 'off':
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id in lockdown_tasks:
            lockdown_tasks[chat_id].cancel()
            del lockdown_tasks[chat_id]
        
        try:
            await context.bot.set_chat_permissions(
                chat_id=chat_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True
                )
            )
            await update.message.reply_text("üîì **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞ —Å–Ω—è—Ç–∞**", parse_mode='Markdown')
            logger.info(f"Lockdown disabled by {update.effective_user.id}")
        except Exception as e:
            logger.error(f"Error disabling lockdown: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    time_seconds = parse_time(context.args[0])
    if not time_seconds:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    try:
        # –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞
        await context.bot.set_chat_permissions(
            chat_id=chat_id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False
            )
        )
        
        minutes = time_seconds // 60
        await update.message.reply_text(
            f"üîí **–ß–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç**",
            parse_mode='Markdown'
        )
        
        logger.info(f"Lockdown enabled for {minutes}m by {update.effective_user.id}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        async def unlock_after_delay():
            try:
                await asyncio.sleep(time_seconds)
                await context.bot.set_chat_permissions(
                    chat_id=chat_id,
                    permissions=ChatPermissions(
                        can_send_messages=True,
                        can_send_media_messages=True,
                        can_send_polls=True,
                        can_send_other_messages=True
                    )
                )
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="üîì **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç–∞**",
                    parse_mode='Markdown'
                )
                if chat_id in lockdown_tasks:
                    del lockdown_tasks[chat_id]
                logger.info(f"Lockdown auto-disabled for chat {chat_id}")
            except asyncio.CancelledError:
                logger.info(f"Lockdown task cancelled for chat {chat_id}")
            except Exception as e:
                logger.error(f"Error in lockdown auto-unlock: {e}")
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id in lockdown_tasks:
            lockdown_tasks[chat_id].cancel()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        lockdown_tasks[chat_id] = asyncio.create_task(unlock_after_delay())
        
    except Exception as e:
        logger.error(f"Error in lockdown: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞: {e}")

async def antiinvite_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç —Å—Å—ã–ª–æ–∫-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/antiinvite on/off`", parse_mode='Markdown')
        return
    
    action = context.args[0].lower()
    
    from handlers.message_handler import chat_settings
    
    if action == 'on':
        chat_settings['antiinvite'] = True
        await update.message.reply_text("üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤–∫–ª—é—á–µ–Ω–∞**", parse_mode='Markdown')
        logger.info(f"Antiinvite enabled by {update.effective_user.id}")
    elif action == 'off':
        chat_settings['antiinvite'] = False
        await update.message.reply_text("‚úÖ **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞**", parse_mode='Markdown')
        logger.info(f"Antiinvite disabled by {update.effective_user.id}")
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `on` –∏–ª–∏ `off`", parse_mode='Markdown')

async def tagall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not Config.is_admin(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if update.effective_chat.type == 'private':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    
    message = ' '.join(context.args) if context.args else "–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º!"
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = [
        f"@{data['username']}" 
        for data in user_data.values() 
        if not data.get('banned') and data.get('username') and not data['username'].startswith('ID_')
    ][:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    if not active_users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    chunk_size = 20
    chunks = [active_users[i:i + chunk_size] for i in range(0, len(active_users), chunk_size)]
    
    await update.message.reply_text(f"üì¢ **{message}**", parse_mode='Markdown')
    
    for chunk in chunks:
        await update.message.reply_text(" ".join(chunk))
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    logger.info(f"Tagall used by {update.effective_user.id}, tagged {len(active_users)} users")

async def admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not Config.is_moderator(update.effective_user.id):
        if update.effective_chat.type == 'private':
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    text = "üëë **–ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø:**\n\n"
    
    text += "üî± **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n"
    for admin_id in Config.ADMIN_IDS:
        user_info = get_user_by_id(admin_id)
        if user_info:
            text += f"‚Ä¢ @{user_info['username']} (ID: {admin_id})\n"
        else:
            text += f"‚Ä¢ ID: {admin_id}\n"
    
    text += "\n‚öñÔ∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:**\n"
    for mod_id in Config.MODERATOR_IDS:
        if mod_id not in Config.ADMIN_IDS:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤
            user_info = get_user_by_id(mod_id)
            if user_info:
                text += f"‚Ä¢ @{user_info['username']} (ID: {mod_id})\n"
            else:
                text += f"‚Ä¢ ID: {mod_id}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')
