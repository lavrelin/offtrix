from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging

logger = logging.getLogger(__name__)

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle menu callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    logger.info(f"Menu callback action: {action}")
    
    if action == "write":
        from handlers.start_handler import show_write_menu
        await show_write_menu(update, context)
    elif action == "read":
        from handlers.start_handler import show_main_menu
        await show_main_menu(update, context)
    elif action == "budapest":
        await show_budapest_menu(update, context)
    elif action == "catalog":
        await show_catalog(update, context)
    elif action == "services":  # –ó–∞—è–≤–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ (–±—ã–≤—à–∏–π –ø–∏–∞—Ä)
        await start_piar(update, context)
    elif action == "actual":  # –ù–û–í–´–ô –†–ê–ó–î–ï–õ
        await start_actual_post(update, context)
    elif action == "back":
        from handlers.start_handler import show_main_menu
        await show_main_menu(update, context)
    elif action == "announcements":
        await show_announcements_menu(update, context)
    elif action == "news":
        await start_category_post(update, context, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "üîî –ù–æ–≤–æ—Å—Ç–∏")
    elif action == "overheard":
        await start_category_post(update, context, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "üîï –ü–æ–¥—Å–ª—É—à–∞–Ω–æ", anonymous=True)
    elif action == "complaints":
        await start_category_post(update, context, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "üë∏üèº –ñ–∞–ª–æ–±—ã", anonymous=True)
    else:
        logger.warning(f"Unknown menu action: {action}")
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def show_budapest_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show Budapest category menu"""
    keyboard = [
        [InlineKeyboardButton("üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="menu:announcements")],
        [InlineKeyboardButton("üîî –ù–æ–≤–æ—Å—Ç–∏", callback_data="menu:news")],
        [InlineKeyboardButton("üîï –ü–æ–¥—Å–ª—É—à–∞–Ω–æ (–∞–Ω–æ–Ω–∏–º–Ω–æ)", callback_data="menu:overheard")],
        [InlineKeyboardButton("üë∏üèº –ñ–∞–ª–æ–±—ã (–∞–Ω–æ–Ω–∏–º–Ω–æ)", callback_data="menu:complaints")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:write")]
    ]
    
    text = (
        "üôÖ‚Äç‚ôÇÔ∏è *–ü–æ—Å—Ç –≤ –ë—É–¥–∞–ø–µ—à—Ç*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
        "üì£ *–û–±—ä—è–≤–ª–µ–Ω–∏—è* - —Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏, –ø–æ–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. \n"
        "üîî *–ù–æ–≤–æ—Å—Ç–∏* - –Ω–æ–≤–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "üîï *–ü–æ–¥—Å–ª—É—à–∞–Ω–æ* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏, —Å–ø–ª–µ—Ç–Ω–∏, —Å–∏—Ç—É–∞—Ü–∏–∏\n"
        "üëë *–ñ–∞–ª–æ–±—ã* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞ –∏ –ø—Ä–æ–±–ª–µ–º—ã\n"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in show_budapest_menu: {e}")
        await update.callback_query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def show_announcements_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show announcements subcategories"""
    keyboard = [
        [
            InlineKeyboardButton("üïµüèª‚Äç‚ôÄÔ∏è –ö—É–ø–ª—é", callback_data="pub:cat:buy"),
            InlineKeyboardButton("üë∑‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç–∞", callback_data="pub:cat:work")
        ],
        [
            InlineKeyboardButton("üïµüèº –û—Ç–¥–∞–º", callback_data="pub:cat:free"),
            InlineKeyboardButton("üè¢ –ê—Ä–µ–Ω–¥–∞", callback_data="pub:cat:rent")
        ],
        [
            InlineKeyboardButton("üïµüèª‚Äç‚ôÇÔ∏è –ü—Ä–æ–¥–∞–º", callback_data="pub:cat:sell"),
            InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="pub:cat:crypto")
        ],
        [
            InlineKeyboardButton("ü´ß –ò—â—É ", callback_data="pub:cat:other"),
            InlineKeyboardButton("‚úñÔ∏è—É—ë –ë—É–¥–∞–ø–µ—à—Ç", callback_data="pub:cat:events")
        ],
        [InlineKeyboardButton("üîë –ù–∞–∑–∞–¥", callback_data="menu:budapest")]
    ]
    
    text = (
        "üì£ *–û–±—ä—è–≤–ª–µ–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
async def start_piar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start Services form (renamed from Piar)"""
    context.user_data['piar_data'] = {}
    context.user_data['waiting_for'] = 'piar_name'
    context.user_data['piar_step'] = 'name'
    
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu:write")]]

    text = (
        "ü™Ñ *–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ –≤—Å–µ–π –í–µ–Ω–≥—Ä–∏–∏.*\n"
        
        "üß≤ *–¶–µ–ª—å –∫–∞—Ç–∞–ª–æ–≥–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∂–∏–∑–Ω—å –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ –ø—Ä–æ—â–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ:*\n"
        "üßû‚Ä¢ –ú–∞—Å—Ç–µ—Ä–∞–º ‚Äî —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤,\n"
        "üßû‚Äç‚ôÄÔ∏è‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º ‚Äî –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∞—Ç—å –Ω—É–∂–Ω—ã–µ —É—Å–ª—É–≥–∏,\n"
        "üßû‚Äç‚ôÇÔ∏è‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤—É ‚Äî –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è.\n"
        "üß¨*–í–∞–∂–Ω–æ:* —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ ‚Äî —ç—Ç–æ –í–∞—à–∏ –±—É–¥—É—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã. –ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å, –∫–æ—Ç–æ—Ä—É—é –í—ã —É–∫–∞–∂–µ—Ç–µ –≤ –∑–∞—è–≤–∫–µ, –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. –û—Ç –í–∞—à–µ–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –í–∞—Å —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ, –∫–æ–º—É –Ω—É–∂–Ω—ã –∏–º–µ–Ω–Ω–æ –í–∞—à–∏ —É—Å–ª—É–≥–∏.\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n"
        " –û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        "*–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ 1 –∏–∑ 8 —à–∞–≥—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤ –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥:*\n\n"
        "üí≠ *–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, –ø—Å–µ–≤–¥–æ–Ω–∏–º, –Ω–∏–∫–Ω–µ–π–º - –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:*"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in start_piar: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in start_piar: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def start_actual_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start Actual post creation - –ù–û–í–´–ô –†–ê–ó–î–ï–õ"""
    context.user_data['post_data'] = {
        'category': '‚ö°Ô∏è–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ',
        'subcategory': None,
        'anonymous': False,
        'is_actual': True  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ
    }
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:write")]]
    
    text = (
        "‚ö°Ô∏è *–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ*\n"
        "üí° *–ü–æ–¥—Ä–æ–±–Ω–µ–µ:*\n"
        "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∏ —Å—Ä–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "–ü–æ—Å—Ç—ã –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –≤ —á–∞—Ç–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "ü´ß *–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:*\n"
        "- –ë–æ–ª–∏—Ç –∑—É–± ‚Äî –∏—â—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ—Ç —Å–µ–≥–æ–¥–Ω—è\n"
        "- –°—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É\n"
        "- –¢—Ä–µ–±—É—é—Ç—Å—è –ª—é–¥–∏ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "- –ü–æ—Ç–µ—Ä—è–ª –ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ –≤–æ–∫–∑–∞–ª–µ –ö–µ–ª–µ—Ç–∏, –∏–º—è –¢—Ä–∏–∫—Å–æ–≤.–¢.–¢., 1986 –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "- –¢—Ä–µ–±—É—é—Ç—Å—è –≤–æ–ª–æ–Ω—Ç—ë—Ä—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è\n"
        "- –†–∞–π–æ–Ω –ö–µ–ª–µ–Ω—Ñ–æ–ª—å–¥ ‚Äî —É—á—É—Å—å —Å—Ç—Ä–∏—á—å, –Ω—É–∂–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞, –¥–µ–ª–∞—é —Å—Ç—Ä–∏–∂–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å 10:00 –¥–æ 18:00\n"
        "üÜò *–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π*\n"
        "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª.\n"
        "‚ö†Ô∏è –£–∫–∞–∑—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏‚ùóÔ∏è\n"
        "*P.S.* –í—Å–µ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Ç.–¥. –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.\n"
        "üö© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞, –±—É–¥—É—Ç –∑–∞–±–∞–Ω–µ–Ω—ã.\n\n"
        "üõéÔ∏è *–ó–∞–∫–ª—é—á–µ–Ω–∏–µ*\n"
        "üë∫ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.\n"
        "üî• –ü—É–±–ª–∏–∫—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ *–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ* –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è‚ùóÔ∏è\n\n"
        "‚ö°Ô∏è *–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:*"
    )

    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        context.user_data['waiting_for'] = 'post_text'
    except Exception as e:
        logger.error(f"Error in start_actual_post: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def start_category_post(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              category: str, subcategory: str, anonymous: bool = False):
    """Start post creation for specific category"""
    context.user_data['post_data'] = {
        'category': category,
        'subcategory': subcategory,
        'anonymous': anonymous
    }
    
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu:budapest")]]
    
    anon_text = " (–∞–Ω–æ–Ω–∏–º–Ω–æ)" if anonymous else ""
    
    text = (
        f"{category} ‚Üí {subcategory}{anon_text}\n\n"
       "ü§≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã.\n"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        context.user_data['waiting_for'] = 'post_text'
    except Exception as e:
        logger.error(f"Error in start_category_post: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
