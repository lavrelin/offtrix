# -*- coding: utf-8 -*-
"""
Optimized Menu Handler with unique callback prefixes
Prefix: mnc_ (menu callback)
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIX: mnc_ =============
MENU_CALLBACKS = {
    'write': 'mnc_w',           # Show write menu
    'read': 'mnc_r',            # Show main menu
    'budapest': 'mnc_bp',       # Budapest menu
    'services': 'mnc_srv',      # Services (Piar)
    'actual': 'mnc_act',        # Actual posts
    'back': 'mnc_bk',           # Back to main
    'announcements': 'mnc_ann', # Announcements submenu
    'news': 'mnc_nws',          # News category
    'overheard': 'mnc_ovr',     # Overheard category
    'complaints': 'mnc_cmp'     # Complaints category
}

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unified menu callback handler"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    logger.info(f"Menu action: {action}")
    
    handlers = {
        MENU_CALLBACKS['write']: show_write_menu,
        MENU_CALLBACKS['read']: show_main_menu,
        MENU_CALLBACKS['back']: show_main_menu,
        MENU_CALLBACKS['budapest']: show_budapest_menu,
        MENU_CALLBACKS['services']: start_piar,
        MENU_CALLBACKS['actual']: start_actual_post,
        MENU_CALLBACKS['announcements']: show_announcements_menu,
        MENU_CALLBACKS['news']: lambda u, c: start_category_post(u, c, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "üîî –ù–æ–≤–æ—Å—Ç–∏"),
        MENU_CALLBACKS['overheard']: lambda u, c: start_category_post(u, c, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "üîï –ü–æ–¥—Å–ª—É—à–∞–Ω–æ", True),
        MENU_CALLBACKS['complaints']: lambda u, c: start_category_post(u, c, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "üë∏üèº –ñ–∞–ª–æ–±—ã", True)
    }
    
    handler = handlers.get(action)
    if handler:
        await handler(update, context)
    else:
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def show_budapest_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Budapest category menu"""
    keyboard = [
        [InlineKeyboardButton("üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=MENU_CALLBACKS['announcements'])],
        [InlineKeyboardButton("üîî –ù–æ–≤–æ—Å—Ç–∏", callback_data=MENU_CALLBACKS['news'])],
        [InlineKeyboardButton("üîï –ü–æ–¥—Å–ª—É—à–∞–Ω–æ", callback_data=MENU_CALLBACKS['overheard'])],
        [InlineKeyboardButton("üë∏üèº –ñ–∞–ª–æ–±—ã", callback_data=MENU_CALLBACKS['complaints'])],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=MENU_CALLBACKS['write'])]
    ]
    
    text = (
        "üôÖ‚Äç‚ôÇÔ∏è *–ü–æ—Å—Ç –≤ –ë—É–¥–∞–ø–µ—à—Ç*\n\n"
        "üì£ *–û–±—ä—è–≤–ª–µ–Ω–∏—è* - —Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏, –ø–æ–∏—Å–∫–∏\n"
        "üîî *–ù–æ–≤–æ—Å—Ç–∏* - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "üîï *–ü–æ–¥—Å–ª—É—à–∞–Ω–æ* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
        "üëë *–ñ–∞–ª–æ–±—ã* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞"
    )
    
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )

async def show_announcements_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Announcements subcategories"""
    keyboard = [
        [
            InlineKeyboardButton("üïµüèª‚Äç‚ôÄÔ∏è –ö—É–ø–ª—é", callback_data="pbc_buy"),
            InlineKeyboardButton("üë∑‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç–∞", callback_data="pbc_wrk")
        ],
        [
            InlineKeyboardButton("üïµüèº –û—Ç–¥–∞–º", callback_data="pbc_free"),
            InlineKeyboardButton("üè¢ –ê—Ä–µ–Ω–¥–∞", callback_data="pbc_rnt")
        ],
        [
            InlineKeyboardButton("üïµüèª‚Äç‚ôÇÔ∏è –ü—Ä–æ–¥–∞–º", callback_data="pbc_sell"),
            InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="pbc_cry")
        ],
        [
            InlineKeyboardButton("ü´ß –ò—â—É", callback_data="pbc_oth"),
            InlineKeyboardButton("‚úñÔ∏è—É—ë –ë—É–¥–∞–ø–µ—à—Ç", callback_data="pbc_evt")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=MENU_CALLBACKS['budapest'])]
    ]
    
    await update.callback_query.edit_message_text(
        "üì£ *–û–±—ä—è–≤–ª–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def start_piar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start Services form"""
    context.user_data['piar_data'] = {}
    context.user_data['waiting_for'] = 'piar_name'
    context.user_data['piar_step'] = 'name'
    
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MENU_CALLBACKS['write'])]]

    text = (
        "ü™Ñ *–ó–∞—è–≤–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ –ë—É–¥–∞–ø–µ—à—Ç–∞*\n\n"
        "üß≤ *–¶–µ–ª—å:* —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ —É—Å–ª—É–≥ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤\n\n"
        "üí° *–®–∞–≥ 1 –∏–∑ 8*\n"
        "üí≠ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, –ø—Å–µ–≤–¥–æ–Ω–∏–º:"
    )
    
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )

async def start_actual_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start Actual post"""
    context.user_data['post_data'] = {
        'category': '‚ö°Ô∏è–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ',
        'is_actual': True
    }
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=MENU_CALLBACKS['write'])]]
    
    text = (
        "‚ö°Ô∏è *–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ*\n\n"
        "üí° –°—Ä–æ—á–Ω—ã–µ –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "üìå –ë—É–¥—É—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –≤ —á–∞—Ç–µ\n\n"
        "ü´ß *–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "- –ò—â—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "- –°—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫\n"
        "- –ü–æ—Ç–µ—Ä—è–ª –ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ –≤–æ–∫–∑–∞–ª–µ\n\n"
        "‚ö°Ô∏è *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:*"
    )

    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )
    context.user_data['waiting_for'] = 'post_text'

async def start_category_post(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              category: str, subcategory: str, anonymous: bool = False):
    """Start post creation"""
    context.user_data['post_data'] = {
        'category': category,
        'subcategory': subcategory,
        'anonymous': anonymous
    }
    
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MENU_CALLBACKS['budapest'])]]
    
    anon_text = " (–∞–Ω–æ–Ω–∏–º–Ω–æ)" if anonymous else ""
    text = f"{category} ‚Üí {subcategory}{anon_text}\n\nü§≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ:"
    
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )
    context.user_data['waiting_for'] = 'post_text'

async def show_write_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Write menu"""
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ üôÖ‚Äç‚ôÇÔ∏è–ë—É–¥–∞–ø–µ—à—Ç/üïµüèº‚Äç‚ôÄÔ∏è–ö–û–ü", callback_data=MENU_CALLBACKS['budapest'])],
        [InlineKeyboardButton("–ó–∞—è–≤–∫–∞ –≤ üôÖ–ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥", callback_data=MENU_CALLBACKS['services'])],
        [InlineKeyboardButton("‚ö°Ô∏è–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ", callback_data=MENU_CALLBACKS['actual'])],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è–ß–∏—Ç–∞—Ç—å", callback_data=MENU_CALLBACKS['read'])]
    ]
    
    text = (
        "‚Ä¢ *–†–∞–∑–¥–µ–ª—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n"
        "*üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç / üïµüèº‚Äç‚ôÄÔ∏è –ö–û–ü*\n"
        "–û–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç–∏, –∂–∞–ª–æ–±—ã\n\n"
        "*üôÖ –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥*\n"
        "–ú–∞—Å—Ç–µ—Ä–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã\n\n"
        "*‚ö°Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ*\n"
        "–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Main menu"""
    from handlers.start_handler import show_main_menu as original_show_main_menu
    await original_show_main_menu(update, context)

# Export callbacks for use in other handlers
__all__ = ['handle_menu_callback', 'MENU_CALLBACKS']
