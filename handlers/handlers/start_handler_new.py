# -*- coding: utf-8 -*-
"""
Start Handler v2.0 - SIMPLIFIED MENU
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging
import secrets
import string

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    chat_id = update.effective_chat.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç–µ
    if chat_id == Config.BUDAPEST_CHAT_ID:
        try:
            await update.message.delete()
            logger.info(f"Deleted /start from Budapest chat, user {user_id}")
        except Exception as e:
            logger.error(f"Could not delete /start: {e}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        from services.db import db
        from models import User, Gender
        from sqlalchemy import select
        from datetime import datetime
        
        async with db.get_session() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            
            if not user:
                new_user = User(
                    id=user_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    gender=Gender.UNKNOWN,
                    referral_code=generate_referral_code(),
                    created_at=datetime.utcnow()
                )
                session.add(new_user)
                await session.commit()
                logger.info(f"Created new user: {user_id}")
                
    except Exception as e:
        logger.warning(f"Could not save user to DB: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)

def generate_referral_code():
    """Generate unique referral code"""
    return ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(8))

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show main menu - SIMPLIFIED VERSION"""
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ –ë—É–¥–∞–ø–µ—à—Ç —á–∞—Ç–µ
    chat_id = update.effective_chat.id
    if chat_id == Config.BUDAPEST_CHAT_ID:
        logger.info(f"Blocked main menu in Budapest chat")
        return
    
    keyboard = [
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç", url="https://t.me/tgchatxxx")],
        [InlineKeyboardButton("üôÖ –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/catalogtrix")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º", url="https://t.me/hungarytrade")],
        [InlineKeyboardButton("‚úçÔ∏è –ü–∏—Å–∞—Ç—å", callback_data="menu_write")]
    ]
    
    text = (
        "### –°–æ–æ–±—â–µ—Å—Ç–≤–æ –ë—É–¥–∞–ø–µ—à—Ç–∞ Trix\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ –í–µ–Ω–≥—Ä–∏–∏üá≠üá∫\n\n"
        
        "**–ù–∞—à–µ:**\n"
        "- [ ] üôÖ‚Äç‚ôÇÔ∏è *–ö–∞–Ω–∞–ª* ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "- [ ] üôÖ‚Äç‚ôÄÔ∏è *–ß–∞—Ç* ‚Äî –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è\n"
        "- [ ] üôÖ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥\n"
        "- [ ] üïµÔ∏è‚Äç‚ôÇÔ∏è *–ë–∞—Ä–∞—Ö–æ–ª–∫–∞* ‚Äî –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º\n\n"
            
        "**–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é‚ùî**\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚úçÔ∏è *–ü–∏—Å–∞—Ç—å*\n\n"
        
        "üîí *–ó–∞–∫—Ä–µ–ø–∏—Ç–µ –±–æ—Ç–∞*"
    )
    
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await update.effective_message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        try:
            await update.effective_message.reply_text(
                "TrixBot - —Ç–æ–ø –∫–æ–º—å—é–Ω–∏—Ç–∏ –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ üá≠üá∫\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ü–∏—Å–∞—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e2:
            logger.error(f"Fallback menu also failed: {e2}")
            await update.effective_message.reply_text(
                "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )
