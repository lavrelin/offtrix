# -*- coding: utf-8 -*-
"""
Optimized Piar (Services) Handler
Prefix: prc_ (piar/services callback)
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from models import User, Post, PostStatus
from sqlalchemy import select
import logging

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIX: prc_ =============
PIAR_CALLBACKS = {
    'preview': 'prc_prv',       # Show preview
    'send': 'prc_snd',          # Send to moderation
    'edit': 'prc_edt',          # Edit (restart)
    'cancel': 'prc_cnl',        # Cancel
    'add_photo': 'prc_adp',     # Add photo
    'skip_photo': 'prc_skp',    # Skip photo
    'next_photo': 'prc_nxt',    # Next (preview)
    'back': 'prc_bck'           # Back to previous step
}

# Piar form steps - 8 steps
PIAR_STEPS = [
    ('name', '–ò–º—è', "üí≠ –®–∞–≥ 1/8\n\nüí≠ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, –ø—Å–µ–≤–¥–æ–Ω–∏–º:"),
    ('profession', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è', "üí≠ –®–∞–≥ 2/8\n\nüí≠ –ö–∞–∫–∏–µ *—É—Å–ª—É–≥–∏* –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?"),
    ('districts', '–†–∞–π–æ–Ω—ã', "üí≠ –®–∞–≥ 3/8\n\nüí≠ –í –∫–∞–∫–∏—Ö *—Ä–∞–π–æ–Ω–∞—Ö* —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"),
    ('phone', '–¢–µ–ª–µ—Ñ–æ–Ω', "üí≠ –®–∞–≥ 4/8\n\nüí≠ *–¢–µ–ª–µ—Ñ–æ–Ω* (–∏–ª–∏ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"),
    ('instagram', 'Instagram', "üí≠ –®–∞–≥ 5/8\n\nüí≠ *Instagram* (–∏–ª–∏ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"),
    ('telegram', 'Telegram', "üí≠ –®–∞–≥ 6/8\n\nüí≠ *Telegram* (–∏–ª–∏ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"),
    ('price', '–¶–µ–Ω–∞', "üí≠ –®–∞–≥ 7/8\n\nüí≠ –£–∫–∞–∂–∏—Ç–µ *—Ü–µ–Ω—É* –∑–∞ —É—Å–ª—É–≥–∏:"),
    ('description', '–û–ø–∏—Å–∞–Ω–∏–µ', "üí≠ –®–∞–≥ 8/8\n\nüí≠ *–û–ø–∏—Å–∞–Ω–∏–µ* —É—Å–ª—É–≥:")
]

async def handle_piar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unified piar callback handler"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    handlers = {
        PIAR_CALLBACKS['preview']: show_piar_preview,
        PIAR_CALLBACKS['send']: send_piar_to_moderation,
        PIAR_CALLBACKS['edit']: restart_piar_form,
        PIAR_CALLBACKS['cancel']: cancel_piar,
        PIAR_CALLBACKS['add_photo']: request_piar_photo,
        PIAR_CALLBACKS['skip_photo']: show_piar_preview,
        PIAR_CALLBACKS['next_photo']: show_piar_preview,
        PIAR_CALLBACKS['back']: go_back_step
    }
    
    handler = handlers.get(action)
    if handler:
        await handler(update, context)

async def handle_piar_text(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           field: str, value: str):
    """Handle text input for piar form"""
    if 'piar_data' not in context.user_data:
        context.user_data['piar_data'] = {}
    
    context.user_data['piar_step'] = field
    
    # Validate and save
    validators = {
        'name': lambda v: len(v) <= 100,
        'profession': lambda v: len(v) <= 100,
        'districts': lambda v: len([d.strip() for d in v.split(',')]) <= 3,
        'phone': lambda v: v == '-' or len(v) >= 7,
        'price': lambda v: len(v) <= 100,
        'description': lambda v: len(v) <= 1000
    }
    
    if field in validators and not validators[field](value):
        errors = {
            'name': "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100)",
            'profession': "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å. 100)",
            'districts': "–ú–∞–∫—Å. 3 —Ä–∞–π–æ–Ω–∞",
            'phone': "–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 7)",
            'price': "–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å. 100)",
            'description': "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 1000)"
        }
        await update.message.reply_text(f"‚ùå {errors[field]}")
        return
    
    # Save data
    if field == 'districts':
        context.user_data['piar_data'][field] = [d.strip() for d in value.split(',')][:3]
    elif field in ['phone', 'instagram', 'telegram']:
        context.user_data['piar_data'][field] = None if value == '-' else value.strip()
    else:
        context.user_data['piar_data'][field] = value.strip()
    
    # Next step
    current_idx = next(i for i, (f, _, _) in enumerate(PIAR_STEPS) if f == field)
    
    if current_idx < len(PIAR_STEPS) - 1:
        next_field, next_name, next_text = PIAR_STEPS[current_idx + 1]
        context.user_data['waiting_for'] = f'piar_{next_field}'
        
        keyboard = []
        if current_idx >= 0:
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=PIAR_CALLBACKS['back'])])
        keyboard.append([InlineKeyboardButton("üóØÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=PIAR_CALLBACKS['cancel'])])
        
        await update.message.reply_text(
            next_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        # Photos step
        context.user_data['piar_data']['photos'] = []
        context.user_data['piar_data']['media'] = []
        context.user_data['waiting_for'] = 'piar_photo'
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞–ª—å—à–µ", callback_data=PIAR_CALLBACKS['skip_photo'])],
            [InlineKeyboardButton("üö© –û—Ç–º–µ–Ω–∞", callback_data=PIAR_CALLBACKS['cancel'])]
        ]
        
        await update.message.reply_text(
            "üì∑ *–®–∞–≥ 8 - –§–æ—Ç–æ*\n\n–î–æ 3 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n'–î–∞–ª—å—à–µ' - –±–µ–∑ –º–µ–¥–∏–∞",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def handle_piar_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle photo input"""
    if context.user_data.get('waiting_for') != 'piar_photo':
        return
    
    if 'piar_data' not in context.user_data:
        return
    
    photos = context.user_data['piar_data'].get('photos', [])
    media = context.user_data['piar_data'].get('media', [])
    
    if len(photos) >= Config.MAX_PHOTOS_PIAR:
        await update.message.reply_text(f"üíø –ú–∞–∫—Å–∏–º—É–º {Config.MAX_PHOTOS_PIAR} —Ñ–æ—Ç–æ")
        return
    
    media_added = False
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        photos.append(file_id)
        media.append({'type': 'photo', 'file_id': file_id})
        media_added = True
    elif update.message.video:
        file_id = update.message.video.file_id
        photos.append(file_id)
        media.append({'type': 'video', 'file_id': file_id})
        media_added = True
    
    if media_added:
        context.user_data['piar_data']['photos'] = photos
        context.user_data['piar_data']['media'] = media
        
        remaining = Config.MAX_PHOTOS_PIAR - len(photos)
        
        keyboard = []
        if remaining > 0:
            keyboard.append([InlineKeyboardButton(f"üì∏ –ï—â–µ ({remaining})", callback_data=PIAR_CALLBACKS['add_photo'])])
        keyboard.append([InlineKeyboardButton("ü©µ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=PIAR_CALLBACKS['next_photo'])])
        keyboard.append([InlineKeyboardButton("üëπ –û—Ç–º–µ–Ω–∞", callback_data=PIAR_CALLBACKS['cancel'])])
        
        await update.message.reply_text(
            f"üé¨ –î–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)})",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_piar_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show piar preview"""
    if 'piar_data' not in context.user_data:
        await update.callback_query.edit_message_text("üëπ –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    data = context.user_data['piar_data']
    
    # Build text
    text = "üíå *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏*\n\n"
    text += f"üôãüèº‚Äç‚ôÇÔ∏è *–ò–º—è:* {data.get('name')}\n"
    text += f"üë∑üèΩ‚Äç‚ôÇÔ∏è *–£—Å–ª—É–≥–∞:* {data.get('profession')}\n"
    text += f"üèòÔ∏è *–†–∞–π–æ–Ω—ã:* {', '.join(data.get('districts', []))}\n"
    
    if data.get('phone'):
        text += f"ü§≥ *–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone')}\n"
    
    contacts = []
    if data.get('instagram'):
        contacts.append(f"üüß Instagram: @{data.get('instagram')}")
    if data.get('telegram'):
        contacts.append(f"üî∑ Telegram: {data.get('telegram')}")
    
    if contacts:
        text += f"üìò *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n{chr(10).join(contacts)}\n"
    
    text += f"üí≥ *–ü—Ä–∞–π—Å:* {data.get('price')}\n\n"
    text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{data.get('description')}\n\n"
    
    if data.get('photos'):
        text += f"üíΩ –ú–µ–¥–∏–∞: {len(data['photos'])}\n\n"
    
    text += "#–£—Å–ª—É–≥–∏ #–ö–∞—Ç–∞–ª–æ–≥–£—Å–ª—É–≥\n\n" + Config.DEFAULT_SIGNATURE
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data=PIAR_CALLBACKS['send']),
            InlineKeyboardButton("üîè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=PIAR_CALLBACKS['edit'])
        ],
        [InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data=PIAR_CALLBACKS['cancel'])]
    ]
    
    try:
        await update.callback_query.delete_message()
    except:
        pass
    
    # Show media first
    if data.get('media'):
        for i, item in enumerate(data['media'][:3]):
            try:
                caption = f"üì∑ –ú–µ–¥–∏–∞ ({len(data['media'])} —à—Ç.)" if i == 0 else None
                if item['type'] == 'photo':
                    await update.effective_message.reply_photo(item['file_id'], caption=caption)
                elif item['type'] == 'video':
                    await update.effective_message.reply_video(item['file_id'], caption=caption)
            except Exception as e:
                logger.error(f"Preview media error: {e}")
    
    # Show text with buttons
    await update.effective_message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def send_piar_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send piar to moderation"""
    user_id = update.effective_user.id
    data = context.user_data.get('piar_data', {})
    
    try:
        if not db.session_maker:
            await update.callback_query.edit_message_text("üö® –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        async with db.get_session() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            
            if not user:
                await update.callback_query.edit_message_text("üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. /start")
                return
            
            # Create post
            post = Post(
                user_id=int(user_id),
                category='üôÖ –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥',
                text=str(data.get('description', ''))[:1000],
                hashtags=['#–£—Å–ª—É–≥–∏', '#–ö–∞—Ç–∞–ª–æ–≥–£—Å–ª—É–≥'],
                is_piar=True,
                piar_name=str(data.get('name', ''))[:100],
                piar_profession=str(data.get('profession', ''))[:100],
                piar_districts=list(data.get('districts', [])),
                piar_phone=str(data.get('phone', ''))[:50] if data.get('phone') else None,
                piar_price=str(data.get('price', ''))[:100],
                piar_instagram=str(data.get('instagram', ''))[:100] if data.get('instagram') else None,
                piar_telegram=str(data.get('telegram', ''))[:100] if data.get('telegram') else None,
                piar_description=str(data.get('description', ''))[:1000],
                media=list(data.get('media', [])),
                anonymous=False,
                status=PostStatus.PENDING
            )
            session.add(post)
            await session.flush()
            await session.commit()
            await session.refresh(post)
            
            # Send to mod group
            await send_to_mod_group(update, context, post, user, data)
            
            context.user_data.pop('piar_data', None)
            context.user_data.pop('waiting_for', None)
            context.user_data.pop('piar_step', None)
            
            cooldown_mins = Config.COOLDOWN_SECONDS // 60
            
            success_keyboard = [
                [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ö–∞–Ω–∞–ª", url="https://t.me/snghu")],
                [InlineKeyboardButton("üßç‚Äç‚ôÇÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mnc_bk")]
            ]
            
            await update.callback_query.edit_message_text(
                f"‚úÖ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n"
                f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                f"üí§ –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ —á–µ—Ä–µ–∑ {cooldown_mins} –º–∏–Ω",
                reply_markup=InlineKeyboardMarkup(success_keyboard),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Send piar error: {e}", exc_info=True)
        await update.callback_query.edit_message_text("üöó –û—à–∏–±–∫–∞. /start")

async def send_to_mod_group(update: Update, context: ContextTypes.DEFAULT_TYPE,
                            post: Post, user: User, data: dict):
    """Send to moderation group"""
    bot = context.bot
    username = user.username if user.username else f"ID_{user.id}"
    
    mod_text = (
        f"‚≠êÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥\n\n"
        f"üßç‚Äç‚ôÇÔ∏è @{username} (ID: {user.id})\n"
        f"üòÄ –ò–º—è: {data.get('name', '')}\n"
        f"ü•± –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {data.get('profession', '')}\n"
        f"üè£ –†–∞–π–æ–Ω—ã: {', '.join(data.get('districts', []))}\n"
    )
    
    contacts = []
    if data.get('phone'):
        contacts.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}")
    if data.get('instagram'):
        contacts.append(f"üì∑ Instagram: @{data.get('instagram')}")
    if data.get('telegram'):
        contacts.append(f"üì± Telegram: {data.get('telegram')}")
    
    if contacts:
        mod_text += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n{chr(10).join(contacts)}\n"
    
    mod_text += f"üí∞ –¶–µ–Ω–∞: {data.get('price', '')}\n"
    
    if data.get('media'):
        mod_text += f"üìé –ú–µ–¥–∏–∞: {len(data['media'])} —Ñ–∞–π–ª(–æ–≤)\n"
    
    description = data.get('description', '')[:300]
    if len(data.get('description', '')) > 300:
        description += "..."
    mod_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
    
    keyboard = [[
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"mdc_ap:{post.id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mdc_rj:{post.id}")
    ]]
    
    try:
        # Send media
        if data.get('media'):
            for i, item in enumerate(data['media']):
                try:
                    if item['type'] == 'photo':
                        await bot.send_photo(Config.MODERATION_GROUP_ID, item['file_id'])
                    elif item['type'] == 'video':
                        await bot.send_video(Config.MODERATION_GROUP_ID, item['file_id'])
                except Exception as e:
                    logger.error(f"Send piar media error: {e}")
        
        # Send text
        await bot.send_message(
            Config.MODERATION_GROUP_ID,
            mod_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Send to mod group error: {e}")

async def request_piar_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request more photos"""
    context.user_data['waiting_for'] = 'piar_photo'
    
    keyboard = [
        [InlineKeyboardButton("‚òëÔ∏è –î–∞–ª—å—à–µ", callback_data=PIAR_CALLBACKS['next_photo'])],
        [InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data=PIAR_CALLBACKS['cancel'])]
    ]
    
    await update.callback_query.edit_message_text(
        "üí° *–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def go_back_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Go back to previous step"""
    current_step = context.user_data.get('piar_step')
    
    if not current_step:
        await restart_piar_form(update, context)
        return
    
    step_order = [s[0] for s in PIAR_STEPS]
    
    try:
        current_idx = step_order.index(current_step)
        if current_idx > 0:
            prev_field, prev_name, prev_text = PIAR_STEPS[current_idx - 1]
            context.user_data['waiting_for'] = f'piar_{prev_field}'
            context.user_data['piar_step'] = prev_field
            
            keyboard = []
            if current_idx > 1:
                keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=PIAR_CALLBACKS['back'])])
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=PIAR_CALLBACKS['cancel'])])
            
            await update.callback_query.edit_message_text(
                prev_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await restart_piar_form(update, context)
    except:
        await restart_piar_form(update, context)

async def restart_piar_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Restart form"""
    context.user_data['piar_data'] = {}
    context.user_data['waiting_for'] = 'piar_name'
    context.user_data['piar_step'] = 'name'
    
    keyboard = [[InlineKeyboardButton("üóØÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mnc_bk")]]
    
    text = (
        "üìë *–ó–∞—è–≤–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥*\n\n"
        "üß≤ *–¶–µ–ª—å:* —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∂–∏–∑–Ω—å\n\n"
        "*–®–∞–≥ 1 –∏–∑ 8*\n"
        "üí≠ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:"
    )
    
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )

async def cancel_piar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel piar"""
    context.user_data.pop('piar_data', None)
    context.user_data.pop('waiting_for', None)
    context.user_data.pop('piar_step', None)
    
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)

__all__ = [
    'handle_piar_callback', 'handle_piar_text', 'handle_piar_photo', 
    'PIAR_CALLBACKS', 'PIAR_STEPS'
]
