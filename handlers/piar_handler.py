from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from models import User, Post, PostStatus  # <-- –î–û–ë–ê–í–ò–¢–¨ PostStatus
from sqlalchemy import select
import logging

logger = logging.getLogger(__name__)

# Piar form steps - 8 —à–∞–≥–æ–≤, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –¥–ª—è Telegram
PIAR_STEPS = [
    (
        'name',
        '–ò–º—è',
        "üí≠ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º.\n"
        "üôÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ ‚Äì –º–µ—Å—Ç–æ, –≥–¥–µ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥—ë—Ç –Ω—É–∂–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞,\n"
        "–ê –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–ª—É—á–∞—Ç —Å–≤–æ–∏—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n"
        "‚öôÔ∏è –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥, –∑–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ 8 –ø—É–Ω–∫—Ç–æ–≤.\n"
        "‚úçÔ∏è –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞,\n"
        "–ò —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    ),
    (
        'profession',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        "üí≠ –ö–∞–∫–∏–µ *—É—Å–ª—É–≥–∏* –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?"
    ),
    (
        'districts',
        '–†–∞–π–æ–Ω—ã',
        "üí≠ –í –∫–∞–∫–∏—Ö *—Ä–∞–π–æ–Ω–∞—Ö* –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"
    ),
    (
        'phone',
        '–¢–µ–ª–µ—Ñ–æ–Ω',
        "üí≠ –£–∫–∞–∂–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –µ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏)\n"
        "‚Ü™Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"
    ),
    (
        'instagram',
        'Instagram',
        "üí≠ –£–∫–∞–∂–∏—Ç–µ üüß*Instagram*\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "üîó –°—Å—ã–ª–∫–∞\n"
        "üåÄ Username\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ username\n"
        "‚Ü™Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ *¬´-¬ª* —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    ),
    (
        'telegram',
        'Telegram',
        "üí≠ –£–∫–∞–∂–∏—Ç–µ üî∑*Telegram*\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "üîó –°—Å—ã–ª–∫–∞\n"
        "üåÄ Username\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ username\n"
        "‚Ü™Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ *¬´-¬ª* —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    ),
    (
        'price',
        '–¶–µ–Ω–∞',
        "üí≠ –£–∫–∞–∂–∏—Ç–µ *—Ü–µ–Ω—É* –∑–∞ —É—Å–ª—É–≥–∏,\n"
        "üìë *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç* (–µ—Å–ª–∏ –µ—Å—Ç—å)"
    ),
    (
        'description',
        '–û–ø–∏—Å–∞–Ω–∏–µ',
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –∏ –∞–±–∑–∞—Ü—ã.\n"
        "–ß–µ–º —è—Ä—á–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–Ω–æ –ø—Ä–∏–≤–ª–µ—á—ë—Ç!\n"
        "üíª *–î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞* –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ,\n"
        "üí≠ –ù–∞—á–Ω–µ–º —Å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞—à–∏—Ö —É—Å–ª—É–≥. *–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç*:"
    )
]
async def handle_piar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle piar callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "preview":
        await show_piar_preview(update, context)
    elif action == "send":
        await send_piar_to_moderation(update, context)
    elif action == "edit":
        await restart_piar_form(update, context)
    elif action == "cancel":
        await cancel_piar(update, context)
    elif action == "add_photo":
        await request_piar_photo(update, context)
    elif action == "skip_photo":
        await show_piar_preview(update, context)
    elif action == "next_photo":
        await show_piar_preview(update, context)
    elif action == "back":
        await go_back_step(update, context)

async def handle_piar_text(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           field: str, value: str):
    """Handle text input for piar form"""
    if 'piar_data' not in context.user_data:
        context.user_data['piar_data'] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    context.user_data['piar_step'] = field
    
    # Validate and save field - –£–ë–†–ê–ù–ê –ü–†–û–í–ï–†–ö–ê –°–°–´–õ–û–ö
    if field == 'name':
        if len(value) > 100:
            await update.message.reply_text("üõ£Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–µ —Å–ª–æ–º–∞–≤ —è–∑—ã–∫ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['name'] = value
        next_step = 'profession'
        
    elif field == 'profession':
        if len(value) > 100:
            await update.message.reply_text("üò≥ –ß–µ–º —ç—Ç–æ –≤—ã —Ç–∞–∫–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['profession'] = value
        next_step = 'districts'
        
    elif field == 'districts':
        districts = [d.strip() for d in value.split(',')][:3]
        if not districts:
            await update.message.reply_text("üè¢ –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–π–æ–Ω")
            return
        context.user_data['piar_data']['districts'] = districts
        next_step = 'phone'
        
    elif field == 'phone':
        if value != '-':
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –°–°–´–õ–ö–ò –†–ê–ó–†–ï–®–ï–ù–´
            phone = value.strip()
            if len(phone) < 7:
                await update.message.reply_text("üìû –ù–∞—à –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–∑–≤–æ–Ω–∏–ª –Ω–∞ —É–∫–∞–∑–∞–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä ‚Äì üìµ –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑.")
                return
            context.user_data['piar_data']['phone'] = phone
        else:
            context.user_data['piar_data']['phone'] = None
        next_step = 'instagram'
        
    elif field == 'instagram':
        if value != '-':
            # –°–°–´–õ–ö–ò –†–ê–ó–†–ï–®–ï–ù–´ –≤ Instagram
            instagram = value.strip()
            if instagram.startswith('@'):
                instagram = instagram[1:]
            context.user_data['piar_data']['instagram'] = instagram if instagram else None
        else:
            context.user_data['piar_data']['instagram'] = None
        next_step = 'telegram'
        
    elif field == 'telegram':
        if value != '-':
            # –°–°–´–õ–ö–ò –†–ê–ó–†–ï–®–ï–ù–´ –≤ Telegram
            telegram = value.strip()
            if not telegram.startswith('@') and not telegram.startswith('https://t.me/'):
                telegram = f"@{telegram}"
            context.user_data['piar_data']['telegram'] = telegram
        else:
            context.user_data['piar_data']['telegram'] = None
        next_step = 'price'
        
    elif field == 'price':
        if len(value) > 100:
            await update.message.reply_text("üôáüèø‚Äç‚ôÄÔ∏è –ù–µ–ø—Ä–∏–ª–∏—á–Ω–æ –¥–æ—Ä–æ–≥–æ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['price'] = value
        next_step = 'description'
        
    elif field == 'description':
        if len(value) > 1000:
            await update.message.reply_text("üíª –î–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ–Ω–∞—Å—Ç–æ–ª—å–∫–æ –∂–µ... (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['description'] = value
        next_step = 'photos'
    
    else:
        return
    
    # Show next step or photo request
    if next_step == 'photos':
        context.user_data['piar_data']['photos'] = []
        context.user_data['piar_data']['media'] = []
        context.user_data['waiting_for'] = 'piar_photo'
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞–ª—å—à–µ", callback_data="piar:skip_photo")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="piar:back")],
            [InlineKeyboardButton("üö© –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")]
        ]
        
        await update.message.reply_text(
            "üì∑ *–®–∞–≥ 8 - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*\n\n"
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "'–î–∞–ª—å—à–µ' - —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        # Find next step info
        for i, (step_field, step_name, step_text) in enumerate(PIAR_STEPS):
            if step_field == next_step:
                step_num = i + 1
                break
        
        context.user_data['waiting_for'] = f'piar_{next_step}'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
        keyboard = []
        if step_num > 1:
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="piar:back")])
        keyboard.append([InlineKeyboardButton("üóØÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="piar:cancel")])
        
        await update.message.reply_text(
            f"üí° *–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥*\n\n"
            f"‚Ä¢ –®–∞–≥  {step_num} –∏–∑ 8\n"
            f"{step_text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def handle_piar_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle photo input for piar"""
    if 'waiting_for' not in context.user_data or context.user_data['waiting_for'] != 'piar_photo':
        return
    
    if 'piar_data' not in context.user_data:
        return
    
    if 'photos' not in context.user_data['piar_data']:
        context.user_data['piar_data']['photos'] = []
    
    if 'media' not in context.user_data['piar_data']:
        context.user_data['piar_data']['media'] = []
    
    photos = context.user_data['piar_data']['photos']
    media = context.user_data['piar_data']['media']
    
    if len(photos) >= Config.MAX_PHOTOS_PIAR:
        await update.message.reply_text(
            f"üíø –ù–µ –≤–º–µ—â–∞–µ—Ç—Å—è, –º–∞–∫—Å–∏–º—É–º {Config.MAX_PHOTOS_PIAR} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
        )
        return
    
    media_added = False
    if update.message.photo:
        photos.append(update.message.photo[-1].file_id)
        media.append({'type': 'photo', 'file_id': update.message.photo[-1].file_id})
        media_added = True
    elif update.message.video:
        photos.append(update.message.video.file_id)
        media.append({'type': 'video', 'file_id': update.message.video.file_id})
        media_added = True
    
    if media_added:
        remaining = Config.MAX_PHOTOS_PIAR - len(photos)
        
        keyboard = []
        
        if remaining > 0:
            keyboard.append([
                InlineKeyboardButton(f"üì∏ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ ({remaining})", 
                                   callback_data="piar:add_photo")
            ])
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ"
        keyboard.append([
            InlineKeyboardButton("ü©µ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="piar:next_photo")
        ])
        
        keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="piar:back")])
        keyboard.append([InlineKeyboardButton("üëπ –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")])
        
        await update.message.reply_text(
            f"üé¨ –î–æ–±–∞–≤–ª–µ–Ω–æ (–§–∞–π–ª–æ–≤: {len(photos)})\n\n"
            f"üèûÔ∏è –î–æ–±–∞–≤–∏–º –µ—â–µ –º–µ–¥–∏–∞‚ùî –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä‚ùì",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def request_piar_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request more photos"""
    context.user_data['waiting_for'] = 'piar_photo'
    
    photos_count = len(context.user_data.get('piar_data', {}).get('photos', []))
    remaining = Config.MAX_PHOTOS_PIAR - photos_count
    
    keyboard = [
        [InlineKeyboardButton("‚òëÔ∏è –î–∞–ª—å—à–µ", callback_data="piar:next_photo")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="piar:back")],
        [InlineKeyboardButton("üîö –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")]
    ]
    
    await update.callback_query.edit_message_text(
        f"üí° *–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ* (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {remaining}):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_piar_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show piar preview with media first, then buttons"""
    if 'piar_data' not in context.user_data:
        await update.callback_query.edit_message_text("üëπ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    data = context.user_data['piar_data']
    
    # Build preview text
    text = "üíå *–ó–∞—è–≤–∫–∞ –≤ –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥ - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä*\n\n"
    text += f"üôãüèº‚Äç‚ôÇÔ∏è *–ú–æ—ë –∏–º—è:* {data.get('name')}\n"
    text += f"üë∑üèΩ‚Äç‚ôÇÔ∏è *–£—Å–ª—É–≥–∞:* {data.get('profession')}\n"
    text += f"üèòÔ∏è *–†–∞–π–æ–Ω—ã:* {', '.join(data.get('districts', []))}\n"
    
    if data.get('phone'):
        text += f"ü§≥ *–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone')}\n"
    
    # –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts = []
    if data.get('instagram'):
        contacts.append(f"üüß Instagram: @{data.get('instagram')}")
    if data.get('telegram'):
        contacts.append(f"üî∑ Telegram: {data.get('telegram')}")
    
    if contacts:
        text += f"üìò *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n{chr(10).join(contacts)}\n"
    
    text += f"üí≥ *–ü—Ä–∞–π—Å:* {data.get('price')}\n\n"
    text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{data.get('description')}\n\n"
    
    if data.get('photos'):
        text += f"üíΩ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {len(data['photos'])}\n\n"
    
    text += "#–£—Å–ª—É–≥–∏ #–ö–∞—Ç–∞–ª–æ–≥–£—Å–ª—É–≥\n\n"
    text += Config.DEFAULT_SIGNATURE
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É", callback_data="piar:send"),
            InlineKeyboardButton("üîè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="piar:edit")
        ],
        [InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")]
    ]
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        if update.callback_query:
            await update.callback_query.delete_message()
    except:
        pass
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if data.get('media'):
        try:
            for i, media_item in enumerate(data['media'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –º–µ–¥–∏–∞
                caption = None
                if i == 0:  # –ü–µ—Ä–≤–æ–µ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
                    caption = f"üì∑ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã ({len(data['media'])} —à—Ç.)"
                
                if media_item.get('type') == 'photo':
                    await update.effective_message.reply_photo(
                        photo=media_item['file_id'],
                        caption=caption
                    )
                elif media_item.get('type') == 'video':
                    await update.effective_message.reply_video(
                        video=media_item['file_id'],
                        caption=caption
                    )
        except Exception as e:
            logger.error(f"Error showing piar media preview: {e}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    try:
        await update.effective_message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing piar preview: {e}")
        await update.effective_message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def send_piar_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send piar to moderation with safe DB handling"""
    user_id = update.effective_user.id
    data = context.user_data.get('piar_data', {})
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
        if not db.session_maker:
            logger.error("Database not available for piar")
            await update.callback_query.edit_message_text(
                "üö® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @trixilvebot"
            )
            return
        
        async with db.get_session() as session:
            # Get user
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.warning(f"User {user_id} not found for piar")
                await update.callback_query.edit_message_text(
                    "üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª–µ–π
            post_data = {
                'user_id': int(user_id),  # –Ø–≤–Ω–æ int
                'category': 'üôÖ –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥',
                'text': str(data.get('description', ''))[:1000],  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                'hashtags': ['#–£—Å–ª—É–≥–∏', '#–ö–∞—Ç–∞–ª–æ–≥–£—Å–ª—É–≥'],
                'is_piar': True,
                'piar_name': str(data.get('name', ''))[:100] if data.get('name') else None,
                'piar_profession': str(data.get('profession', ''))[:100] if data.get('profession') else None,
                'piar_districts': list(data.get('districts', [])) if data.get('districts') else [],
                'piar_phone': str(data.get('phone', ''))[:50] if data.get('phone') else None,
                'piar_price': str(data.get('price', ''))[:100] if data.get('price') else None,
                'piar_instagram': str(data.get('instagram', ''))[:100] if data.get('instagram') else None,
                'piar_telegram': str(data.get('telegram', ''))[:100] if data.get('telegram') else None,
                'piar_description': str(data.get('description', ''))[:1000] if data.get('description') else None,
                'media': list(data.get('media', [])) if data.get('media') else [],
                'anonymous': False,
                'status': PostStatus.PENDING
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            post = Post(**post_data)
            session.add(post)
            await session.flush()  # –ò–°–ü–†–ê–í–õ–ï–ù–û: flush –≤–º–µ—Å—Ç–æ commit –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            
            post_id = post.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
            logger.info(f"Created piar post with ID: {post_id}")
            
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º post –∏–∑ —Å–µ—Å—Å–∏–∏
            await session.refresh(post)
            
            # Send to moderation group
            await send_piar_to_mod_group_safe(update, context, post, user, data)
            
            # Clear user data
            context.user_data.pop('piar_data', None)
            context.user_data.pop('waiting_for', None)
            context.user_data.pop('piar_step', None)
            
            # Calculate next post time
            cooldown_minutes = Config.COOLDOWN_SECONDS // 60
            hours = cooldown_minutes // 60
            mins = cooldown_minutes % 60
            
            if hours > 0:
                next_post_time = f"{hours} —á–∞—Å–∞ {mins} –º–∏–Ω—É—Ç"
            else:
                next_post_time = f"{cooldown_minutes} –º–∏–Ω—É—Ç"
            
            # Show success message with channel promotion
            success_keyboard = [
                [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ù–∞—à –∫–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç", url="https://t.me/snghu")],
                [InlineKeyboardButton("üôÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")],
                [InlineKeyboardButton("üßç‚Äç‚ôÇÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
            ]
            
            await update.callback_query.edit_message_text(
                f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!*\n\n"
                f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ü–∏–∏ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                f"üí§ –°–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {next_post_time}\n\n"
                f"‚ÄºÔ∏è *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*",
                reply_markup=InlineKeyboardMarkup(success_keyboard),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in send_piar_to_moderation: {e}")
        await update.callback_query.edit_message_text(
            "üöó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–µ—É–¥–∞—á–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @trixilvebot üí•"
        )

async def send_piar_to_mod_group_safe(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                     post: Post, user: User, data: dict):
    """Send piar to moderation group with safe text handling"""
    bot = context.bot
    
    def escape_markdown(text):
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
        if not text:
            return text
        text = str(text)
        text = text.replace('*', '\\*')
        text = text.replace('_', '\\_')
        text = text.replace('[', '\\[')
        text = text.replace(']', '\\]')
        text = text.replace('`', '\\`')
        return text
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ markdown
    username = user.username if user.username else f"ID_{user.id}"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID –µ—Å–ª–∏ –Ω–µ—Ç username
    
    text = (
        f"‚≠êÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –≤ –ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥\n\n"
        f"üßç‚Äç‚ôÇÔ∏è –ê–≤—Ç–æ—Ä: @{username} (ID: {user.id})\n"
        f"üò± –î–∞—Ç–∞: {post.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–î–∞–Ω–Ω—ã–µ:\n"
        f"üòÄ –ò–º—è: {escape_markdown(data.get('name', ''))}\n"
        f"ü•± –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {escape_markdown(data.get('profession', ''))}\n"
        f"üè£ –†–∞–π–æ–Ω—ã: {escape_markdown(', '.join(data.get('districts', [])))}\n"
    )
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–ª–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤—ã—à–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    contacts = []
    if data.get('phone'):
        contacts.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {escape_markdown(data.get('phone'))}")
    if data.get('instagram'):
        contacts.append(f"üì∑ Instagram: @{escape_markdown(data.get('instagram'))}")
    if data.get('telegram'):
        contacts.append(f"üì± Telegram: {escape_markdown(data.get('telegram'))}")
    
    if contacts:
        text += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n{chr(10).join(contacts)}\n"
    
    text += f"üí∞ –¶–µ–Ω–∞: {escape_markdown(data.get('price', ''))}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    if data.get('media') and len(data['media']) > 0:
        text += f"üìé –ú–µ–¥–∏–∞: {len(data['media'])} —Ñ–∞–π–ª(–æ–≤)\n"
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = data.get('description', '')[:300]
    if len(data.get('description', '')) > 300:
        description += "..."
    text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{escape_markdown(description)}"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–ù–û–ü–ö–ò - —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É" –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"mod:approve:{post.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod:reject:{post.id}")
        ]
    ]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            await bot.get_chat(Config.MODERATION_GROUP_ID)
        except Exception as e:
            logger.error(f"Cannot access moderation group {Config.MODERATION_GROUP_ID}: {e}")
            await bot.send_message(
                chat_id=user.id,
                text="‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        media_sent = []
        if data.get('media') and len(data['media']) > 0:
            for i, media_item in enumerate(data['media']):
                try:
                    if media_item.get('type') == 'photo':
                        msg = await bot.send_photo(
                            chat_id=Config.MODERATION_GROUP_ID,
                            photo=media_item['file_id'],
                            caption=f"üì∑ –ú–µ–¥–∏–∞ {i+1}/{len(data['media'])}"
                        )
                        media_sent.append(msg.message_id)
                    elif media_item.get('type') == 'video':
                        msg = await bot.send_video(
                            chat_id=Config.MODERATION_GROUP_ID,
                            video=media_item['file_id'],
                            caption=f"üé• –ú–µ–¥–∏–∞ {i+1}/{len(data['media'])}"
                        )
                        media_sent.append(msg.message_id)
                except Exception as media_error:
                    logger.error(f"Error sending piar media {i+1}: {media_error}")
                    continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ë–ï–ó parse_mode
        try:
            message = await bot.send_message(
                chat_id=Config.MODERATION_GROUP_ID,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
                # –£–ë–†–ê–ù parse_mode='Markdown'
            )
            
            logger.info(f"Piar sent to moderation successfully. Post ID: {post.id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
            try:
                from sqlalchemy import text as sql_text
                async with db.get_session() as session:
                    await session.execute(
                        sql_text("UPDATE posts SET moderation_message_id = :msg_id WHERE id = :post_id"),
                        {"msg_id": message.message_id, "post_id": int(post.id)}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º int –≤–º–µ—Å—Ç–æ str
                    )
                    await session.commit()
            except Exception as save_error:
                logger.error(f"Error saving moderation_message_id for piar: {save_error}")
            
        except Exception as text_error:
            logger.error(f"Error sending piar text message: {text_error}")
            raise text_error
            
    except Exception as e:
        logger.error(f"Error sending piar to moderation: {e}")
        await bot.send_message(
            chat_id=user.id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def go_back_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Go back to previous step in piar form"""
    current_step = context.user_data.get('piar_step')
    
    if not current_step:
        await restart_piar_form(update, context)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    step_order = ['name', 'profession', 'districts', 'phone', 'instagram', 'telegram', 'price', 'description']
    
    try:
        current_index = step_order.index(current_step)
        if current_index > 0:
            prev_step = step_order[current_index - 1]
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
            for i, (step_field, step_name, step_text) in enumerate(PIAR_STEPS):
                if step_field == prev_step:
                    step_num = i + 1
                    
                    context.user_data['waiting_for'] = f'piar_{prev_step}'
                    context.user_data['piar_step'] = prev_step
                    
                    keyboard = []
                    if step_num > 1:
                        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="piar:back")])
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")])
                    
                    await update.callback_query.edit_message_text(
                        f"üôÖ *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É*\n\n"
                        f"–®–∞–≥ {step_num} –∏–∑ 8\n"
                        f"{step_text}",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    break
        else:
            await restart_piar_form(update, context)
    except:
        await restart_piar_form(update, context)

async def restart_piar_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Restart piar form from beginning"""
    context.user_data['piar_data'] = {}
    context.user_data['waiting_for'] = 'piar_name'
    context.user_data['piar_step'] = 'name'
    
    keyboard = [[InlineKeyboardButton("üóØÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]]
    
    text = (
        "üìë *–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ –≤—Å–µ–π –í–µ–Ω–≥—Ä–∏–∏.*\n"
        "üèπ *–¶–µ–ª—å –∫–∞—Ç–∞–ª–æ–≥–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∂–∏–∑–Ω—å —É–¥–æ–±–Ω–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ:*\n"
        "- –í–∞–º ‚Äî —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤,\n"
        "- –ª—é–¥—è–º ‚Äî –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∞—Ç—å –Ω—É–∂–Ω—ã–µ —É—Å–ª—É–≥–∏,\n"
        "- —Å–æ–æ–±—â–µ—Å—Ç–≤—É ‚Äî –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è.\n" 
        "üåü *–í–∞–∂–Ω–æ:* —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ ‚Äî —ç—Ç–æ –í–∞—à–∏ –±—É–¥—É—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã. –ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å, –∫–æ—Ç–æ—Ä—É—é –í—ã —É–∫–∞–∂–µ—Ç–µ –≤ –∑–∞—è–≤–∫–µ, –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. –û—Ç –í–∞—à–µ–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –í–∞—Å —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ, –∫–æ–º—É –Ω—É–∂–Ω—ã –∏–º–µ–Ω–Ω–æ –í–∞—à–∏ —É—Å–ª—É–≥–∏.\n\n"
        
        "–ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n"
        "üì© –û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
        
        "*–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥—ë–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É:*\n\n"
        "üí≠ *–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, –ø—Å–µ–≤–¥–æ–Ω–∏–º —Ç–¥., –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:*"
    )
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def cancel_piar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel piar creation"""
    context.user_data.pop('piar_data', None)
    context.user_data.pop('waiting_for', None)
    context.user_data.pop('piar_step', None)
    
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)
