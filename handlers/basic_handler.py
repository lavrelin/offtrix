# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.user_data import (
    update_user_activity, get_user_by_username, get_user_by_id,
    is_user_banned, lottery_participants
)
from services.admin_notifications import admin_notifications
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞"""
    user = update.effective_user
    chat = update.effective_chat
    
    text = f"üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID:**\n\nüë§ –í–∞—à ID: `{user.id}`"
    
    if chat.type != 'private':
        text += f"\nüí¨ ID —á–∞—Ç–∞: `{chat.id}`\nüìù –¢–∏–ø —á–∞—Ç–∞: {chat.type}"
        if chat.title:
            text += f"\nüè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}"
    
    update_user_activity(user.id, user.username)
    await update.message.reply_text(text, parse_mode='Markdown')

async def whois_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/whois @username` –∏–ª–∏\n"
            "`/whois ID`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    user_data = None
    
    if target.startswith('@'):
        username = target[1:]
        user_data = get_user_by_username(username)
    elif target.isdigit():
        user_id = int(target)
        user_data = get_user_by_id(user_id)
    
    if user_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        if user_data.get('banned'):
            status = "üö´ –ó–∞–±–∞–Ω–µ–Ω"
            ban_reason = user_data.get('ban_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            ban_date = user_data.get('banned_at', datetime.now()).strftime('%d.%m.%Y')
        
        mute_status = "–ù–µ—Ç"
        if user_data.get('muted_until') and user_data['muted_until'] > datetime.now():
            mute_status = f"–î–æ {user_data['muted_until'].strftime('%d.%m.%Y %H:%M')}"
            if status == "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω":
                status = "üîá –í –º—É—Ç–µ"
        
        text = (
            f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
            f"üÜî ID: `{user_data['id']}`\n"
            f"üë§ Username: @{user_data['username']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user_data['join_date'].strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['last_activity'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data['message_count']}\n"
            f"üîá –ú—É—Ç: {mute_status}"
        )
        
        if user_data.get('banned'):
            text += f"\n\nüö´ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–µ:**"
            text += f"\nüìù –ü—Ä–∏—á–∏–Ω–∞: {ban_reason}"
            text += f"\nüìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {ban_date}"
    else:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, update.effective_user.username)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö")
        return
    
    if user_id in lottery_participants:
        await update.message.reply_text(
            f"‚úÖ @{username}, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n"
            f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(lottery_participants)}"
        )
        return
    
    lottery_participants[user_id] = {
        'username': username,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"üéâ @{username}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(lottery_participants)}\n"
        f"üçÄ –£–¥–∞—á–∏!"
    )
    
    logger.info(f"User {user_id} joined lottery")

async def participants_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not lottery_participants:
        await update.message.reply_text("üìä –í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    text = f"üìä **–£–ß–ê–°–¢–ù–ò–ö–ò –†–û–ó–´–ì–†–´–®–ê:** {len(lottery_participants)}\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    sorted_participants = sorted(
        lottery_participants.items(),
        key=lambda x: x[1]['joined_at']
    )
    
    for i, (user_id, data) in enumerate(sorted_participants, 1):
        join_time = data['joined_at'].strftime('%d.%m %H:%M')
        text += f"{i}. @{data['username']} (ID: {user_id})\n"
        text += f"   üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {join_time}\n\n"
        
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 3500:
            await update.message.reply_text(text, parse_mode='Markdown')
            text = ""
    
    if text:
        await update.message.reply_text(text, parse_mode='Markdown')

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, update.effective_user.username)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\n"
            "`/report @username –ø—Ä–∏—á–∏–Ω–∞` - –∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "`/report –ø—Ä–∏—á–∏–Ω–∞` - –æ–±—â–∞—è –∂–∞–ª–æ–±–∞\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/report @baduser –°–ø–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`\n"
            "‚Ä¢ `/report –ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–Ω–∞–ª–µ`",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if context.args[0].startswith('@'):
        target = context.args[0]
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        target = "–û–±—â–∞—è –∂–∞–ª–æ–±–∞"
        reason = ' '.join(context.args)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–∏—á–∏–Ω—ã
    if len(reason) < 10:
        await update.message.reply_text(
            "‚ùå –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    try:
        await admin_notifications.notify_report(
            reporter=username,
            reporter_id=user_id,
            target=target,
            reason=reason
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ **–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "‚ö†Ô∏è –õ–æ–∂–Ω—ã–µ –∂–∞–ª–æ–±—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."
        )
        
        logger.info(f"Report from {username} (ID: {user_id}) about {target}: {reason}")
        
    except Exception as e:
        logger.error(f"Error sending report notification: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def start_lottery_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    global lottery_participants
    lottery_participants.clear()
    
    await update.message.reply_text(
        "üéâ **–ù–û–í–´–ô –†–û–ó–´–ì–†–´–® –ù–ê–ß–ê–õ–°–Ø!**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/join` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!\n\n"
        "üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0",
        parse_mode='Markdown'
    )
    
    logger.info(f"Lottery started by admin {update.effective_user.id}")

async def draw_lottery_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not lottery_participants:
        await update.message.reply_text("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        return
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    winners_count = 1
    if context.args and context.args[0].isdigit():
        winners_count = min(int(context.args[0]), len(lottery_participants))
    
    import random
    winners = random.sample(list(lottery_participants.items()), winners_count)
    
    result_text = "üéâ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–ó–´–ì–†–´–®–ê!**\n\n"
    result_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(lottery_participants)}\n"
    result_text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_count}\n\n"
    
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    
    for i, (user_id, data) in enumerate(winners, 1):
        medal = medals.get(i, f"{i}.")
        result_text += f"{medal} @{data['username']}\n"
    
    result_text += "\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
    
    await update.message.reply_text(result_text, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    winners_list = [{"username": data['username'], "user_id": user_id} for user_id, data in winners]
    await admin_notifications.notify_roll_winner(
        game_version="lottery",
        winners=winners_list
    )
    
    logger.info(f"Lottery drawn by admin {update.effective_user.id}, winners: {[w[1]['username'] for w in winners]}")

async def clear_lottery_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    global lottery_participants
    count = len(lottery_participants)
    lottery_participants.clear()
    
    await update.message.reply_text(
        f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω\n"
        f"üìä –£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}"
    )
    
    logger.info(f"Lottery cleared by admin {update.effective_user.id}")

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'id_command',
    'whois_command',
    'join_command',
    'participants_command',
    'report_command',
    'start_lottery_command',
    'draw_lottery_command',
    'clear_lottery_command'
]
