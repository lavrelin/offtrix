# -*- coding: utf-8 -*-
"""
Publication Handler v6.0 - SIMPLIFIED
Prefix: post_ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π)
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: –ü–æ—Å—Ç—ã –≤ –ë—É–¥–∞–ø–µ—à—Ç –∏ –ë–∞—Ä–∞—Ö–æ–ª–∫—É
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from services.cooldown import cooldown_service
from services.filter_service import FilterService
from models import User, Post, PostStatus
from sqlalchemy import select
import logging

logger = logging.getLogger(__name__)

# ============= –£–ù–ò–ö–ê–õ–¨–ù–´–ï CALLBACK –ü–†–ï–§–ò–ö–°–´: post_ =============
POST_CALLBACKS = {
    'preview': 'post_preview',          # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    'send': 'post_send',                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    'edit': 'post_edit',                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    'cancel': 'post_cancel',            # –û—Ç–º–µ–Ω–∏—Ç—å
    'add_media': 'post_add_media',      # –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞
}

async def handle_post_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unified post callback handler"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    logger.info(f"Post action: {action}")
    
    handlers = {
        POST_CALLBACKS['preview']: show_post_preview,
        POST_CALLBACKS['send']: send_post_to_moderation,
        POST_CALLBACKS['edit']: edit_post_text,
        POST_CALLBACKS['cancel']: cancel_post,
        POST_CALLBACKS['add_media']: request_post_media,
    }
    
    handler = handlers.get(action)
    if handler:
        await handler(update, context)
    else:
        await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

# ============= –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê =============

async def handle_post_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    waiting_for = context.user_data.get('waiting_for')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç (budapest –∏–ª–∏ baraholka)
    if waiting_for not in ['budapest_text', 'baraholka_text']:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
    text = update.message.text or update.message.caption
    if not text:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    filter_service = FilterService()
    if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞!")
        return True
    
    if 'post_data' not in context.user_data:
        await update.message.reply_text("ü§î –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å. /start")
        return True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    context.user_data['post_data']['text'] = text
    context.user_data['post_data']['media'] = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
    if update.message.photo:
        context.user_data['post_data']['media'].append({
            'type': 'photo',
            'file_id': update.message.photo[-1].file_id
        })
    elif update.message.video:
        context.user_data['post_data']['media'].append({
            'type': 'video',
            'file_id': update.message.video.file_id
        })
    
    keyboard = [
        [
            InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data=POST_CALLBACKS['add_media']),
            InlineKeyboardButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=POST_CALLBACKS['preview'])
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=POST_CALLBACKS['cancel'])]
    ]
    
    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    context.user_data['waiting_for'] = None
    return True

# ============= –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê =============

async def handle_post_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    if 'post_data' not in context.user_data:
        return False
    
    post_type = context.user_data['post_data'].get('type')
    if post_type not in ['budapest', 'baraholka']:
        return False
    
    if 'media' not in context.user_data['post_data']:
        context.user_data['post_data']['media'] = []
    
    media_added = False
    
    if update.message.photo:
        context.user_data['post_data']['media'].append({
            'type': 'photo',
            'file_id': update.message.photo[-1].file_id
        })
        media_added = True
    elif update.message.video:
        context.user_data['post_data']['media'].append({
            'type': 'video',
            'file_id': update.message.video.file_id
        })
        media_added = True
    elif update.message.document:
        context.user_data['post_data']['media'].append({
            'type': 'document',
            'file_id': update.message.document.file_id
        })
        media_added = True
    
    if media_added:
        total = len(context.user_data['post_data']['media'])
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –ï—â–µ –º–µ–¥–∏–∞", callback_data=POST_CALLBACKS['add_media']),
                InlineKeyboardButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=POST_CALLBACKS['preview'])
            ]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (–≤—Å–µ–≥–æ: {total})",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
    
    return False

# ============= –ü–†–ï–î–ü–†–û–°–ú–û–¢–† =============

async def show_post_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞"""
    if 'post_data' not in context.user_data:
        await update.callback_query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    post_data = context.user_data['post_data']
    post_type = post_data.get('type', 'budapest')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = post_data.get('text', '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    if post_type == 'budapest':
        hashtags = "#–ë—É–¥–∞–ø–µ—à—Ç"
        if post_data.get('anonymous'):
            text += f"\n\n{hashtags}"
        else:
            username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"\n\n{hashtags}\nüìù @{username}"
    elif post_type == 'baraholka':
        section = post_data.get('subcategory', '')
        username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"\n\n#–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ #{section}\nüìù @{username}"
    
    text += f"\n\n{Config.DEFAULT_SIGNATURE}"
    
    # –ö–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=POST_CALLBACKS['send']),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=POST_CALLBACKS['edit'])
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=POST_CALLBACKS['cancel'])]
    ]
    
    try:
        await update.callback_query.delete_message()
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–¥–∏–∞
    media = post_data.get('media', [])
    if media:
        for i, item in enumerate(media[:5]):
            try:
                caption = f"üìé –ú–µ–¥–∏–∞ ({len(media)} —à—Ç.)" if i == 0 else None
                if item['type'] == 'photo':
                    await update.effective_message.reply_photo(
                        photo=item['file_id'], 
                        caption=caption
                    )
                elif item['type'] == 'video':
                    await update.effective_message.reply_video(
                        video=item['file_id'], 
                        caption=caption
                    )
            except Exception as e:
                logger.error(f"Error showing media: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.effective_message.reply_text(
        f"üëÅÔ∏è **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:**\n\n{text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= –û–¢–ü–†–ê–í–ö–ê –ù–ê –ú–û–î–ï–†–ê–¶–ò–Æ =============

async def send_post_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    user_id = update.effective_user.id
    post_data = context.user_data.get('post_data')
    
    if not post_data:
        await update.callback_query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    try:
        if not db.session_maker:
            await update.callback_query.edit_message_text("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        async with db.get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            
            if not user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            can_post, remaining = await cooldown_service.check_cooldown(
                user_id, 'post', Config.COOLDOWN_SECONDS
            )
            
            if not can_post and not Config.is_moderator(user_id):
                hours = remaining // 3600
                minutes = (remaining % 3600) // 60
                await update.callback_query.edit_message_text(
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            post = Post(
                user_id=int(user_id),
                category=str(post_data.get('category', ''))[:255],
                subcategory=str(post_data.get('subcategory', ''))[:255] if post_data.get('subcategory') else None,
                text=str(post_data.get('text', ''))[:4096],
                hashtags=[], 
                anonymous=bool(post_data.get('anonymous', False)),
                media=list(post_data.get('media', [])),
                status=PostStatus.PENDING,
                is_piar=False
            )
            session.add(post)
            await session.flush()
            await session.commit()
            await session.refresh(post)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            await send_to_mod_group(update, context, post, user, post_data)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown
            await cooldown_service.set_cooldown(user_id, 'post', Config.COOLDOWN_SECONDS)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('post_data', None)
            context.user_data.pop('waiting_for', None)
            
            await update.callback_query.edit_message_text(
                "‚úÖ **–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!**\n\n"
                "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é."
            )
            
    except Exception as e:
        logger.error(f"Error sending post: {e}", exc_info=True)
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")

async def send_to_mod_group(update: Update, context: ContextTypes.DEFAULT_TYPE,
                            post: Post, user: User, post_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    bot = context.bot
    username = user.username or f"ID_{user.id}"
    
    post_type = post_data.get('type', 'budapest')
    anonymous = post_data.get('anonymous', False)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    mod_text = f"üìù **–ù–û–í–´–ô –ü–û–°–¢**\n\n"
    
    if post_type == 'budapest':
        mod_text += f"üìç –ö–∞–Ω–∞–ª: –ë—É–¥–∞–ø–µ—à—Ç\n"
        mod_text += f"üë§ –û—Ç: @{username} (ID: {user.id})\n"
        mod_text += f"üé≠ –¢–∏–ø: {'–ê–Ω–æ–Ω–∏–º–Ω–æ' if anonymous else '–° username'}\n\n"
    elif post_type == 'baraholka':
        section = post_data.get('subcategory', '')
        mod_text += f"üìç –ö–∞–Ω–∞–ª: –ë–∞—Ä–∞—Ö–æ–ª–∫–∞ - {section}\n"
        mod_text += f"üë§ –û—Ç: @{username} (ID: {user.id})\n\n"
    
    mod_text += f"üìù –¢–µ–∫—Å—Ç:\n{post.text[:500]}"
    if len(post.text) > 500:
        mod_text += "..."
    
    if post.media:
        mod_text += f"\n\nüìé –ú–µ–¥–∏–∞: {len(post.media)} —Ñ–∞–π–ª(–æ–≤)"
    
    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    keyboard = [[
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"mod_approve:{post.id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_reject:{post.id}")
    ]]
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞
        if post.media:
            for item in post.media[:3]:
                try:
                    if item['type'] == 'photo':
                        await bot.send_photo(Config.MODERATION_GROUP_ID, item['file_id'])
                    elif item['type'] == 'video':
                        await bot.send_video(Config.MODERATION_GROUP_ID, item['file_id'])
                except Exception as e:
                    logger.error(f"Error sending media to mod: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_message(
            Config.MODERATION_GROUP_ID,
            mod_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        logger.info(f"Post {post.id} sent to moderation")
        
    except Exception as e:
        logger.error(f"Error sending to mod group: {e}")

# ============= –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø =============

async def request_post_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
    context.user_data['waiting_for'] = 'post_media'
    keyboard = [[InlineKeyboardButton("üîô –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=POST_CALLBACKS['preview'])]]
    await update.callback_query.edit_message_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def edit_post_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"""
    post_type = context.user_data.get('post_data', {}).get('type', 'budapest')
    
    if post_type == 'budapest':
        context.user_data['waiting_for'] = 'budapest_text'
    elif post_type == 'baraholka':
        context.user_data['waiting_for'] = 'baraholka_text'
    
    keyboard = [[InlineKeyboardButton("üîô –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=POST_CALLBACKS['preview'])]]
    await update.callback_query.edit_message_text(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    context.user_data.pop('post_data', None)
    context.user_data.pop('waiting_for', None)
    
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)

__all__ = [
    'handle_post_callback', 
    'handle_post_text_input', 
    'handle_post_media_input',
    'POST_CALLBACKS'
]
