# -*- coding: utf-8 -*-
"""
Optimized Publication Handler
Prefix: pbc_ (publication callback)
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from services.cooldown import CooldownService
from services.hashtags import HashtagService
from services.filter_service import FilterService
from models import User, Post, PostStatus
from sqlalchemy import select
import logging

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIX: pbc_ =============
PUB_CALLBACKS = {
    'buy': 'pbc_buy', 'work': 'pbc_wrk', 'rent': 'pbc_rnt',
    'sell': 'pbc_sell', 'free': 'pbc_free', 'crypto': 'pbc_cry',
    'other': 'pbc_oth', 'events': 'pbc_evt',
    'preview': 'pbc_prv', 'send': 'pbc_snd', 'edit': 'pbc_edt',
    'cancel': 'pbc_cnl', 'cancel_confirm': 'pbc_cnc',
    'add_media': 'pbc_adm', 'back': 'pbc_bck'
}

SUBCATEGORY_NAMES = {
    'buy': 'üïµüèª‚Äç‚ôÄÔ∏è –ö—É–ø–ª—é', 'work': 'üë∑ –†–∞–±–æ—Ç–∞', 'rent': 'üèöÔ∏è –ê—Ä–µ–Ω–¥–∞',
    'sell': 'üïµüèΩ –ü—Ä–æ–¥–∞–º', 'events': 'üéâ –°–æ–±—ã—Ç–∏—è', 'free': 'üïµüèº –û—Ç–¥–∞–º',
    'other': '‚ùî –î—Ä—É–≥–æ–µ', 'crypto': 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'
}

async def handle_publication_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unified publication callback handler"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    logger.info(f"Publication action: {action}")
    
    # Category selection
    if action in [PUB_CALLBACKS[k] for k in SUBCATEGORY_NAMES.keys()]:
        subcategory_key = next(k for k, v in PUB_CALLBACKS.items() if v == action)
        await start_post_creation(update, context, subcategory_key)
        return
    
    # Action handlers
    handlers = {
        PUB_CALLBACKS['preview']: show_preview,
        PUB_CALLBACKS['send']: send_to_moderation,
        PUB_CALLBACKS['edit']: edit_post,
        PUB_CALLBACKS['cancel']: cancel_post_with_reason,
        PUB_CALLBACKS['cancel_confirm']: cancel_post,
        PUB_CALLBACKS['add_media']: request_media,
        PUB_CALLBACKS['back']: show_preview
    }
    
    handler = handlers.get(action)
    if handler:
        await handler(update, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

async def start_post_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, subcategory: str):
    """Start post creation"""
    context.user_data['post_data'] = {
        'category': 'üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç',
        'subcategory': SUBCATEGORY_NAMES.get(subcategory, '‚ùî –î—Ä—É–≥–æ–µ'),
        'anonymous': False
    }

    keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="mnc_ann")]]
    
    await update.callback_query.edit_message_text(
        f"üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç ‚Üí {SUBCATEGORY_NAMES.get(subcategory)}\n\n"
        "üí• –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    context.user_data['waiting_for'] = 'post_text'

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input"""
    # Check for media with caption
    if (update.message.photo or update.message.video) and update.message.caption:
        text = update.message.caption
        if context.user_data.get('waiting_for') == 'post_text':
            filter_service = FilterService()
            if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
                await update.message.reply_text("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞!")
                return
            
            if 'post_data' not in context.user_data:
                context.user_data['post_data'] = {}
            
            context.user_data['post_data']['text'] = text
            context.user_data['post_data']['media'] = []
            
            # Save media
            if update.message.photo:
                context.user_data['post_data']['media'].append({
                    'type': 'photo',
                    'file_id': update.message.photo[-1].file_id
                })
            elif update.message.video:
                context.user_data['post_data']['media'].append({
                    'type': 'video',
                    'file_id': update.message.video.file_id
                })
            
            keyboard = [
                [
                    InlineKeyboardButton("üì∏ –ï—â–µ –º–µ–¥–∏–∞", callback_data=PUB_CALLBACKS['add_media']),
                    InlineKeyboardButton("üíª –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=PUB_CALLBACKS['preview'])
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=PUB_CALLBACKS['back'])]
            ]
            
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data['waiting_for'] = None
            return
    
    # Text only
    if not context.user_data.get('waiting_for') == 'post_text':
        return
    
    text = update.message.text or update.message.caption
    if not text:
        return
    
    filter_service = FilterService()
    if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞!")
        return
    
    if 'post_data' not in context.user_data:
        await update.message.reply_text("ü§î –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å. /start")
        return
    
    context.user_data['post_data']['text'] = text
    context.user_data['post_data']['media'] = []
    
    keyboard = [
        [
            InlineKeyboardButton("üìπ –ú–µ–¥–∏–∞", callback_data=PUB_CALLBACKS['add_media']),
            InlineKeyboardButton("üíÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=PUB_CALLBACKS['preview'])
        ],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è –ù–∞–∑–∞–¥", callback_data="mnc_bk")]
    ]
    
    await update.message.reply_text(
        "üéâ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['waiting_for'] = None

async def handle_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle media input"""
    if 'post_data' not in context.user_data:
        return
    
    if 'media' not in context.user_data['post_data']:
        context.user_data['post_data']['media'] = []
    
    media_added = False
    
    if update.message.photo:
        context.user_data['post_data']['media'].append({
            'type': 'photo',
            'file_id': update.message.photo[-1].file_id
        })
        media_added = True
    elif update.message.video:
        context.user_data['post_data']['media'].append({
            'type': 'video',
            'file_id': update.message.video.file_id
        })
        media_added = True
    elif update.message.document:
        context.user_data['post_data']['media'].append({
            'type': 'document',
            'file_id': update.message.document.file_id
        })
        media_added = True
    
    if media_added:
        total = len(context.user_data['post_data']['media'])
        keyboard = [
            [
                InlineKeyboardButton("üíö –ï—â–µ", callback_data=PUB_CALLBACKS['add_media']),
                InlineKeyboardButton("ü§© –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=PUB_CALLBACKS['preview'])
            ]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω–æ! ({total})",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show preview"""
    if 'post_data' not in context.user_data:
        await update.callback_query.edit_message_text("üòµ –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    post_data = context.user_data['post_data']
    
    # Generate hashtags
    hashtag_service = HashtagService()
    if post_data.get('is_actual'):
        hashtags = ['#–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ‚ö°Ô∏è', '@Trixlivebot']
    else:
        hashtags = hashtag_service.generate_hashtags(
            post_data.get('category'),
            post_data.get('subcategory')
        )
    
    preview_text = f"{post_data.get('text', '')}\n\n{' '.join(hashtags)}\n\n{Config.DEFAULT_SIGNATURE}"
    
    keyboard = [
        [
            InlineKeyboardButton("üì® –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data=PUB_CALLBACKS['send']),
            InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=PUB_CALLBACKS['edit'])
        ],
        [InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data=PUB_CALLBACKS['cancel'])]
    ]
    
    try:
        await update.callback_query.delete_message()
    except:
        pass
    
    # Show media first
    media = post_data.get('media', [])
    if media:
        for i, item in enumerate(media[:5]):
            try:
                caption = f"üíø –ú–µ–¥–∏–∞ ({len(media)} —à—Ç.)" if i == 0 else None
                if item['type'] == 'photo':
                    await update.effective_message.reply_photo(photo=item['file_id'], caption=caption)
                elif item['type'] == 'video':
                    await update.effective_message.reply_video(video=item['file_id'], caption=caption)
            except Exception as e:
                logger.error(f"Preview media error: {e}")
    
    # Show text with buttons
    await update.effective_message.reply_text(
        f"ü´£ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:*\n\n{preview_text}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def send_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send to moderation"""
    user_id = update.effective_user.id
    post_data = context.user_data.get('post_data')
    
    if not post_data:
        await update.callback_query.edit_message_text("üí• –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    try:
        if not db.session_maker:
            await update.callback_query.edit_message_text("üòñ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        async with db.get_session() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            
            if not user:
                await update.callback_query.edit_message_text("üò© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. /start")
                return
            
            # Check cooldown
            from services.cooldown import cooldown_service
            try:
                can_post, remaining = await cooldown_service.can_post(user_id)
            except:
                can_post = cooldown_service.simple_can_post(user_id)
                remaining = cooldown_service.get_remaining_time(user_id)
            
            if not can_post and not Config.is_moderator(user_id):
                await update.callback_query.edit_message_text(
                    f"üí§ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining // 60} –º–∏–Ω—É—Ç"
                )
                return
            
            # Create post
            post = Post(
                user_id=int(user_id),
                category=str(post_data.get('category', ''))[:255],
                subcategory=str(post_data.get('subcategory', ''))[:255],
                text=str(post_data.get('text', ''))[:4096],
                hashtags=list(post_data.get('hashtags', [])),
                anonymous=bool(post_data.get('anonymous', False)),
                media=list(post_data.get('media', [])),
                status=PostStatus.PENDING,
                is_piar=False
            )
            session.add(post)
            await session.flush()
            await session.commit()
            await session.refresh(post)
            
            # Send to mod group
            await send_to_mod_group(update, context, post, user)
            
            # Update cooldown
            try:
                await cooldown_service.update_cooldown(user_id)
            except:
                cooldown_service.set_last_post_time(user_id)
            
            context.user_data.pop('post_data', None)
            context.user_data.pop('waiting_for', None)
            
            await update.callback_query.edit_message_text(
                "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n‚èπÔ∏è –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –õ–°"
            )
            
    except Exception as e:
        logger.error(f"Send to moderation error: {e}", exc_info=True)
        await update.callback_query.edit_message_text("üòñ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

async def send_to_mod_group(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                            post: Post, user: User):
    """Send to moderation group - compact version"""
    bot = context.bot
    is_actual = context.user_data.get('post_data', {}).get('is_actual', False)
    
    username = user.username or f"ID_{user.id}"
    mod_text = (
        f"{'‚ö°Ô∏è –ê–ö–¢–£–ê–õ–¨–ù–û–ï' if is_actual else 'üö® –ó–∞—è–≤–æ—á–∫–∞'}\n\n"
        f"üíå @{username} (ID: {user.id})\n"
        f"üìö {post.category}"
    )
    
    if post.subcategory:
        mod_text += f" ‚Üí {post.subcategory}"
    if post.text:
        mod_text += f"\n\nüìù {post.text[:300]}..."
    
    keyboard = [[
        InlineKeyboardButton(
            "‚úÖ –í –ß–ê–¢" if is_actual else "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
            callback_data=f"mdc_{'ac' if is_actual else 'ap'}:{post.id}"
        ),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mdc_rj:{post.id}")
    ]]
    
    try:
        # Send media
        if post.media:
            for item in post.media[:3]:
                if item['type'] == 'photo':
                    await bot.send_photo(Config.MODERATION_GROUP_ID, item['file_id'])
                elif item['type'] == 'video':
                    await bot.send_video(Config.MODERATION_GROUP_ID, item['file_id'])
        
        # Send text with buttons
        await bot.send_message(
            Config.MODERATION_GROUP_ID,
            mod_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Send to mod group error: {e}")

async def request_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request media"""
    context.user_data['waiting_for'] = 'post_media'
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=PUB_CALLBACKS['preview'])]]
    await update.callback_query.edit_message_text(
        "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def edit_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit post"""
    context.user_data['waiting_for'] = 'post_text'
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=PUB_CALLBACKS['preview'])]]
    await update.callback_query.edit_message_text(
        "‚úèÔ∏è –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_post_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask cancellation reason"""
    keyboard = [
        [InlineKeyboardButton("ü§î –ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data=PUB_CALLBACKS['cancel_confirm'])],
        [InlineKeyboardButton("üëé –û—à–∏–±–∫–∞", callback_data=PUB_CALLBACKS['cancel_confirm'])],
        [InlineKeyboardButton("üëà–ù–∞–∑–∞–¥", callback_data=PUB_CALLBACKS['preview'])]
    ]
    await update.callback_query.edit_message_text(
        "üí≠ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel post"""
    context.user_data.pop('post_data', None)
    context.user_data.pop('waiting_for', None)
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)

__all__ = ['handle_publication_callback', 'handle_text_input', 'handle_media_input', 'PUB_CALLBACKS']
