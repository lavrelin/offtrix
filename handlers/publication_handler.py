# -*- coding: utf-8 -*-
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from services.cooldown import CooldownService
from services.hashtags import HashtagService
from services.filter_service import FilterService
from models import User, Post, PostStatus
from sqlalchemy import select
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

async def handle_publication_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle publication callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "cat":
        # Subcategory selected
        subcategory = data[2] if len(data) > 2 else None
        await start_post_creation(update, context, subcategory)
    elif action == "preview":
        await show_preview(update, context)
    elif action == "send":
        await send_to_moderation(update, context)
    elif action == "edit":
        await edit_post(update, context)
    elif action == "cancel":
        await cancel_post_with_reason(update, context)
    elif action == "cancel_confirm":
        await cancel_post(update, context)
    elif action == "add_media":
        await request_media(update, context)
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await show_preview(update, context)

async def start_post_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, subcategory: str):
    """Start creating a post with selected subcategory"""
    subcategory_names = {
        'work': 'üë∑ –†–∞–±–æ—Ç–∞',
        'rent': 'üèöÔ∏è –ê—Ä–µ–Ω–¥–∞',
        'buy': 'üïµüèª‚Äç‚ôÄÔ∏è –ö—É–ø–ª—é',
        'sell': 'üïµüèΩ –ü—Ä–æ–¥–∞–º',
        'events': 'üéâ –°–æ–±—ã—Ç–∏—è',
        'free': 'üïµüèº –û—Ç–¥–∞–º –¥–∞—Ä–æ–º',
        'important': '‚úñÔ∏è—É–µ –ë—É–¥–∞–ø–µ—à—Ç',
        'other': '‚ùî –î—Ä—É–≥–æ–µ'
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    context.user_data['post_data'] = {
        'category': 'üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç',
        'subcategory': subcategory_names.get(subcategory, '‚ùî –î—Ä—É–≥–æ–µ'),
        'anonymous': False
    }

    keyboard = [[InlineKeyboardButton("‚èÆÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu:announcements")]]
    
    await update.callback_query.edit_message_text(
        f"üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç ‚Üí ‚ÄºÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è ‚Üí {subcategory_names.get(subcategory)}\n\n"
        "üí• –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    context.user_data['waiting_for'] = 'post_text'

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    has_media = update.message.photo or update.message.video or update.message.document
    
    # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (caption)
    if has_media and update.message.caption:
        text = update.message.caption
        
        # –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        if context.user_data.get('waiting_for') == 'post_text':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            filter_service = FilterService()
            if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
                await handle_link_violation(update, context)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            if 'post_data' not in context.user_data:
                context.user_data['post_data'] = {}
            
            context.user_data['post_data']['text'] = text
            context.user_data['post_data']['media'] = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
            if update.message.photo:
                context.user_data['post_data']['media'].append({
                    'type': 'photo',
                    'file_id': update.message.photo[-1].file_id
                })
            elif update.message.video:
                context.user_data['post_data']['media'].append({
                    'type': 'video',
                    'file_id': update.message.video.file_id
                })
            elif update.message.document:
                context.user_data['post_data']['media'].append({
                    'type': 'document',
                    'file_id': update.message.document.file_id
                })
            
            keyboard = [
                [
                    InlineKeyboardButton("üì∏ –ï—â–µ –º–µ–¥–∏–∞?", callback_data="pub:add_media"),
                    InlineKeyboardButton("üíª –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
                ],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu:back")]
            ]
            
            await update.message.reply_text(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                "üíö –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ–¥–∏–∞ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            context.user_data['waiting_for'] = None
            return
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞
    if 'waiting_for' not in context.user_data:
        return
    
    waiting_for = context.user_data['waiting_for']
    text = update.message.text if update.message.text else update.message.caption
    
    if not text:
        return
    
    logger.info(f"Text input received. waiting_for: {waiting_for}")
    
    if waiting_for == 'post_text':
        # Check for links
        filter_service = FilterService()
        if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
            await handle_link_violation(update, context)
            return
        
        if 'post_data' not in context.user_data:
            await update.message.reply_text(
                "ü§î –£–ø—Å! –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å.\n"
                "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ —Å /start"
            )
            context.user_data.pop('waiting_for', None)
            return
        
        context.user_data['post_data']['text'] = text
        context.user_data['post_data']['media'] = []
        
        keyboard = [
            [
                InlineKeyboardButton("üìπ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="pub:add_media"),
                InlineKeyboardButton("üíÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
            ],
            [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—é!\n\n"
            "üíö –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        context.user_data['waiting_for'] = None
        
    elif waiting_for == 'cancel_reason':
        context.user_data['cancel_reason'] = text
        await cancel_post(update, context)
        
    elif waiting_for.startswith('piar_'):
        from handlers.piar_handler import handle_piar_text
        field = waiting_for.replace('piar_', '')
        await handle_piar_text(update, context, field, text)

async def handle_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle media input from user"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
    if 'post_data' not in context.user_data:
        return
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–µ–¥–∏–∞ –¥–∞–∂–µ –µ—Å–ª–∏ waiting_for –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if 'media' not in context.user_data['post_data']:
        context.user_data['post_data']['media'] = []
    
    media_added = False
    
    if update.message.photo:
        # Get highest quality photo
        context.user_data['post_data']['media'].append({
            'type': 'photo',
            'file_id': update.message.photo[-1].file_id
        })
        media_added = True
        logger.info(f"Added photo: {update.message.photo[-1].file_id}")
        
    elif update.message.video:
        context.user_data['post_data']['media'].append({
            'type': 'video',
            'file_id': update.message.video.file_id
        })
        media_added = True
        logger.info(f"Added video: {update.message.video.file_id}")
        
    elif update.message.document:
        context.user_data['post_data']['media'].append({
            'type': 'document',
            'file_id': update.message.document.file_id
        })
        media_added = True
        logger.info(f"Added document: {update.message.document.file_id}")
    
    if media_added:
        total_media = len(context.user_data['post_data']['media'])
        
        keyboard = [
            [
                InlineKeyboardButton(f"üíö –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="pub:add_media"),
                InlineKeyboardButton("ü§© –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
            ],
            [InlineKeyboardButton("üö∂ –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω–æ! (–í—Å–µ–≥–æ: {total_media})\n\n"
            "üíö –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        context.user_data['waiting_for'] = None

async def request_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request media from user"""
    context.user_data['waiting_for'] = 'post_media'
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pub:preview")]]
    
    await update.callback_query.edit_message_text(
        "üìπ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show post preview with media first, then buttons"""
    if 'post_data' not in context.user_data:
        await update.callback_query.edit_message_text("üòµ –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    post_data = context.user_data['post_data']
    
    # Generate hashtags
    hashtag_service = HashtagService()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ê–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ
    if post_data.get('is_actual'):
        hashtags = ['#–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ‚ö°Ô∏è', '@Trixlivebot']
    else:
        hashtags = hashtag_service.generate_hashtags(
            post_data.get('category'),
            post_data.get('subcategory')
        )
    
    # Build preview text
    preview_text = f"{post_data.get('text', '')}\n\n"
    preview_text += f"{' '.join(hashtags)}\n\n"
    preview_text += Config.DEFAULT_SIGNATURE
    
    keyboard = [
        [
            InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="pub:send"),
            InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="pub:edit")
        ],
        [InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="pub:cancel")]
    ]
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        if update.callback_query:
            await update.callback_query.delete_message()
    except:
        pass
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    media = post_data.get('media', [])
    if media:
        try:
            for i, media_item in enumerate(media[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
                caption = None
                if i == 0:  # –ü–µ—Ä–≤–æ–µ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
                    caption = f"üíø –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã ({len(media)} —à—Ç.)"
                
                if media_item.get('type') == 'photo':
                    await update.effective_message.reply_photo(
                        photo=media_item['file_id'],
                        caption=caption
                    )
                elif media_item.get('type') == 'video':
                    await update.effective_message.reply_video(
                        video=media_item['file_id'],
                        caption=caption
                    )
                elif media_item.get('type') == 'document':
                    await update.effective_message.reply_document(
                        document=media_item['file_id'],
                        caption=caption
                    )
        except Exception as e:
            logger.error(f"Error showing media preview: {e}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    try:
        await update.effective_message.reply_text(
            f"ü´£ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{preview_text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending preview text: {e}")
        # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.effective_message.reply_text(
            f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:\n\n{preview_text}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def send_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send post to moderation with fixed cooldown check"""
    user_id = update.effective_user.id
    post_data = context.user_data.get('post_data')
    
    if not post_data:
        await update.callback_query.edit_message_text("üí• –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
        if not db.session_maker:
            logger.error("Database not available")
            await update.callback_query.edit_message_text(
                "üòñ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        async with db.get_session() as session:
            # Get user
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.warning(f"User {user_id} not found in database")
                await update.callback_query.edit_message_text(
                    "üò© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ - —Å await
            from services.cooldown import CooldownService
            cooldown_service = CooldownService()
            
            try:
                can_post, remaining_seconds = await cooldown_service.can_post(user_id)
            except Exception as cooldown_error:
                logger.warning(f"Cooldown check failed: {cooldown_error}, using fallback")
                # Fallback to simple check
                can_post = cooldown_service.simple_can_post(user_id)
                remaining_seconds = cooldown_service.get_remaining_time(user_id)
            
            if not can_post and not Config.is_moderator(user_id):
                remaining_minutes = remaining_seconds // 60
                await update.callback_query.edit_message_text(
                    f"üí§ –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ {remaining_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞"
                )
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ª–µ–π
            create_post_data = {
                'user_id': int(user_id),
                'category': str(post_data.get('category', ''))[:255] if post_data.get('category') else None,
                'subcategory': str(post_data.get('subcategory', ''))[:255] if post_data.get('subcategory') else None,
                'text': str(post_data.get('text', ''))[:4096] if post_data.get('text') else None,
                'hashtags': list(post_data.get('hashtags', [])),
                'anonymous': bool(post_data.get('anonymous', False)),
                'media': list(post_data.get('media', [])),
                'status': PostStatus.PENDING,
                'is_piar': False
            }
            
            # Create post
            post = Post(**create_post_data)
            session.add(post)
            await session.flush()  # –ò–°–ü–†–ê–í–õ–ï–ù–û: flush –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            
            post_id = post.id
            logger.info(f"Created post with ID: {post_id}")
            
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º post –∏–∑ —Å–µ—Å—Å–∏–∏
            await session.refresh(post)
            
            # Send to moderation
            await send_to_moderation_group(update, context, post, user)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
            try:
                await cooldown_service.update_cooldown(user_id)
            except Exception:
                cooldown_service.set_last_post_time(user_id)  # fallback
            
            # –ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data.pop('post_data', None)
            context.user_data.pop('waiting_for', None)
            
            await update.callback_query.edit_message_text(
                "‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
                "‚èπÔ∏è –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –õ–°"
            )
            
    except Exception as e:
        logger.error(f"Error sending to moderation: {e}")
        await update.callback_query.edit_message_text(
            "üòñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
        )

async def send_to_moderation_group(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   post: Post, user: User):
    """Send post to moderation group with safe markdown parsing"""
    bot = context.bot
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç
    is_actual = context.user_data.get('post_data', {}).get('is_actual', False)
    target_group = Config.MODERATION_GROUP_ID
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è markdown —Å–∏–º–≤–æ–ª–æ–≤
    def escape_markdown(text):
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã markdown"""
        if not text:
            return text
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = str(text)
        text = text.replace('*', '\\*')
        text = text.replace('_', '\\_')
        text = text.replace('[', '\\[')
        text = text.replace(']', '\\]')
        text = text.replace('`', '\\`')
        return text
    
    # =========================
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–ë–ï–ó MARKDOWN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    # =========================
    username = user.username or 'no_username'
    category = post.category or 'Unknown'
    
    if is_actual:
        mod_text = (
            f"‚ö°Ô∏è –ê–ö–¢–£–ê–õ–¨–ù–û–ï - –ó–∞—è–≤–æ—á–∫–∞ –∑–∞–ª–µ—Ç–µ–ª–∞\n\n"
            f"üíå –æ—Ç: @{username} (ID: {user.id})\n"
            f"üí• –ü—Ä–∏–º–µ—Ä–Ω–æ –≤: {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìö –†–∞–∑–¥–µ–ª: {category}\n"
            f"üéØ –ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –ß–ê–¢–µ –∏ –ó–ê–ö–†–ï–ü–õ–ï–ù–û"
        )
    else:
        mod_text = (
            f"üö® –ó–∞—è–≤–æ—á–∫–∞ –∑–∞–ª–µ—Ç–µ–ª–∞\n\n"
            f"üíå –æ—Ç: @{username} (ID: {user.id})\n"
            f"üí• –ü—Ä–∏–º–µ—Ä–Ω–æ –≤: {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìö –ò–∑ —Ä–∞–∑–¥–µ–ª–∞: {category}"
        )
    
    if post.subcategory:
        mod_text += f" ‚Üí {post.subcategory}"
    
    if post.anonymous:
        mod_text += "\nü´Ü–ê–Ω–æ–Ω–∏–º–Ω–æ"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ None –¥–ª—è –º–µ–¥–∏–∞
    media_count = 0
    if post.media:
        try:
            media_count = len(post.media)
            if media_count > 0:
                mod_text += f"\nüìÄ–ú–µ–¥–∏–∞: {media_count} —Ñ–∞–π–ª(–æ–≤)"
        except (TypeError, AttributeError):
            logger.warning(f"Invalid media data for post {post.id}: {post.media}")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
    if post.text:
        post_text = post.text[:500] + "..." if len(post.text) > 500 else post.text
        mod_text += f"\n\nüìù –¢–µ–∫—Å—Ç:\n{escape_markdown(post_text)}"
    else:
        mod_text += f"\n\nüìù –¢–µ–∫—Å—Ç: (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    if post.hashtags:
        try:
            hashtags_text = " ".join(str(tag) for tag in post.hashtags)
            mod_text += f"\n\n#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {escape_markdown(hashtags_text)}"
        except (TypeError, AttributeError):
            logger.warning(f"Invalid hashtags data for post {post.id}: {post.hashtags}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    if is_actual:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í –ß–ê–¢ + –ó–ê–ö–†–ï–ü–ò–¢–¨", callback_data=f"mod:approve_chat:{post.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod:reject:{post.id}")
            ]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"mod:approve:{post.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod:reject:{post.id}")
            ]
        ]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            await bot.get_chat(target_group)
        except Exception as chat_error:
            logger.error(f"Cannot access moderation group {target_group}: {chat_error}")
            await bot.send_message(
                chat_id=user.id,
                text="‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        media_messages = []
        if post.media and media_count > 0:
            for i, media_item in enumerate(post.media):
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞
                    if not media_item or not isinstance(media_item, dict):
                        logger.warning(f"Invalid media item {i}: {media_item}")
                        continue
                        
                    file_id = media_item.get('file_id')
                    media_type = media_item.get('type')
                    
                    if not file_id or not media_type:
                        logger.warning(f"Missing file_id or type in media item {i}: {media_item}")
                        continue
                    
                    caption = f"üì∑ –ú–µ–¥–∏–∞ {i+1}/{media_count}"
                    if is_actual:
                        caption += " ‚ö°Ô∏è"
                    
                    if media_type == 'photo':
                        msg = await bot.send_photo(
                            chat_id=target_group,
                            photo=file_id,
                            caption=caption
                        )
                        media_messages.append(msg.message_id)
                    elif media_type == 'video':
                        msg = await bot.send_video(
                            chat_id=target_group,
                            video=file_id,
                            caption=caption
                        )
                        media_messages.append(msg.message_id)
                    elif media_type == 'document':
                        msg = await bot.send_document(
                            chat_id=target_group,
                            document=file_id,
                            caption=caption
                        )
                        media_messages.append(msg.message_id)
                        
                except Exception as e:
                    logger.error(f"Error sending media {i+1} for post {post.id}: {e}")
                    continue
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –ë–ï–ó parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        try:
            message = await bot.send_message(
                chat_id=target_group,
                text=mod_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
                # –£–ë–†–ê–ù parse_mode='Markdown' - —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
            )
        except Exception as text_error:
            logger.error(f"Error sending moderation text: {text_error}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            simple_text = (
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username} (ID: {user.id})\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"–¢–µ–∫—Å—Ç: {(post.text or '')[:200]}..."
            )
            message = await bot.send_message(
                chat_id=target_group,
                text=simple_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        try:
            from sqlalchemy import text
            async with db.get_session() as session:
                await session.execute(
                    text("UPDATE posts SET moderation_message_id = :msg_id WHERE id = :post_id"),
                    {"msg_id": message.message_id, "post_id": int(post.id)}  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º int
                )
                await session.commit()
        except Exception as save_error:
            logger.error(f"Error saving moderation_message_id: {save_error}")
        
        logger.info(f"Post {post.id} sent to moderation with {len(media_messages)} media files")
            
    except Exception as e:
        logger.error(f"Error sending to moderation group: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_details = str(e)[:200] + "..." if len(str(e)) > 200 else str(e)
        
        try:
            await bot.send_message(
                chat_id=user.id,
                text=(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                    f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}\n\n"
                    f"ID –≥—Ä—É–ø–ø—ã: {target_group}\n\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            )
        except Exception as notify_error:
            logger.error(f"Could not notify user about moderation error: {notify_error}")

async def cancel_post_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for cancellation reason"""
    keyboard = [
        [InlineKeyboardButton("ü§î –ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data="pub:cancel_confirm")],
        [InlineKeyboardButton("üëé –û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ", callback_data="pub:cancel_confirm")],
        [InlineKeyboardButton("üëà–ù–∞–∑–∞–¥", callback_data="pub:preview")]
    ]
    
    await update.callback_query.edit_message_text(
        "üí≠ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_link_violation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle link violation"""
    await update.message.reply_text(
        "üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n"
        "–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö."
    )
    context.user_data.pop('waiting_for', None)

async def edit_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit post before sending"""
    context.user_data['waiting_for'] = 'post_text'
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pub:preview")]]
    
    await update.callback_query.edit_message_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel post creation"""
    context.user_data.pop('post_data', None)
    context.user_data.pop('waiting_for', None)
    context.user_data.pop('cancel_reason', None)
    
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)
