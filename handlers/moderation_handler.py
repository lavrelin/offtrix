# -*- coding: utf-8 -*-
"""
Unified Moderation Handler
Combines callback handlers and commands in one file
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from data.user_data import ban_user, unban_user, mute_user, unmute_user, get_banned_users, get_user_by_username, get_user_by_id, get_top_users, get_user_stats
from services.admin_notifications import admin_notifications
from utils.validators import parse_time
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

# ============= CALLBACK HANDLERS =============

async def handle_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle moderation callbacks"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"Moderation callback from user {user_id}: {query.data}")
    
    if not Config.is_moderator(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    logger.info(f"Action: {action}, Post ID: {post_id}")
    
    if not post_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    if action == "approve":
        await start_approve_process(update, context, post_id, chat=False)
    elif action == "approve_chat":
        await start_approve_process(update, context, post_id, chat=True)
    elif action == "reject":
        await start_reject_process(update, context, post_id)

async def handle_moderation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input from moderators"""
    user_id = update.effective_user.id
    
    if not Config.is_moderator(user_id):
        return
    
    waiting_for = context.user_data.get('mod_waiting_for')
    logger.info(f"Moderator {user_id} waiting_for: {waiting_for}")
    
    if waiting_for == 'approve_link':
        await process_approve_with_link(update, context)
    elif waiting_for == 'reject_reason':
        await process_reject_with_reason(update, context)

async def start_approve_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, chat: bool = False):
    """Start approval process"""
    try:
        logger.info(f"{'='*50}\nSTART APPROVE: Post {post_id}, Chat: {chat}\n{'='*50}")
        
        from services.db import db
        if not db.session_maker:
            await update.callback_query.answer("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        from models import Post
        from sqlalchemy import select
        
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            target_user_id = post.user_id
            logger.info(f"‚úÖ Post found, user_id: {target_user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = target_user_id
        context.user_data['mod_waiting_for'] = 'approve_link'
        context.user_data['mod_is_chat'] = chat
        
        logger.info(f"üíæ Context saved: {context.user_data}")
        
        destination = "—á–∞—Ç–µ (–∑–∞–∫—Ä–µ–ø–∏—Ç—å)" if chat else "–∫–∞–Ω–∞–ª–µ"
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
        except:
            pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            original_text = update.callback_query.message.text
            updated_text = f"{original_text}\n\n‚è≥ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢–°–Ø @{update.effective_user.username or 'Unknown'}"
            await update.callback_query.edit_message_text(text=updated_text)
        except:
            pass
        
        instruction = (
            f"‚úÖ –û–î–û–ë–†–ï–ù–ò–ï\n\n"
            f"üìä Post ID: {post_id}\n"
            f"üë§ User ID: {target_user_id}\n"
            f"üìç –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤: {destination}\n\n"
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç:\n"
            f"https://t.me/snghu/1234\n\n"
            f"üí° –°–Ω–∞—á–∞–ª–∞ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é, –∑–∞—Ç–µ–º —Å—Å—ã–ª–∫—É"
        )
        
        try:
            msg = await context.bot.send_message(chat_id=update.effective_user.id, text=instruction)
            logger.info(f"‚úÖ Instruction sent, msg_id: {msg.message_id}")
        except Exception as e:
            logger.error(f"‚ùå PM failed: {e}")
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"@{update.effective_user.username}, –Ω–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É!\n\n{instruction}",
                    reply_to_message_id=update.callback_query.message.message_id
                )
            except:
                pass
        
        logger.info(f"{'='*50}\nAPPROVE STARTED\n{'='*50}")
        
    except Exception as e:
        logger.error(f"‚ùå APPROVE ERROR: {e}", exc_info=True)

async def start_reject_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Start rejection process"""
    try:
        logger.info(f"{'='*50}\nSTART REJECT: Post {post_id}\n{'='*50}")
        
        from services.db import db
        if not db.session_maker:
            await update.callback_query.answer("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        from models import Post
        from sqlalchemy import select
        
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            target_user_id = post.user_id
            logger.info(f"‚úÖ Post found, user_id: {target_user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = target_user_id
        context.user_data['mod_waiting_for'] = 'reject_reason'
        
        logger.info(f"üíæ Context saved: {context.user_data}")
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
        except:
            pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            original_text = update.callback_query.message.text
            updated_text = f"{original_text}\n\n‚è≥ –û–¢–ö–õ–û–ù–Ø–ï–¢–°–Ø @{update.effective_user.username or 'Unknown'}"
            await update.callback_query.edit_message_text(text=updated_text)
        except:
            pass
        
        instruction = (
            f"‚ùå –û–¢–ö–õ–û–ù–ï–ù–ò–ï\n\n"
            f"üìä Post ID: {post_id}\n"
            f"üë§ User ID: {target_user_id}\n\n"
            f"üìù –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É (–º–∏–Ω. 5 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        
        try:
            msg = await context.bot.send_message(chat_id=update.effective_user.id, text=instruction)
            logger.info(f"‚úÖ Instruction sent, msg_id: {msg.message_id}")
        except Exception as e:
            logger.error(f"‚ùå PM failed: {e}")
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"@{update.effective_user.username}, –Ω–∞–ø–∏—à–∏—Ç–µ /start!\n\n{instruction}",
                    reply_to_message_id=update.callback_query.message.message_id
                )
            except:
                pass
        
        logger.info(f"{'='*50}\nREJECT STARTED\n{'='*50}")
        
    except Exception as e:
        logger.error(f"‚ùå REJECT ERROR: {e}", exc_info=True)

async def process_approve_with_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process approval with link"""
    try:
        link = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        is_chat = context.user_data.get('mod_is_chat', False)
        
        logger.info(f"{'='*50}\nPROCESS APPROVE\nPost: {post_id}, User: {user_id}, Link: {link}\n{'='*50}")
        
        if not post_id or not user_id:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if not link.startswith('https://t.me/'):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        from services.db import db
        from models import Post, PostStatus
        from sqlalchemy import select
        
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            post.status = PostStatus.APPROVED
            await session.commit()
            logger.info(f"‚úÖ Post {post_id} approved")
        
        destination_text = "—á–∞—Ç–µ" if is_chat else "–∫–∞–Ω–∞–ª–µ"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            keyboard = [
                [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=link)],
                [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url="https://t.me/snghu")]
            ]
            
            user_msg = (
                f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                f"üìù –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {destination_text}\n\n"
                f"üîó {link}"
            )
            
            await context.bot.send_message(
                chat_id=user_id,
                text=user_msg,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"‚úÖ User {user_id} notified")
            await update.message.reply_text(f"‚úÖ –û–î–û–ë–†–ï–ù–û\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω\nPost: {post_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to notify user: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û–î–û–ë–†–ï–ù–û, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω\nPost: {post_id}")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        context.user_data.pop('mod_is_chat', None)
        
        logger.info(f"{'='*50}\nAPPROVE COMPLETED\n{'='*50}")
        
    except Exception as e:
        logger.error(f"‚ùå APPROVE PROCESS ERROR: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

async def process_reject_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process rejection with reason"""
    try:
        reason = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        
        logger.info(f"{'='*50}\nPROCESS REJECT\nPost: {post_id}, User: {user_id}, Reason: {reason[:50]}\n{'='*50}")
        
        if not post_id or not user_id:
            logger.error(f"‚ùå Missing data - post: {post_id}, user: {user_id}")
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if len(reason) < 5:
            await update.message.reply_text("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (–º–∏–Ω. 5 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        from services.db import db
        from models import Post, PostStatus
        from sqlalchemy import select
        
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            post.status = PostStatus.REJECTED
            await session.commit()
            logger.info(f"‚úÖ Post {post_id} rejected")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_msg = (
                f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞:\n{reason}\n\n"
                f"üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, —É—á—Ç—è –∑–∞–º–µ—á–∞–Ω–∏—è\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            
            logger.info(f"üì§ Sending rejection to user {user_id}...")
            
            sent = await context.bot.send_message(chat_id=user_id, text=user_msg)
            
            logger.info(f"‚úÖ‚úÖ‚úÖ User {user_id} notified, msg_id: {sent.message_id}")
            await update.message.reply_text(f"‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω\nPost: {post_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to notify user {user_id}: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û–¢–ö–õ–û–ù–ï–ù–û, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω\nPost: {post_id}\nUser: {user_id}")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        
        logger.info(f"{'='*50}\nREJECT COMPLETED\n{'='*50}")
        
    except Exception as e:
        logger.error(f"‚ùå REJECT PROCESS ERROR: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

# ============= MODERATION COMMANDS =============

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ban user - /ban @username –ø—Ä–∏—á–∏–Ω–∞"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args:
        await update.message.reply_text("üìù /ban @username –ø—Ä–∏—á–∏–Ω–∞")
        return
    
    username = context.args[0].lstrip('@')
    reason = ' '.join(context.args[1:]) or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    user_data = get_user_by_username(username)
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    ban_user(user_data['id'], reason)
    await update.message.reply_text(f"‚úÖ @{username} –∑–∞–±–∞–Ω–µ–Ω\nüìù {reason}")
    
    await admin_notifications.notify_ban(
        username=username,
        user_id=user_data['id'],
        reason=reason,
        moderator=update.effective_user.username or str(update.effective_user.id)
    )

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unban user - /unban @username"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args:
        await update.message.reply_text("üìù /unban @username")
        return
    
    username = context.args[0].lstrip('@')
    user_data = get_user_by_username(username)
    
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    unban_user(user_data['id'])
    await update.message.reply_text(f"‚úÖ @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω")

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mute user - /mute @username 10m"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("üìù /mute @username 10m")
        return
    
    username = context.args[0].lstrip('@')
    time_str = context.args[1]
    
    seconds = parse_time(time_str)
    if not seconds:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    user_data = get_user_by_username(username)
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    until = datetime.now() + timedelta(seconds=seconds)
    mute_user(user_data['id'], until)
    await update.message.reply_text(f"‚úÖ @{username} –∑–∞–º—É—á–µ–Ω –Ω–∞ {time_str}")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unmute user - /unmute @username"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args:
        await update.message.reply_text("üìù /unmute @username")
        return
    
    username = context.args[0].lstrip('@')
    user_data = get_user_by_username(username)
    
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    unmute_user(user_data['id'])
    await update.message.reply_text(f"‚úÖ @{username} —Ä–∞–∑–º—É—á–µ–Ω")

async def banlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show banned users - /banlist"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    banned = get_banned_users()
    
    if not banned:
        await update.message.reply_text("üìã –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö")
        return
    
    text = f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned)}\n\n"
    for user in banned[:20]:
        text += f"‚Ä¢ @{user['username']} - {user.get('ban_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    
    await update.message.reply_text(text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bot stats - /stats"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    stats = get_user_stats()
    
    text = (
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö 24—á: {stats['active_24h']}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö 7–¥: {stats['active_7d']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {stats['banned_count']}\n"
        f"üîá –í –º—É—Ç–µ: {stats['muted_count']}"
    )
    
    await update.message.reply_text(text)

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show top users - /top [N]"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    limit = 10
    if context.args and context.args[0].isdigit():
        limit = int(context.args[0])
    
    top_users = get_top_users(limit)
    
    text = f"üèÜ –¢–û–ü {limit}\n\n"
    for i, user in enumerate(top_users, 1):
        text += f"{i}. @{user['username']} - {user['message_count']}\n"
    
    await update.message.reply_text(text)

async def lastseen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show last seen - /lastseen @username"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if not context.args:
        await update.message.reply_text("üìù /lastseen @username")
        return
    
    username = context.args[0].lstrip('@')
    user_data = get_user_by_username(username)
    
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    last = user_data['last_activity'].strftime('%d.%m.%Y %H:%M')
    await update.message.reply_text(f"‚è∞ @{username}\n{last}")
