# -*- coding: utf-8 -*-
"""
Moderation Handler v6.0 - SIMPLIFIED
Prefix: mod_ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from models import Post, PostStatus
from sqlalchemy import select
import logging

logger = logging.getLogger(__name__)

# ============= –£–ù–ò–ö–ê–õ–¨–ù–´–ï CALLBACK –ü–†–ï–§–ò–ö–°–´: mod_ =============
MOD_CALLBACKS = {
    'approve': 'mod_approve',    # –û–¥–æ–±—Ä–∏—Ç—å (—Ñ–æ—Ä–º–∞—Ç: mod_approve:post_id)
    'reject': 'mod_reject',      # –û—Ç–∫–ª–æ–Ω–∏—Ç—å (—Ñ–æ—Ä–º–∞—Ç: mod_reject:post_id)
}

async def handle_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unified moderation callback handler"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not Config.is_moderator(user_id):
        await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º callback: mod_approve:123
    parts = query.data.split(":")
    action = parts[0]
    post_id = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else None
    
    if not post_id:
        await query.edit_message_text("‚ùå ID –ø–æ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    if action == MOD_CALLBACKS['approve']:
        await start_approve(update, context, post_id)
    elif action == MOD_CALLBACKS['reject']:
        await start_reject(update, context, post_id)

# ============= –û–î–û–ë–†–ï–ù–ò–ï =============

async def start_approve(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    try:
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
            context.user_data.update({
                'mod_post_id': post_id,
                'mod_user_id': post.user_id,
                'mod_waiting_for': 'approve_link'
            })
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
        except:
            pass
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        instruction = (
            f"‚úÖ **–û–î–û–ë–†–ï–ù–ò–ï –ü–û–°–¢–ê #{post_id}**\n\n"
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n"
            f"–ü—Ä–∏–º–µ—Ä: `https://t.me/snghu/1234`"
        )
        
        await update.callback_query.message.reply_text(
            instruction,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Approve error: {e}", exc_info=True)

# ============= –û–¢–ö–õ–û–ù–ï–ù–ò–ï =============

async def start_reject(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    try:
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if not post:
                await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
            context.user_data.update({
                'mod_post_id': post_id,
                'mod_user_id': post.user_id,
                'mod_waiting_for': 'reject_reason'
            })
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
        except:
            pass
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        instruction = (
            f"‚ùå **–û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–û–°–¢–ê #{post_id}**\n\n"
            f"üìù –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:"
        )
        
        await update.callback_query.message.reply_text(instruction)
        
    except Exception as e:
        logger.error(f"Reject error: {e}", exc_info=True)

# ============= –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –û–¢ –ú–û–î–ï–†–ê–¢–û–†–ê =============

async def handle_moderation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    waiting = context.user_data.get('mod_waiting_for')
    
    if waiting == 'approve_link':
        await process_approve_link(update, context)
        return True
    elif waiting == 'reject_reason':
        await process_reject_reason(update, context)
        return True
    
    return False

# ============= –û–ë–†–ê–ë–û–¢–ö–ê –û–î–û–ë–†–ï–ù–ò–Ø =============

async def process_approve_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏"""
    try:
        link = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_user_id')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
        if not link.startswith('https://t.me/'):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n"
                "–§–æ—Ä–º–∞—Ç: `https://t.me/channelname/123`",
                parse_mode='Markdown'
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if post:
                post.status = PostStatus.APPROVED
                await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [[InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=link)]]
        
        await context.bot.send_message(
            user_id,
            f"‚úÖ **–í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!**\n\n"
            f"üìù –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ\n\n"
            f"üîó {link}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            f"‚úÖ **–ü–û–°–¢ #{post_id} –û–î–û–ë–†–ï–ù**\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for key in ['mod_post_id', 'mod_user_id', 'mod_waiting_for']:
            context.user_data.pop(key, None)
        
    except Exception as e:
        logger.error(f"Approve process error: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

# ============= –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø =============

async def process_reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"""
    try:
        reason = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_user_id')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—Ä–∏—á–∏–Ω—ã
        if len(reason) < 5:
            await update.message.reply_text(
                "‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        async with db.get_session() as session:
            result = await session.execute(select(Post).where(Post.id == post_id))
            post = result.scalar_one_or_none()
            
            if post:
                post.status = PostStatus.REJECTED
                await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            user_id,
            f"‚ùå **–í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω**\n\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞:\n{reason}\n\n"
            f"üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n\n"
            f"/start"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            f"‚ùå **–ü–û–°–¢ #{post_id} –û–¢–ö–õ–û–ù–ï–ù**\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for key in ['mod_post_id', 'mod_user_id', 'mod_waiting_for']:
            context.user_data.pop(key, None)
        
    except Exception as e:
        logger.error(f"Reject process error: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

__all__ = [
    'handle_moderation_callback',
    'handle_moderation_text',
    'MOD_CALLBACKS'
]
