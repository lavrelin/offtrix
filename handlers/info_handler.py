# -*- coding: utf-8 -*-
"""
Info Handler v1.0 - UNIFIED
Combines: bonus, links, social, medicine
Prefix: ifc_ (info)
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIXES =============
INFO_CALLBACKS = {
    'bonus': 'ifc_bns',
    'links': 'ifc_lnk',
    'social': 'ifc_scl',
    'medicine': 'ifc_med',
    'hp_painkillers': 'ifc_hp_pk',
    'hp_digestive': 'ifc_hp_dg',
    'hp_allergy': 'ifc_hp_al',
    'hp_cough': 'ifc_hp_cg',
    'hp_throat': 'ifc_hp_th',
    'hp_nasal': 'ifc_hp_ns',
    'hp_skin': 'ifc_hp_sk',
    'hp_other': 'ifc_hp_ot',
    'hp_all': 'ifc_hp_all',
    'hp_back': 'ifc_hp_bk',
    'back': 'ifc_bk',
}

# ============= TRIX LINKS DATA =============
TRIX_LINKS = [
    {'id': 1, 'name': 'üôÖ‚Äç‚ôÇÔ∏è –ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç', 'url': 'https://t.me/snghu'},
    {'id': 2, 'name': 'üôÖ‚Äç‚ôÄÔ∏è –ß–∞—Ç –ë—É–¥–∞–ø–µ—à—Ç', 'url': 'https://t.me/tgchatxxx'},
    {'id': 3, 'name': 'üôÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥', 'url': 'https://t.me/catalogtrix'},
    {'id': 4, 'name': 'üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–∞—Ä–∞—Ö–æ–ª–∫–∞ (–ö–û–ü)', 'url': 'https://t.me/hungarytrade'}
]

# ============= MEDICINE DATA =============
MEDICINE_DATA = {
    'painkillers': {
        'name': 'üíä –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ –∏ –∂–∞—Ä–æ–ø–æ–Ω–∏–∂–∞—é—â–∏–µ',
        'medicines': [
            '–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª ‚Äî Panadol, Rubophen, Paramax',
            '–ò–±—É–ø—Ä–æ—Ñ–µ–Ω ‚Äî Advil Ultra, Algoflex, Voltaren',
            '–ê—Å–ø–∏—Ä–∏–Ω ‚Äî Aspirin, Kalmopyrin',
            '–ù–æ—à–ø–∞ ‚Äî No-Spa',
            '–°–∞—Ä–∏–¥–æ–Ω ‚Äî Saridon',
            '–ê–ª–≥–æ—Ñ–ª–µ–∫—Å –î—É–æ ‚Äî Algoflex Duo',
            '–ö–µ—Ç–∞—Ñ–ª–µ–∫—Å / Ketodex ‚Äî Ketodex',
            '–ö–∞—Ç–∞—Ñ–ª–∞–º ‚Äî Cataflam',
            '–¢–µ—Ä–∞—Ñ–ª—é ‚Äî Neo Citran',
            '–ö–æ–ª–¥—Ä–µ–∫—Å ‚Äî Coldrex'
        ]
    },
    'digestive': {
        'name': 'üî¥ –ü—Ä–æ—Ç–∏–≤–æ–¥–∏–∞—Ä–µ–π–Ω—ã–µ –∏ –ñ–ö–¢',
        'medicines': [
            '–ò–º–æ–¥–∏—É–º ‚Äî Imodium',
            '–õ–æ–ø–µ–¥–∏—É–º ‚Äî Lopedium',
            '–°–º–µ–∫—Ç–∞ ‚Äî Smecta',
            '–ë–∏–æ–≥–∞–∏—è ‚Äî BioGaia',
            '–¢–∞—Å–µ–∫—Ç–∞–Ω ‚Äî Tasectan',
            '–ö—Ä–∞–ª–µ–∫—Å ‚Äî Cralex',
            '–õ–∏–Ω–µ–∫—Å ‚Äî Linex',
            '–û–†–° 200 –•–∏–ø–ø ‚Äî ORS 200 Hipp',
            '–¢–µ–≤–∞-–≠–Ω—Ç–µ—Ä–æ–±–µ–Ω–µ ‚Äî Teva-Enterobene',
            '–õ–æ–ø–∞–∫—É—Ç ‚Äî Lopacut'
        ]
    },
    'allergy': {
        'name': 'ü§ß –ü—Ä–æ—Ç–∏–≤ –∞–ª–ª–µ—Ä–≥–∏–∏',
        'medicines': [
            '–¶–µ—Ç–∏—Ä–∏–∑–∏–Ω ‚Äî Zyrtec, Cetimax',
            '–§–µ–Ω–∏—Å—Ç–∏–ª ‚Äî Fenistil –≥–µ–ª—å',
            '–ê–ª–ª–µ—Ä–≥–æ–¥–∏–ª ‚Äî Allergodil —Å–ø—Ä–µ–π',
            '–ö–ª–∞—Ä–∏—Ç–∏–Ω ‚Äî Claritine',
            '–õ–æ—Ä–¥–µ—Å—Ç–∏–Ω ‚Äî Lordestin',
            '–ö—Å–∏–∑–∞–ª ‚Äî Xyzal',
            '–†–µ–≤–∏—Ü–µ—Ç ‚Äî Revicet',
            '–õ–µ—Ä—Ç–∞–∑–∏–Ω ‚Äî Lertazin',
            '–ó–∏–ª–æ–ª–∞ ‚Äî Zilola'
        ]
    },
    'cough': {
        'name': 'üò∑ –û—Ç –∫–∞—à–ª—è –∏ –ø—Ä–æ—Å—Ç—É–¥—ã',
        'medicines': [
            '–¢—É—Å—Å–∏—Ä–µ–∫—Å ‚Äî Tussirex —Å–∏—Ä–æ–ø',
            '–†–∏–Ω–æ—Ç–∏–æ–ª ‚Äî Rhinothiol —Å–∏—Ä–æ–ø –∏ —Ç–∞–±–ª–µ—Ç–∫–∏',
            '–ê–º–±—Ä–æ–∫—Å–æ–ª ‚Äî Ambroxol',
            '–ù–µ–æ–¢—É—Å—Å ‚Äî NeoTuss —Å–∏—Ä–æ–ø',
            '–ü–∞–∫—Å—Ä–∞–∑–æ–ª ‚Äî Paxirazol'
        ]
    },
    'throat': {
        'name': 'üó£Ô∏è –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –≥–æ—Ä–ª–∞',
        'medicines': [
            '–¢–∞–Ω—Ç—É–º –í–µ—Ä–¥–µ ‚Äî Tantum Verde —Å–ø—Ä–µ–π',
            '–°—Ç—Ä–µ–ø—Å–∏–ª—Å ‚Äî Strepsils –ø–∞—Å—Ç–∏–ª–∫–∏',
            '–§–∞—Ä–∏–Ω–≥–æ—Å–æ–ø—Ç ‚Äî FaringoStop —Å–ø—Ä–µ–π',
            '–°–µ–ø—Ç–æ–ª–µ—Ç–µ ‚Äî Septolete –ø–∞—Å—Ç–∏–ª–∫–∏',
            '–ú–µ–±—É–∫–∞–π–Ω–∞ –ú–∏–Ω—Ç ‚Äî Mebucain Mint –ø–∞—Å—Ç–∏–ª–∫–∏ —Å –ª–∏–¥–æ–∫–∞–∏–Ω–æ–º',
            '–î–æ—Ä–∏—Ç—Ä–∏—Ü–∏–Ω ‚Äî Dorithricin –ø–∞—Å—Ç–∏–ª–∫–∏'
        ]
    },
    'nasal': {
        'name': 'üëÉ –û—Ç –Ω–∞—Å–º–æ—Ä–∫–∞',
        'medicines': [
            '–û–∫—Å–∏–º–µ—Ç–∞–∑–æ–ª–∏–Ω ‚Äî Afrin, Otrivin, Nasivin',
            '–ö—Å–∏–ª–æ–º–µ—Ç–∞–∑–æ–ª–∏–Ω ‚Äî Otrivin',
            '–†–∏–Ω–æ—Å–ø—Ä–µ–π ‚Äî Rhinospray',
            '–ê–∫–≤–∞–º–∞—Ä–∏—Å ‚Äî Aquamaris',
            '–†–∏–Ω–æ—Ñ–ª—É–∏–º—É—Ü–∏–ª ‚Äî Rinofluimucil',
            '–†–µ–≤–µ–Ω—Ç–∏–ª ‚Äî Reventil'
        ]
    },
    'skin': {
        'name': 'ü©π –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –∫–æ–∂–∏ –∏ —Ä–∞–Ω',
        'medicines': [
            '–ë–µ–ø–∞–Ω—Ç–µ–Ω ‚Äî Bepanthen –∫—Ä–µ–º –∏ –º–∞–∑—å',
            '–ü–∞–Ω—Ç–µ—Ñ–µ–Ω ‚Äî Panthenol —Å–ø—Ä–µ–π',
            '–õ–∏–¥–æ–∫–∞–∏–Ω-–≠–≥–∏—Å ‚Äî Lidocain-Egis –º–∞–∑—å',
            '–≠–º–æ—Ñ–∏–∫—Å ‚Äî Emofix –≥–µ–ª—å –∫—Ä–æ–≤–æ–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π',
            '–õ–∞–≤–∞–Ω–∏–¥–∞ ‚Äî Lavanid –≥–µ–ª—å',
            '–î–µ—Ä–º–∞–∑–∏–Ω ‚Äî Dermazin –∫—Ä–µ–º',
            '–ì–µ–Ω—Ç–∞–º–∏—Ü–∏–Ω-–í–∞–≥–Ω–µ—Ä ‚Äî Gentamicin-Wagner –º–∞–∑—å',
            '–¢–∏—Ä–æ–∑—É—Ä ‚Äî Tyrosur –≥–µ–ª—å',
            '–•–∞–Ω—Å–∞–ø–ª–∞—Å—Ç ‚Äî Hansaplast –∫—Ä–µ–º'
        ]
    },
    'other': {
        'name': '‚ûï –ü—Ä–æ—á–∏–µ',
        'medicines': [
            '–†–µ–≥–∏–¥—Ä–æ–Ω ‚Äî ORS 200 Hipp (—Ä–µ–≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è)',
            '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å ‚Äî Carbo Medicinalis',
            '–í–∏—Ç–∞–º–∏–Ω C ‚Äî —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã',
            '–ú–∞–≥–Ω–µ B6 ‚Äî Magne B6',
            '–û–º–µ–≥–∞-3 ‚Äî —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã'
        ]
    }
}

# ============= BONUS COMMAND =============

async def bonus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –±–æ–Ω—É—Å—ã"""
    
    keyboard = [
        [InlineKeyboardButton("üÉè STAKE (Crypto Casino)", url="https://stake1071.com/ru?c=RooskenChister")],
        [InlineKeyboardButton("‚ô•Ô∏è BINANCE (–¥–æ 100 USDT)", url="https://accounts.binance.com/register?ref=TRIXBONUS")],
        [InlineKeyboardButton("‚ô£Ô∏è OKX (–¥–æ 1000 USDT)", url="https://okx.com/join/8831249")],
        [InlineKeyboardButton("‚ô¶Ô∏è BYBIT (–¥–æ 1000 USDT)", url="https://www.bybit.com/invite?ref=DNWE7Q5")],
        [InlineKeyboardButton("‚ô†Ô∏è MEXC (—Å–∫–∏–¥–∫–∞ 50%)", url="https://promote.mexc.com/r/IcgN3Ivv")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mnc_bk")]
    ]
    
    text = (
        "üîã **REF LINKS + BONUSES**\n\n"
        "**Crypto:**\n\n"
        "üí≤ **STAKE** top Crypto Gambling\n"
        "max RTP96% ‚ûï\n"
        "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥, weekly, monthly bonus\n"
        "–°—Ç–∞–≤–∫–∏, –∫–∞–∑–∏–Ω–æ, —Å–ª–æ—Ç—ã - –±–æ–Ω—É—Å —Ä–µ–≥, cashback\n\n"
        "üü® **BINANCE**\n"
        "‚Ä¢ –î–æ *100 USDT* –±–æ–Ω—É—Å\n"
        "‚Ä¢ –î–æ *20%* —Å–∫–∏–¥–∫–∞ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏\n"
        "‚Ä¢ P2P —Ç–æ—Ä–≥–æ–≤–ª—è\n\n"
        "‚óæÔ∏è **OKX**\n"
        "‚Ä¢ –î–æ *1 000 USDT* –±–æ–Ω—É—Å–æ–≤\n"
        "‚Ä¢ *50%* —Å–∫–∏–¥–∫–∞ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏\n\n"
        "üíπ **BYBIT**\n"
        "‚Ä¢ –î–æ *1 000 USDT* –±–æ–Ω—É—Å–æ–≤\n"
        "‚Ä¢ –ë–æ–Ω—É—Å—ã –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "‚Ä¢ P2P —Ç–æ—Ä–≥–æ–≤–ª—è, –∞–∫—Ü–∏–∏\n\n"
        "üî∑ **MEXC**\n"
        "‚Ä¢ –î–æ *50%* —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏\n"
        "‚Ä¢ Spot –∏ —Ñ—å—é—á–µ—Ä—Å—ã\n"
        "‚Ä¢ –ú–Ω–æ–≥–æ Low Cap –º–æ–Ω–µ—Ç\n\n"
        "üí≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
        )

# ============= TRIXLINKS COMMAND =============

async def trixlinks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ Trix"""
    
    keyboard = []
    for link in TRIX_LINKS:
        keyboard.append([InlineKeyboardButton(link['name'], url=link['url'])])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mnc_bk")])
    
    text = (
        "üîó **–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò TRIX**\n\n"
        "üì± –ù–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏:\n\n"
        "üôÖ‚Äç‚ôÇÔ∏è –ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç\n"
        "üìù –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
        "üôÖ‚Äç‚ôÄÔ∏è –ß–∞—Ç –ë—É–¥–∞–ø–µ—à—Ç\n"
        "üìù –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "üôÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥\n"
        "üìù –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n\n"
        "üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–∞—Ä–∞—Ö–æ–ª–∫–∞ (–ö–û–ü)\n"
        "üìù –ö—É–ø–ª—è, –ø—Ä–æ–¥–∞–∂–∞, –æ–±–º–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏"
    )
    
    await update.message.reply_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )

# ============= SOCIAL COMMAND =============

async def social_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ TRIX"""
    
    keyboard = [
        [InlineKeyboardButton("üüß INSTAGRAM", url="https://www.instagram.com/budapest_trix?igsh=ZXlrNmo4NDdyN2Vz&utm_source=qr)],
        [InlineKeyboardButton("üìò FACEBOOK", url="https://www.facebook.com/share/g/1EKwURtZ13/?mibextid=wwXIfr")],
        [InlineKeyboardButton("üßµ THREADS", url="https://www.threads.com/@budapest_trix?igshid=NTc4MTIwNjQ2YQ==")],
        [InlineKeyboardButton("üåÄ TELEGRAM", url="https://t.me/trixilvebot")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mnc_bk")]
    ]
    
    text = (
        "‚ö°Ô∏è **–°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò TRIX**\n\n"
        "‚úÖ Follow:\n\n"
        "üüß **INSTAGRAM** ‚Äî —Ñ–æ—Ç–æ, stories, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ \n\n"
        "üìò **FACEBOOK** ‚Äî –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        "üßµ **THREADS** ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ—Å—Ç—ã –∏ –æ–±—â–µ–Ω–∏–µ \n\n"
        "üåÄ **TELEGRAM** ‚Äî –ª–∏—á–Ω–∞—è —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
        "üîò –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    )
    
    await update.message.reply_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )

# ============= HP (MEDICINE) COMMAND =============

async def hp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    
    keyboard = [
        [
            InlineKeyboardButton("üíä –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ", callback_data=INFO_CALLBACKS['hp_painkillers']),
            InlineKeyboardButton("üî¥ –ñ–ö–¢", callback_data=INFO_CALLBACKS['hp_digestive'])
        ],
        [
            InlineKeyboardButton("ü§ß –ê–ª–ª–µ—Ä–≥–∏—è", callback_data=INFO_CALLBACKS['hp_allergy']),
            InlineKeyboardButton("üò∑ –ö–∞—à–µ–ª—å", callback_data=INFO_CALLBACKS['hp_cough'])
        ],
        [
            InlineKeyboardButton("üó£Ô∏è –ì–æ—Ä–ª–æ", callback_data=INFO_CALLBACKS['hp_throat']),
            InlineKeyboardButton("üëÉ –ù–∞—Å–º–æ—Ä–∫", callback_data=INFO_CALLBACKS['hp_nasal'])
        ],
        [
            InlineKeyboardButton("ü©π –ö–æ–∂–∞/–†–∞–Ω—ã", callback_data=INFO_CALLBACKS['hp_skin']),
            InlineKeyboardButton("‚ûï –ü—Ä–æ—á–∏–µ", callback_data=INFO_CALLBACKS['hp_other'])
        ],
        [InlineKeyboardButton("üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=INFO_CALLBACKS['hp_all'])]
    ]
    
    text = (
        "üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –í–µ–Ω–≥—Ä–∏–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º\n"
        "‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è"
    )
    
    await update.message.reply_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
    )

# ============= MEDICINE CATEGORY DISPLAY =============

async def show_medicine_category(query, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤"""
    
    if category not in MEDICINE_DATA:
        await query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    cat_data = MEDICINE_DATA[category]
    text = f"**{cat_data['name']}**\n\n"
    
    for i, medicine in enumerate(cat_data['medicines'], 1):
        text += f"{i}. {medicine}\n"
    
    text += "\n‚ö†Ô∏è *–ü–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º*"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=INFO_CALLBACKS['hp_back'])]]
    
    try:
        await query.edit_message_text(
            text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing medicine category: {e}")

async def show_all_medicines(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã"""
    
    text = "üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –í–µ–Ω–≥—Ä–∏–∏**\n\n"
    
    for category_key, cat_data in MEDICINE_DATA.items():
        text += f"\n**{cat_data['name']}**\n"
        for i, medicine in enumerate(cat_data['medicines'], 1):
            text += f"{i}. {medicine}\n"
    
    text += "\n\n‚ö†Ô∏è *–í–∞–∂–Ω–æ: –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º*"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=INFO_CALLBACKS['hp_back'])]]
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç > 4000, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
    if len(text) > 4000:
        for category_key, cat_data in MEDICINE_DATA.items():
            category_text = f"**{cat_data['name']}**\n\n"
            for i, medicine in enumerate(cat_data['medicines'], 1):
                category_text += f"{i}. {medicine}\n"
            
            await query.message.reply_text(category_text, parse_mode='Markdown')
        
        await query.message.reply_text(
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ: –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        try:
            await query.edit_message_text(
                text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error showing all medicines: {e}")

async def show_medicine_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤"""
    
    keyboard = [
        [
            InlineKeyboardButton("üíä –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ", callback_data=INFO_CALLBACKS['hp_painkillers']),
            InlineKeyboardButton("üî¥ –ñ–ö–¢", callback_data=INFO_CALLBACKS['hp_digestive'])
        ],
        [
            InlineKeyboardButton("ü§ß –ê–ª–ª–µ—Ä–≥–∏—è", callback_data=INFO_CALLBACKS['hp_allergy']),
            InlineKeyboardButton("üò∑ –ö–∞—à–µ–ª—å", callback_data=INFO_CALLBACKS['hp_cough'])
        ],
        [
            InlineKeyboardButton("üó£Ô∏è –ì–æ—Ä–ª–æ", callback_data=INFO_CALLBACKS['hp_throat']),
            InlineKeyboardButton("üëÉ –ù–∞—Å–º–æ—Ä–∫", callback_data=INFO_CALLBACKS['hp_nasal'])
        ],
        [
            InlineKeyboardButton("ü©π –ö–æ–∂–∞/–†–∞–Ω—ã", callback_data=INFO_CALLBACKS['hp_skin']),
            InlineKeyboardButton("‚ûï –ü—Ä–æ—á–∏–µ", callback_data=INFO_CALLBACKS['hp_other'])
        ],
        [InlineKeyboardButton("üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=INFO_CALLBACKS['hp_all'])]
    ]
    
    text = (
        "üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –í–µ–Ω–≥—Ä–∏–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º\n"
        "‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏"
    )
    
    try:
        await query.edit_message_text(
            text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing medicine menu: {e}")

# ============= CALLBACK HANDLER =============

async def handle_info_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle info callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # Medicine categories
    if data == INFO_CALLBACKS['hp_painkillers']:
        await show_medicine_category(query, 'painkillers')
    elif data == INFO_CALLBACKS['hp_digestive']:
        await show_medicine_category(query, 'digestive')
    elif data == INFO_CALLBACKS['hp_allergy']:
        await show_medicine_category(query, 'allergy')
    elif data == INFO_CALLBACKS['hp_cough']:
        await show_medicine_category(query, 'cough')
    elif data == INFO_CALLBACKS['hp_throat']:
        await show_medicine_category(query, 'throat')
    elif data == INFO_CALLBACKS['hp_nasal']:
        await show_medicine_category(query, 'nasal')
    elif data == INFO_CALLBACKS['hp_skin']:
        await show_medicine_category(query, 'skin')
    elif data == INFO_CALLBACKS['hp_other']:
        await show_medicine_category(query, 'other')
    elif data == INFO_CALLBACKS['hp_all']:
        await show_all_medicines(query)
    elif data == INFO_CALLBACKS['hp_back']:
        await show_medicine_menu(query)
    elif data == INFO_CALLBACKS['bonus']:
        await bonus_command(update, context)
    elif data == INFO_CALLBACKS['social']:
        await social_command(update, context)
    else:
        await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

__all__ = [
    'bonus_command',
    'trixlinks_command',
    'social_command',
    'hp_command',
    'handle_info_callback',
    'INFO_CALLBACKS',
]
