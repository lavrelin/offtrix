# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ TopPeople Budapest - –í–ï–†–°–ò–Ø 5.0

–ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ v5.0:
- ‚úÖ –ö—É–ª–¥–∞—É–Ω 3 —á–∞—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
- ‚úÖ –ü–æ–ª–µ "–ò–º—è" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
- ‚úÖ –í–æ–∑—Ä–∞—Å—Ç 18-70 –ª–µ—Ç
- ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ "–û —Å–µ–±–µ" (3 —Å–ª–æ–≤–∞ –ø–æ 7 —Å–∏–º–≤–æ–ª–æ–≤)
- ‚úÖ –°—Å—ã–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è
- ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (catalog_number)
- ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
- ‚úÖ @username –∞–≤—Ç–æ—Ä–∞ –≤ –∑–∞—è–≤–∫–µ
- ‚úÖ –ê–≤—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥
- ‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ /catalog
- ‚úÖ –í—ã–±–æ—Ä –ø–æ–ª–∞ —á–µ—Ä–µ–∑ /addgirltocat –∏ /addboytocat –ª–æ–≥–∏–∫—É

–í–µ—Ä—Å–∏—è: 5.0.0
–î–∞—Ç–∞: 25.10.2025
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ContextTypes
from config import Config
from datetime import datetime, timedelta
import logging
import re
import random
from typing import Dict, Optional

logger = logging.getLogger(__name__)

# ============= –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• =============

rating_data = {
    'posts': {},           # ID –ø–æ—Å—Ç–∞ -> –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    'profiles': {},        # profile_url -> –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    'user_votes': {},      # (user_id, post_id) -> –≥–æ–ª–æ—Å
    'cooldowns': {}        # user_id -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏
}

# ============= –ù–ê–°–¢–†–û–ô–ö–ò =============

COOLDOWN_HOURS = 3
MIN_AGE = 18
MAX_AGE = 70
MAX_ABOUT_WORDS = 3
MAX_WORD_LENGTH = 7

# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def check_cooldown(user_id: int) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π"""
    if user_id in rating_data['cooldowns']:
        last_submission = rating_data['cooldowns'][user_id]
        time_passed = datetime.now() - last_submission
        cooldown_time = timedelta(hours=COOLDOWN_HOURS)
        
        if time_passed < cooldown_time:
            remaining = cooldown_time - time_passed
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            return f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {hours}—á {minutes}–º–∏–Ω –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–æ–π"
    
    return None

async def generate_catalog_number() -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
    from services.catalog_service import catalog_service
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
    async from services.db import db
    from models import CatalogPost
    from sqlalchemy import select
    
    try:
        async with db.get_session() as session:
            # –ü—Ä–æ–±—É–µ–º 100 —Ä–∞–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
            for _ in range(100):
                number = random.randint(1, 9999)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î –∫–∞—Ç–∞–ª–æ–≥–∞
                result = await session.execute(
                    select(CatalogPost.id).where(CatalogPost.catalog_number == number)
                )
                
                if not result.scalar_one_or_none():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ rating_data
                    used_in_rating = any(
                        post.get('catalog_number') == number 
                        for post in rating_data['posts'].values()
                    )
                    
                    if not used_in_rating:
                        return number
            
            raise Exception("Could not generate unique catalog number")
    except Exception as e:
        logger.error(f"Error generating catalog number: {e}")
        # Fallback: –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        return random.randint(1000, 9999)

def validate_about(text: str) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è '–û —Å–µ–±–µ'. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –û–ö, –∏–Ω–∞—á–µ –æ—à–∏–±–∫—É"""
    words = text.strip().split()
    
    if len(words) > MAX_ABOUT_WORDS:
        return f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_ABOUT_WORDS} —Å–ª–æ–≤–∞"
    
    for word in words:
        if len(word) > MAX_WORD_LENGTH:
            return f"‚ùå –°–ª–æ–≤–æ '{word}' –±–æ–ª—å—à–µ {MAX_WORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    
    return None

# ============= –û–°–ù–û–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê /itsme =============

async def itsme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ TopPeople - /itsme"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    cooldown_msg = await check_cooldown(user_id)
    if cooldown_msg:
        await update.message.reply_text(cooldown_msg)
        return
    
    context.user_data['rate_step'] = 'name'
    context.user_data['waiting_for'] = 'rate_name'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rate:cancel")]]
    
    text = (
        "**‚≠ê TopPeople Budapest**\n\n"
        "üéØ –®–∞–≥ 1/6: **–í–∞—à–µ –∏–º—è**\n\n"
        "–ö–∞–∫ –≤–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å?\n"
        "–ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞"
    )
    
    await update.message.reply_text(
        text, 
        reply_markup=InlineKeyboardMarkup(keyboard), 
        parse_mode='Markdown'
    )

# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –®–ê–ì–û–í =============

async def handle_rate_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = update.message.text.strip()
    
    if len(name) < 2 or len(name) > 50:
        await update.message.reply_text("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    context.user_data['rate_name'] = name
    context.user_data['rate_step'] = 'photo'
    context.user_data['waiting_for'] = 'rate_photo'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
    
    text = f"‚úÖ –ò–º—è: **{name}**\n\nüéØ –®–∞–≥ 2/6: **–§–æ—Ç–æ**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ"
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    if not update.message.photo:
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        return
    
    context.user_data['rate_photo_file_id'] = update.message.photo[-1].file_id
    context.user_data['rate_step'] = 'age'
    context.user_data['waiting_for'] = 'rate_age'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
    
    name = context.user_data.get('rate_name', '–ì–æ—Å—Ç—å')
    text = f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\nüéØ –®–∞–≥ 3/6: **–í–æ–∑—Ä–∞—Å—Ç**\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç ({MIN_AGE}-{MAX_AGE})"
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    age_text = update.message.text.strip()
    
    try:
        age = int(age_text)
        if age < MIN_AGE or age > MAX_AGE:
            await update.message.reply_text(f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE} –ª–µ—Ç")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    context.user_data['rate_age'] = age
    context.user_data['rate_step'] = 'about'
    context.user_data['waiting_for'] = 'rate_about'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
    
    text = (
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: **{age} –ª–µ—Ç**\n\n"
        f"üéØ –®–∞–≥ 4/6: **–û —Å–µ–±–µ**\n\n"
        f"–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è ({MAX_ABOUT_WORDS} —Å–ª–æ–≤–∞, –º–∞–∫—Å. {MAX_WORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–ª–æ–≤–æ)\n"
        f"–ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–æ—Ç–∫–∞ –º–æ–¥–µ–ª—å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è '–û —Å–µ–±–µ'"""
    about = update.message.text.strip()
    
    error = validate_about(about)
    if error:
        await update.message.reply_text(error)
        return
    
    context.user_data['rate_about'] = about
    context.user_data['rate_step'] = 'profile'
    context.user_data['waiting_for'] = 'rate_profile'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
    
    text = (
        f"‚úÖ –û —Å–µ–±–µ: **{about}**\n\n"
        f"üéØ –®–∞–≥ 5/6: **–°—Å—ã–ª–∫–∞**\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"–ü—Ä–∏–º–µ—Ä: @username –∏–ª–∏ https://instagram.com/username"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    profile_url = update.message.text.strip()
    
    if not profile_url or len(profile_url) < 3:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    if profile_url.startswith('@'):
        profile_url = profile_url[1:]
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º —Å—Å—ã–ª–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if 'instagram.com' in profile_url:
        pass
    # –ï—Å–ª–∏ —ç—Ç–æ username - –¥–æ–±–∞–≤–ª—è–µ–º @
    elif not profile_url.startswith('http'):
        profile_url = f"@{profile_url}"
    
    context.user_data['rate_profile'] = profile_url
    context.user_data['rate_step'] = 'gender'
    context.user_data['waiting_for'] = None
    
    keyboard = [
        [
            InlineKeyboardButton("üôãüèº‚Äç‚ôÇÔ∏è –ü–∞—Ä–µ–Ω—å", callback_data="rate:gender:boy"),
            InlineKeyboardButton("üôãüèº‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∞", callback_data="rate:gender:girl")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]
    ]
    
    text = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: {profile_url}\n\nüéØ –®–∞–≥ 6/6: **–ü–æ–ª**\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:"
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============= –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK =============

async def handle_rate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    value = data[2] if len(data) > 2 else None
    
    if action == "gender":
        context.user_data['rate_gender'] = value
        await publish_rate_post(update, context)
    
    elif action == "vote":
        post_id = int(value) if value else None
        vote_value = int(data[3]) if len(data) > 3 else None
        await handle_vote(update, context, post_id, vote_value)
    
    elif action == "back":
        await handle_back_navigation(update, context)
    
    elif action == "cancel":
        await cancel_rate_submission(update, context)
    
    elif action == "noop":
        await query.answer()

# ============= –ù–ê–í–ò–ì–ê–¶–ò–Ø –ù–ê–ó–ê–î =============

async def handle_back_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    query = update.callback_query
    step = context.user_data.get('rate_step', 'name')
    
    if step == 'photo':
        context.user_data['rate_step'] = 'name'
        context.user_data['waiting_for'] = 'rate_name'
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rate:cancel")]]
        await query.edit_message_text(
            "üéØ –®–∞–≥ 1/6: **–í–∞—à–µ –∏–º—è**\n\n–ö–∞–∫ –≤–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif step == 'age':
        context.user_data['rate_step'] = 'photo'
        context.user_data['waiting_for'] = 'rate_photo'
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
        await query.edit_message_text(
            "üéØ –®–∞–≥ 2/6: **–§–æ—Ç–æ**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif step == 'about':
        context.user_data['rate_step'] = 'age'
        context.user_data['waiting_for'] = 'rate_age'
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
        await query.edit_message_text(
            f"üéØ –®–∞–≥ 3/6: **–í–æ–∑—Ä–∞—Å—Ç**\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç ({MIN_AGE}-{MAX_AGE})",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif step == 'profile':
        context.user_data['rate_step'] = 'about'
        context.user_data['waiting_for'] = 'rate_about'
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
        await query.edit_message_text(
            f"üéØ –®–∞–≥ 4/6: **–û —Å–µ–±–µ**\n\n–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è ({MAX_ABOUT_WORDS} —Å–ª–æ–≤–∞, –º–∞–∫—Å. {MAX_WORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif step == 'gender':
        context.user_data['rate_step'] = 'profile'
        context.user_data['waiting_for'] = 'rate_profile'
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
        await query.edit_message_text(
            "üéØ –®–∞–≥ 5/6: **–°—Å—ã–ª–∫–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def cancel_rate_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    context.user_data.pop('rate_photo_file_id', None)
    context.user_data.pop('rate_name', None)
    context.user_data.pop('rate_profile', None)
    context.user_data.pop('rate_age', None)
    context.user_data.pop('rate_about', None)
    context.user_data.pop('rate_gender', None)
    context.user_data.pop('rate_step', None)
    context.user_data.pop('waiting_for', None)
    
    await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# ============= –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ü–û–°–¢–ê =============

async def publish_rate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    photo_file_id = context.user_data.get('rate_photo_file_id')
    name = context.user_data.get('rate_name')
    profile_url = context.user_data.get('rate_profile')
    age = context.user_data.get('rate_age')
    about = context.user_data.get('rate_about')
    gender = context.user_data.get('rate_gender')
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID{user_id}"
    
    if not all([photo_file_id, name, profile_url, age, about, gender]):
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞
        post_id = len(rating_data['posts']) + 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º catalog_number
        catalog_number = await generate_catalog_number()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        rating_data['posts'][post_id] = {
            'name': name,
            'profile_url': profile_url,
            'age': age,
            'about': about,
            'gender': gender,
            'photo_file_id': photo_file_id,
            'author_user_id': user_id,
            'author_username': username,
            'catalog_number': catalog_number,
            'created_at': datetime.now(),
            'votes': {},
            'status': 'pending'
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
        rating_data['cooldowns'][user_id] = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if profile_url not in rating_data['profiles']:
            rating_data['profiles'][profile_url] = {
                'name': name,
                'age': age,
                'about': about,
                'gender': gender,
                'total_score': 0,
                'vote_count': 0,
                'post_ids': []
            }
        
        rating_data['profiles'][profile_url]['post_ids'].append(post_id)
        
        logger.info(f"Rating post {post_id} (#{catalog_number}) created by @{username} (ID: {user_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await send_rating_to_moderation(update, context, post_id, photo_file_id, name, profile_url, age, about, gender, username, catalog_number)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('rate_photo_file_id', None)
        context.user_data.pop('rate_name', None)
        context.user_data.pop('rate_profile', None)
        context.user_data.pop('rate_age', None)
        context.user_data.pop('rate_about', None)
        context.user_data.pop('rate_gender', None)
        context.user_data.pop('rate_step', None)
        context.user_data.pop('waiting_for', None)
        
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if gender == "boy" else "üôãüèº‚Äç‚ôÄÔ∏è"
        
        await update.callback_query.edit_message_text(
            f"‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
            f"üë§ {name}\n"
            f"{gender_emoji} {age} –ª–µ—Ç\n"
            f"üí¨ {about}\n"
            f"üÜî #{catalog_number}\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
        , parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error publishing rate post: {e}", exc_info=True)
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")

# ============= –û–¢–ü–†–ê–í–ö–ê –ù–ê –ú–û–î–ï–†–ê–¶–ò–Æ =============

async def send_rating_to_moderation(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE,
    post_id: int,
    photo_file_id: str,
    name: str,
    profile_url: str,
    age: int,
    about: str,
    gender: str,
    author_username: str,
    catalog_number: int
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    bot = context.bot
    
    try:
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"rate_mod:edit:{post_id}"),
            ],
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"rate_mod:approve:{post_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rate_mod:reject:{post_id}")
            ]
        ]
        
        gender_text = "–ü–∞—Ä–µ–Ω—å" if gender == "boy" else "–î–µ–≤—É—à–∫–∞"
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if gender == "boy" else "üôãüèº‚Äç‚ôÄÔ∏è"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∫–∞–∫ —Å—Å—ã–ª–∫—É
        if profile_url.startswith('@'):
            formatted_name = f"[{name}](https://t.me/{profile_url[1:]})"
        elif 'instagram.com' in profile_url:
            formatted_name = f"[{name}]({profile_url})"
        else:
            formatted_name = f"[{name}]({profile_url})"
        
        caption = (
            f"üÜï **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ TopPeople**\n\n"
            f"üë§ –ò–º—è: {formatted_name}\n"
            f"{gender_emoji} {gender_text}, {age} –ª–µ—Ç\n"
            f"üí¨ –û —Å–µ–±–µ: {about}\n"
            f"üÜî –ù–æ–º–µ—Ä: #{catalog_number}\n"
            f"üì§ –ê–≤—Ç–æ—Ä: @{author_username}\n\n"
            f"‚ùì –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ?"
        )
        
        msg = await bot.send_photo(
            chat_id=Config.MODERATION_GROUP_ID,
            photo=photo_file_id,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        rating_data['posts'][post_id]['moderation_message_id'] = msg.message_id
        rating_data['posts'][post_id]['moderation_group_id'] = Config.MODERATION_GROUP_ID
        
        logger.info(f"Rating post {post_id} sent to moderation (msg: {msg.message_id})")
        
    except Exception as e:
        logger.error(f"Error sending rating post to moderation: {e}", exc_info=True)
        raise

# ============= –ú–û–î–ï–†–ê–¶–ò–Ø =============

async def handle_rate_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    if not Config.is_moderator(update.effective_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if action == "approve":
        await approve_rating_post(update, context, post_id)
    elif action == "reject":
        await reject_rating_post(update, context, post_id)
    elif action == "edit":
        await start_edit_rating_post(update, context, post_id)

# ============= –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –í –ú–û–î–ï–†–ê–¶–ò–ò =============

async def start_edit_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    keyboard = [
        [InlineKeyboardButton("üìù –ò–º—è", callback_data=f"rate_edit:name:{post_id}")],
        [InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data=f"rate_edit:age:{post_id}")],
        [InlineKeyboardButton("üí¨ –û —Å–µ–±–µ", callback_data=f"rate_edit:about:{post_id}")],
        [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data=f"rate_edit:profile:{post_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"rate_mod:back:{post_id}")]
    ]
    
    text = (
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{post.get('catalog_number')}**\n\n"
        f"üë§ –ò–º—è: {post.get('name')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {post.get('age')}\n"
        f"üí¨ –û —Å–µ–±–µ: {post.get('about')}\n"
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {post.get('profile_url')}\n\n"
        f"–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    try:
        await query.edit_message_caption(
            caption=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except:
        await query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

# ============= –û–î–û–ë–†–ï–ù–ò–ï –ü–û–°–¢–ê =============

async def approve_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç + –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    name = post['name']
    profile_url = post['profile_url']
    age = post['age']
    about = post['about']
    gender = post['gender']
    photo_file_id = post['photo_file_id']
    catalog_number = post['catalog_number']
    author_user_id = post['author_user_id']
    
    try:
        # 1. –ü–£–ë–õ–ò–ö–£–ï–ú –í BUDAPEST_PEOPLE_ID
        BUDAPEST_PEOPLE_ID = Config.STATS_CHANNELS.get('budapest_people', -1003088023508)
        
        gender_text = "–ü–∞—Ä–µ–Ω—å" if gender == "boy" else "–î–µ–≤—É—à–∫–∞"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∫–∞–∫ —Å—Å—ã–ª–∫—É
        if profile_url.startswith('@'):
            formatted_name = f"[{name}](https://t.me/{profile_url[1:]})"
        elif 'instagram.com' in profile_url:
            formatted_name = f"[{name}]({profile_url})"
        else:
            formatted_name = f"[{name}]({profile_url})"
        
        keyboard = [
            [
                InlineKeyboardButton("üò≠ -2 (0)", callback_data=f"rate:vote:{post_id}:-2"),
                InlineKeyboardButton("üëé -1 (0)", callback_data=f"rate:vote:{post_id}:-1"),
                InlineKeyboardButton("üòê 0 (0)", callback_data=f"rate:vote:{post_id}:0"),
                InlineKeyboardButton("üëç +1 (0)", callback_data=f"rate:vote:{post_id}:1"),
                InlineKeyboardButton("üî• +2 (0)", callback_data=f"rate:vote:{post_id}:2"),
            ],
            [InlineKeyboardButton(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: 0 | –ì–æ–ª–æ—Å–æ–≤: 0", callback_data="rate:noop")]
        ]
        
        caption = (
            f"‚≠ê **TopPeople Budapest**\n\n"
            f"üë§ {formatted_name}\n"
            f"{gender_text}, {age} –ª–µ—Ç\n"
            f"üí¨ {about}\n\n"
            f"üÜî #{catalog_number}\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:"
        )
        
        msg = await context.bot.send_photo(
            chat_id=BUDAPEST_PEOPLE_ID,
            photo=photo_file_id,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        post['message_id'] = msg.message_id
        post['published_channel_id'] = BUDAPEST_PEOPLE_ID
        post['status'] = 'published'
        post['published_link'] = f"https://t.me/c/{str(BUDAPEST_PEOPLE_ID)[4:]}/{msg.message_id}"
        
        # 2. –î–û–ë–ê–í–õ–Ø–ï–ú –í –ö–ê–¢–ê–õ–û–ì
        from services.catalog_service import catalog_service
        
        category = 'üë±üèª‚Äç‚ôÄÔ∏è TopGirls' if gender == 'girl' else 'ü§µüèº‚Äç‚ôÇÔ∏è TopBoys'
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
        catalog_link = post['published_link']
        
        catalog_post_id = await catalog_service.add_post(
            user_id=author_user_id,
            catalog_link=catalog_link,
            category=category,
            name=name,
            tags=[about, gender_text, f"{age}"],
            media_type='photo',
            media_file_id=photo_file_id,
            media_group_id=None,
            media_json=[photo_file_id],
            author_username=post.get('author_username'),
            author_id=author_user_id
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º catalog_number
        if catalog_post_id:
            from services.db import db
            from models import CatalogPost
            from sqlalchemy import select, update
            
            async with db.get_session() as session:
                await session.execute(
                    update(CatalogPost)
                    .where(CatalogPost.id == catalog_post_id)
                    .values(catalog_number=catalog_number)
                )
                await session.commit()
            
            logger.info(f"Added to catalog: post_id={catalog_post_id}, catalog_number={catalog_number}")
        
        # 3. –£–í–ï–î–û–ú–õ–Ø–ï–ú –ú–û–î–ï–†–ê–¢–û–†–û–í
        await query.edit_message_reply_markup(reply_markup=None)
        
        new_caption = f"{query.message.caption}\n\n‚úÖ **–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û**"
        
        await query.edit_message_caption(caption=new_caption, parse_mode='Markdown')
        
        # 4. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–°–´–õ–ö–£ –ê–í–¢–û–†–£
        try:
            author_message = (
                f"üéâ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                f"üë§ {name}\n"
                f"üÜî #{catalog_number}\n\n"
                f"üîó –í–∞—à –ø–æ—Å—Ç: {catalog_link}\n\n"
                f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ TopPeople!"
            )
            
            await context.bot.send_message(
                chat_id=author_user_id,
                text=author_message,
                parse_mode='Markdown'
            )
            logger.info(f"Author {author_user_id} notified about approval")
        except Exception as e:
            logger.warning(f"Could not notify author {author_user_id}: {e}")
        
        await query.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥", show_alert=False)
        logger.info(f"Rating post {post_id} approved and added to catalog")
        
    except Exception as e:
        logger.error(f"Error approving rating post: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

# ============= –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–û–°–¢–ê =============

async def reject_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ—Å—Ç"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        post = rating_data['posts'][post_id]
        author_user_id = post.get('author_user_id')
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
        if post_id in rating_data['posts']:
            del rating_data['posts'][post_id]
        
        await query.edit_message_reply_markup(reply_markup=None)
        
        new_caption = f"{query.message.caption}\n\n‚ùå **–û–¢–ö–õ–û–ù–ï–ù–û**"
        
        await query.edit_message_caption(caption=new_caption, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        if author_user_id:
            try:
                await context.bot.send_message(
                    chat_id=author_user_id,
                    text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ TopPeople –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except:
                pass
        
        await query.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω", show_alert=False)
        logger.info(f"Rating post {post_id} rejected")
        
    except Exception as e:
        logger.error(f"Error rejecting rating post: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

# ============= –ì–û–õ–û–°–û–í–ê–ù–ò–ï =============

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, vote_value: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    profile_url = post['profile_url']
    
    try:
        vote_key = (user_id, post_id)
        old_vote = rating_data['user_votes'].get(vote_key)
        
        rating_data['user_votes'][vote_key] = vote_value
        post['votes'][user_id] = vote_value
        
        if profile_url in rating_data['profiles']:
            profile = rating_data['profiles'][profile_url]
            
            total_score = sum(post['votes'].values())
            vote_count = len(post['votes'])
            
            profile['total_score'] = total_score
            profile['vote_count'] = vote_count
            
            logger.info(f"User {username} voted {vote_value} for post {post_id}")
        
        stats = get_post_stats(post_id)
        keyboard = [
            [
                InlineKeyboardButton(f"üò≠ -2 ({stats['-2']})", callback_data=f"rate:vote:{post_id}:-2"),
                InlineKeyboardButton(f"üëé -1 ({stats['-1']})", callback_data=f"rate:vote:{post_id}:-1"),
                InlineKeyboardButton(f"üòê 0 ({stats['0']})", callback_data=f"rate:vote:{post_id}:0"),
                InlineKeyboardButton(f"üëç +1 ({stats['1']})", callback_data=f"rate:vote:{post_id}:1"),
                InlineKeyboardButton(f"üî• +2 ({stats['2']})", callback_data=f"rate:vote:{post_id}:2"),
            ],
            [InlineKeyboardButton(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {profile['total_score']} | –ì–æ–ª–æ—Å–æ–≤: {profile['vote_count']}", 
                                callback_data="rate:noop")]
        ]
        
        await context.bot.edit_message_reply_markup(
            chat_id=post['published_channel_id'],
            message_id=post['message_id'],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        emoji_map = {-2: "üò≠", -1: "üëé", 0: "üòê", 1: "üëç", 2: "üî•"}
        await query.answer(f"{emoji_map.get(vote_value, '?')} –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!", show_alert=False)
        
    except Exception as e:
        logger.error(f"Error handling vote: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}", show_alert=True)

def get_post_stats(post_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤"""
    if post_id not in rating_data['posts']:
        return {'-2': 0, '-1': 0, '0': 0, '1': 0, '2': 0}
    
    post = rating_data['posts'][post_id]
    stats = {'-2': 0, '-1': 0, '0': 0, '1': 0, '2': 0}
    
    for vote in post['votes'].values():
        stats[str(vote)] += 1
    
    return stats

# ============= –ö–û–ú–ê–ù–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =============

async def toppeople_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ - /toppeople"""
    if not rating_data['profiles']:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(
        rating_data['profiles'].items(),
        key=lambda x: x[1]['total_score'],
        reverse=True
    )[:10]
    
    text = "‚≠ê **TOPinBUDAPEST**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if data['gender'] == 'boy' else "üôãüèº‚Äç‚ôÄÔ∏è"
        text += (
            f"{i}. {data.get('name', '–ò–º—è')} ({profile_url})\n"
            f"   {gender_emoji} {data.get('age', '?')} –ª–µ—Ç\n"
            f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {data['total_score']}\n"
            f"   üìä –ì–æ–ª–æ—Å–æ–≤: {data['vote_count']}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def topboys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –º—É–∂—á–∏–Ω - /topboys"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'boy'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üï∫ **TOP10 BOYS**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += f"{i}. {data.get('name')} ‚Äî ‚≠ê {data['total_score']} ({data['vote_count']} –≥–æ–ª–æ—Å–æ–≤)\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def topgirls_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """TOP10 –¥–µ–≤—É—à–µ–∫ - /topgirls"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'girl'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üë±‚Äç‚ôÄÔ∏è **–¢–û–ü10 GIRLS**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += f"{i}. {data.get('name')} ‚Äî üåü {data['total_score']} ({data['vote_count']} –≥–æ–ª–æ—Å–æ–≤)\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def toppeoplereset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ—á–∫–∏ - /toppeoplereset"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã")
        return
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–ë–†–û–°–ò–¢–¨", callback_data="rate:reset:confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rate:reset:cancel")
        ]
    ]
    
    text = (
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –ü–û–õ–ù–´–ô –°–ë–†–û–° –†–ï–ô–¢–ò–ù–ì–ê**\n\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –æ—á–∫–∏, –≥–æ–ª–æ—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# ============= EXPORT =============

__all__ = [
    'itsme_command',
    'handle_rate_photo',
    'handle_rate_profile',
    'handle_rate_age',
    'handle_rate_name',
    'handle_rate_about',
    'handle_rate_callback',
    'handle_rate_moderation_callback',
    'handle_vote',
    'toppeople_command',
    'topboys_command',
    'topgirls_command',
    'toppeoplereset_command',
    'publish_rate_post',
    'send_rating_to_moderation',
    'approve_rating_post',
    'reject_rating_post',
    'get_post_stats',
    'rating_data'
]
