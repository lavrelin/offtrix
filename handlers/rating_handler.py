# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –æ–ø—Ä–æ—Å–∞–º–∏
–ì–æ–ª–æ—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –æ—á–∫–∏ –∏ –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –∏ –ø–æ–ª—É
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from datetime import datetime
import logging
from typing import Dict, Optional

logger = logging.getLogger(__name__)

# ============= –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• =============

rating_data = {
    'posts': {},
    'profiles': {},
    'user_votes': {}
}

# ============= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def itsme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å –æ–ø—Ä–æ—Å–æ–º - /itsme"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("ü§£ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã")
        return
    
    context.user_data['rate_step'] = 'photo'
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="rate:cancel")]]
    
    text = (
        "**‚ù§Ô∏è TopPeople Budapest ‚Äî –≤—Ä–µ–º—è –∑–∞—è–≤–∏—Ç—å –æ —Å–µ–±–µ**\n\n"
        "–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –ª–µ–Ω—Ç—É –ª—É—á—à–∏—Ö –∏ –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ üî•\n\n"
        "–ü–æ–∫–∞–∂–∏ —Å–µ–±—è –∏ –ø–æ–¥–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ üåÄ–∞–∫–∫–∞—É–Ω—Ç–∞."
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    context.user_data['waiting_for'] = 'rate_photo'

async def handle_rate_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    if not update.message.photo:
        await update.message.reply_text("üëª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        return
    
    context.user_data['rate_photo_file_id'] = update.message.photo[-1].file_id
    context.user_data['rate_step'] = 'profile'
    context.user_data['waiting_for'] = 'rate_profile'
    
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
    
    text = (
        "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
        "üíÅüèª –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ username\n"
        "–ü—Ä–∏–º–µ—Ä: üåÄusername –∏–ª–∏ https://instagram.com/username"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    profile_url = update.message.text.strip()
    
    if not profile_url or len(profile_url) < 3:
        await update.message.reply_text("üöî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
        return
    
    if profile_url.startswith('@'):
        profile_url = profile_url[1:]
    elif not profile_url.startswith('http'):
        profile_url = f"@{profile_url}"
    
    context.user_data['rate_profile'] = profile_url
    context.user_data['rate_step'] = 'gender'
    context.user_data['waiting_for'] = None
    
    keyboard = [
        [
            InlineKeyboardButton("ü¶∏‚Äç‚ôÇÔ∏è Boy", callback_data="rate:gender:boy"),
            InlineKeyboardButton("ü¶∏‚Äç‚ôÄÔ∏è Girl", callback_data="rate:gender:girl")
        ],
        [
            InlineKeyboardButton("‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω–æ", callback_data="rate:gender:unknown"),
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="rate:back")
        ]
    ]
    
    text = (
        "ü™™ Profile: " + profile_url + "\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª\n\n"
        "üôãüèº‚Äç‚ôÇÔ∏è Man? /üôãüèº‚Äç‚ôÄÔ∏è Girl? "
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    value = data[2] if len(data) > 2 else None
    
    if action == "gender":
        context.user_data['rate_gender'] = value
        await publish_rate_post(update, context)
    
    elif action == "vote":
        post_id = int(value) if value else None
        vote_value = int(data[3]) if len(data) > 3 else None
        await handle_vote(update, context, post_id, vote_value)
    
    elif action == "back":
        step = context.user_data.get('rate_step', 'photo')
        if step == 'profile':
            context.user_data['rate_step'] = 'photo'
            context.user_data['waiting_for'] = 'rate_photo'
            keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="rate:cancel")]]
            await query.edit_message_text(
                "üßëüèº‚Äçüíª –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—ë –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif step == 'gender':
            context.user_data['rate_step'] = 'profile'
            context.user_data['waiting_for'] = 'rate_profile'
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rate:back")]]
            await query.edit_message_text(
                "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif action == "cancel":
        context.user_data.pop('rate_photo_file_id', None)
        context.user_data.pop('rate_profile', None)
        context.user_data.pop('rate_gender', None)
        context.user_data.pop('rate_step', None)
        context.user_data.pop('waiting_for', None)
        
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

async def publish_rate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    photo_file_id = context.user_data.get('rate_photo_file_id')
    profile_url = context.user_data.get('rate_profile')
    gender = context.user_data.get('rate_gender')
    
    if not all([photo_file_id, profile_url, gender]):
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        post_id = len(rating_data['posts']) + 1
        
        rating_data['posts'][post_id] = {
            'profile_url': profile_url,
            'gender': gender,
            'photo_file_id': photo_file_id,
            'created_at': datetime.now(),
            'votes': {},
            'status': 'pending'
        }
        
        if profile_url not in rating_data['profiles']:
            rating_data['profiles'][profile_url] = {
                'gender': gender,
                'total_score': 0,
                'vote_count': 0,
                'post_ids': []
            }
        
        rating_data['profiles'][profile_url]['post_ids'].append(post_id)
        
        logger.info(f"Rating post {post_id} created for {profile_url}, sending to moderation")
        
        await send_rating_to_moderation(update, context, post_id, photo_file_id, profile_url, gender)
        
        context.user_data.pop('rate_photo_file_id', None)
        context.user_data.pop('rate_profile', None)
        context.user_data.pop('rate_gender', None)
        context.user_data.pop('rate_step', None)
        
        await update.callback_query.edit_message_text(
            f"‚úÖ **–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
            f"ü™™ –ê–∫–∫–∞—É–Ω—Ç: {profile_url}\n"
            f"üë©üèª‚Äçü§ù‚Äçüë®üèº –ü–æ–ª: {gender.upper()}\n"
            f"#Ô∏è‚É£ Post iD: {post_id}\n\n"
            f"üôÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error preparing rate post: {e}")
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {e}")

async def send_rating_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     post_id: int, photo_file_id: str, 
                                     profile_url: str, gender: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    bot = context.bot
    
    try:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ üõúSocialMedia üç≠People in Budapest", callback_data=f"rate_mod:approve:{post_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rate_mod:reject:{post_id}")
            ]
        ]
        
        caption = (
            f"üö® **üÜï –∑–∞—è–≤–∫–∞ –æ—Ç ‚≠êÔ∏èTopPeople**\n\n"
            f"ü™™ –ü—Ä–æ—Ñ–∏–ª—å: {profile_url}\n"
            f"üë©‚Äç‚ù§Ô∏è‚Äçüë® –ü–æ–ª: {gender.upper()}\n"
            f"üìá Post ID: {post_id}\n"
            f"üóìÔ∏è –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ùì –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        msg = await bot.send_photo(
            chat_id=Config.MODERATION_GROUP_ID,
            photo=photo_file_id,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        rating_data['posts'][post_id]['moderation_message_id'] = msg.message_id
        rating_data['posts'][post_id]['moderation_group_id'] = Config.MODERATION_GROUP_ID
        
        logger.info(f"Rating post {post_id} sent to moderation")
        
    except Exception as e:
        logger.error(f"Error sending rating post to moderation: {e}")
        raise

async def handle_rate_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle moderation callbacks for rating posts"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    if not Config.is_moderator(update.effective_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if action == "approve":
        await approve_rating_post(update, context, post_id)
    elif action == "reject":
        await reject_rating_post(update, context, post_id)

async def approve_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    profile_url = post['profile_url']
    gender = post['gender']
    photo_file_id = post['photo_file_id']
    
    try:
        BUDAPEST_PEOPLE_ID = -1003114019170
        
        keyboard = [
            [
                InlineKeyboardButton("üò≠ -2 (0)", callback_data=f"rate:vote:{post_id}:-2"),
                InlineKeyboardButton("üëé -1 (0)", callback_data=f"rate:vote:{post_id}:-1"),
                InlineKeyboardButton("üòê 0 (0)", callback_data=f"rate:vote:{post_id}:0"),
                InlineKeyboardButton("üëç +1 (0)", callback_data=f"rate:vote:{post_id}:1"),
                InlineKeyboardButton("üî• +2 (0)", callback_data=f"rate:vote:{post_id}:2"),
            ],
            [InlineKeyboardButton(f"‚≠êÔ∏è Score: 0 | Votes: 0", callback_data="rate:noop")]
        ]
        
        caption = f"üëç –û—Ü–µ–Ω–∫–∞ üëé {profile_url}\n\nüë´ Gender: {gender.upper()}\n\nüë©üèª‚Äç‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É"
        
        msg = await context.bot.send_photo(
            chat_id=BUDAPEST_PEOPLE_ID,
            photo=photo_file_id,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        post['message_id'] = msg.message_id
        post['published_channel_id'] = BUDAPEST_PEOPLE_ID
        post['status'] = 'published'
        
        await query.edit_message_reply_markup(reply_markup=None)
        
        new_caption = (
            f"{query.message.caption}\n\n"
            f"‚úÖ **–û–î–û–ë–†–ï–ù–û –ò –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û**\n"
            f"–í üèÜ Top Budapest / –í–∑–∞–∏–º–Ω—ã–µ‚ù§Ô∏èüí¨‚û°Ô∏è / –õ—é–¥–∏ –ë—É–¥–∞–ø–µ—à—Ç"
        )
        
        await query.edit_message_caption(
            caption=new_caption,
            parse_mode='Markdown'
        )
        
        await query.answer("üõú SocialMedia ü¶πüèªPeople in Budapest üá≠üá∫", show_alert=False)
        logger.info(f"Rating post {post_id} approved and published")
        
    except Exception as e:
        logger.error(f"Error approving rating post: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

async def reject_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ—Å—Ç"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        if post_id in rating_data['posts']:
            del rating_data['posts'][post_id]
        
        await query.edit_message_reply_markup(reply_markup=None)
        
        new_caption = (
            f"{query.message.caption}\n\n"
            f"‚ùå **–û–¢–ö–õ–û–ù–ï–ù–û**"
        )
        
        await query.edit_message_caption(
            caption=new_caption,
            parse_mode='Markdown'
        )
        
        await query.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω", show_alert=False)
        logger.info(f"Rating post {post_id} rejected")
        
    except Exception as e:
        logger.error(f"Error rejecting rating post: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, vote_value: int):
    """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    profile_url = post['profile_url']
    
    try:
        vote_key = (user_id, post_id)
        old_vote = rating_data['user_votes'].get(vote_key)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        rating_data['user_votes'][vote_key] = vote_value
        post['votes'][user_id] = vote_value
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        if profile_url in rating_data['profiles']:
            profile = rating_data['profiles'][profile_url]
            
            total_score = sum(post['votes'].values())
            vote_count = len(post['votes'])
            
            profile['total_score'] = total_score
            profile['vote_count'] = vote_count
            
            logger.info(f"User {username} voted {vote_value} for post {post_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–≤—ã–º–∏ —á–∏—Å–ª–∞–º–∏
        stats = get_post_stats(post_id)
        keyboard = [
            [
                InlineKeyboardButton(f"üò≠ -2 ({stats['-2']})", callback_data=f"rate:vote:{post_id}:-2"),
                InlineKeyboardButton(f"üëé -1 ({stats['-1']})", callback_data=f"rate:vote:{post_id}:-1"),
                InlineKeyboardButton(f"üòê 0 ({stats['0']})", callback_data=f"rate:vote:{post_id}:0"),
                InlineKeyboardButton(f"üëç +1 ({stats['1']})", callback_data=f"rate:vote:{post_id}:1"),
                InlineKeyboardButton(f"üî• +2 ({stats['2']})", callback_data=f"rate:vote:{post_id}:2"),
            ],
            [InlineKeyboardButton(f"‚≠êÔ∏è Score: {profile['total_score']} | Votes: {profile['vote_count']}", 
                                callback_data="rate:noop")]
        ]
        
        await context.bot.edit_message_reply_markup(
            chat_id=post['published_channel_id'],
            message_id=post['message_id'],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        emoji_map = {-2: "üò≠", -1: "üëé", 0: "üòê", 1: "üëç", 2: "üî•"}
        await query.answer(f"{emoji_map.get(vote_value, '?')} –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!", show_alert=False)
        
    except Exception as e:
        logger.error(f"Error handling vote: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

def get_post_stats(post_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤"""
    if post_id not in rating_data['posts']:
        return {'-2': 0, '-1': 0, '0': 0, '1': 0, '2': 0}
    
    post = rating_data['posts'][post_id]
    stats = {'-2': 0, '-1': 0, '0': 0, '1': 0, '2': 0}
    
    for vote in post['votes'].values():
        stats[str(vote)] += 1
    
    return stats

# ============= –ö–û–ú–ê–ù–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =============

async def toppeople_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ - /toppeople"""
    if not rating_data['profiles']:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(
        rating_data['profiles'].items(),
        key=lambda x: x[1]['total_score'],
        reverse=True
    )[:10]
    
    text = "‚≠êÔ∏è **TOPinBUDAPEST**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += (
            f"{i}. **{profile_url}**\n"
            f"   ‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {data['total_score']}\n"
            f"   üë©üèª‚Äç‚öñÔ∏è –û—Ü–µ–Ω–æ–∫: {data['vote_count']}\n"
            f"   üë©üèº‚Äçü§ù‚Äçüë®üèª –ü–æ–ª: {data['gender'].upper()}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def topboys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –º—É–∂—á–∏–Ω - /topboys"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'boy'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üï∫ **TOP10 BOYS**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += f"{i}. {profile_url} ‚Äî ‚≠êÔ∏è {data['total_score']} ({data['vote_count']} –≥–æ–ª–æ—Å–æ–≤)\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def topgirls_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """TOP10üíÉ - /topgirls"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'girl'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üë±‚Äç‚ôÄÔ∏è **–¢–û–ü10 GIRLS**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += f"{i}. {profile_url} ‚Äî üåü {data['total_score']} ({data['vote_count']} –≥–æ–ª–æ—Å–æ–≤)\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def toppeoplereset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ—á–∫–∏ - /toppeoplereset"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã")
        return
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–ë–†–û–°–ò–¢–¨", callback_data="rate:reset:confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rate:reset:cancel")
        ]
    ]
    
    text = (
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –ü–û–õ–ù–´–ô –°–ë–†–û–° –†–ï–ô–¢–ò–ù–ì–ê**\n\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –æ—á–∫–∏, –≥–æ–ª–æ—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

__all__ = [
    'itsme_command',
    'handle_rate_photo',
    'handle_rate_profile',
    'handle_rate_callback',
    'handle_rate_moderation_callback',
    'handle_vote',
    'toppeople_command',
    'topboys_command',
    'topgirls_command',
    'toppeoplereset_command',
    'publish_rate_post',
    'send_rating_to_moderation',
    'approve_rating_post',
    'reject_rating_post',
    'get_post_stats',
    'rating_data'
]
