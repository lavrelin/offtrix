# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –æ–ø—Ä–æ—Å–∞–º–∏
–ì–æ–ª–æ—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –æ—á–∫–∏ –∏ –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –∏ –ø–æ–ª—É
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from config import Config
from datetime import datetime
import logging
from typing import Dict, List, Tuple, Optional

logger = logging.getLogger(__name__)

# ============= –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• =============

rating_data = {
    'posts': {},  # {post_id: {'profile_url': str, 'gender': str, 'photo_file_id': str, 'caption': str, 'votes': {}}}
    'profiles': {},  # {profile_url: {'gender': str, 'total_score': int, 'vote_count': int, 'post_ids': []}}
    'user_votes': {}  # {(user_id, post_id): vote_value}  <- –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
}

# ============= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def rate_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å –æ–ø—Ä–æ—Å–æ–º - /ratestart"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã")
        return
    
    context.user_data['rate_step'] = 'photo'
    
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="rate:cancel")]]
    
    text = (
        "üìä **–°–û–ó–î–ê–ù–ò–ï –†–ï–ô–¢–ò–ù–ì–ê –° –û–ü–†–û–°–û–ú**\n\n"
        "–®–∞–≥ 1Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    context.user_data['waiting_for'] = 'rate_photo'

async def handle_rate_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    if not update.message.photo:
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        return
    
    context.user_data['rate_photo_file_id'] = update.message.photo[-1].file_id
    context.user_data['rate_step'] = 'profile'
    context.user_data['waiting_for'] = 'rate_profile'
    
    keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="rate:back")]]
    
    text = (
        "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–®–∞–≥ 2Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n\n"
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ username (Instagram, Telegram –∏ —Ç.–¥.)\n"
        "–ü—Ä–∏–º–µ—Ä: @username –∏–ª–∏ https://instagram.com/username"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    profile_url = update.message.text.strip()
    
    if not profile_url or len(profile_url) < 3:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
    if profile_url.startswith('@'):
        profile_url = profile_url[1:]
    elif not profile_url.startswith('http'):
        profile_url = f"@{profile_url}"
    
    context.user_data['rate_profile'] = profile_url
    context.user_data['rate_step'] = 'gender'
    context.user_data['waiting_for'] = None
    
    keyboard = [
        [
            InlineKeyboardButton("üßë‚Äçü¶± Boy", callback_data="rate:gender:boy"),
            InlineKeyboardButton("üë±‚Äç‚ôÄÔ∏è Girl", callback_data="rate:gender:girl")
        ],
        [
            InlineKeyboardButton("‚ùì Unknown", callback_data="rate:gender:unknown"),
            InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="rate:back")
        ]
    ]
    
    text = (
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: " + profile_url + "\n\n"
        "–®–∞–≥ 3Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n\n"
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_rate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    value = data[2] if len(data) > 2 else None
    
    if action == "gender":
        context.user_data['rate_gender'] = value
        await publish_rate_post(update, context)
    
    elif action == "vote":
        post_id = int(value) if value else None
        vote_value = int(data[3]) if len(data) > 3 else None
        await handle_vote(update, context, post_id, vote_value)
    
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        step = context.user_data.get('rate_step', 'photo')
        if step == 'profile':
            context.user_data['rate_step'] = 'photo'
            context.user_data['waiting_for'] = 'rate_photo'
            keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="rate:cancel")]]
            await query.edit_message_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif step == 'gender':
            context.user_data['rate_step'] = 'profile'
            context.user_data['waiting_for'] = 'rate_profile'
            keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="rate:back")]]
            await query.edit_message_text(
                "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif action == "cancel":
        context.user_data.pop('rate_photo_file_id', None)
        context.user_data.pop('rate_profile', None)
        context.user_data.pop('rate_gender', None)
        context.user_data.pop('rate_step', None)
        context.user_data.pop('waiting_for', None)
        
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

async def publish_rate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –æ–ø—Ä–æ—Å–æ–º –≤ –∫–∞–Ω–∞–ª"""
    photo_file_id = context.user_data.get('rate_photo_file_id')
    profile_url = context.user_data.get('rate_profile')
    gender = context.user_data.get('rate_gender')
    
    if not all([photo_file_id, profile_url, gender]):
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞
        post_id = len(rating_data['posts']) + 1
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–æ—Å–∞
        keyboard = [
            [
                InlineKeyboardButton("üò≠ -2", callback_data=f"rate:vote:{post_id}:-2"),
                InlineKeyboardButton("üëé -1", callback_data=f"rate:vote:{post_id}:-1"),
                InlineKeyboardButton("üòê 0", callback_data=f"rate:vote:{post_id}:0"),
                InlineKeyboardButton("üëç +1", callback_data=f"rate:vote:{post_id}:1"),
                InlineKeyboardButton("üî• +2", callback_data=f"rate:vote:{post_id}:2"),
            ]
        ]
        
        # –ü–æ–¥–ø–∏—Å—å
        caption = f"üìä Rate {profile_url}\n\n" \
                  f"üë• Gender: {gender.upper()}\n\n" \
                  f"üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É"
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        msg = await context.bot.send_photo(
            chat_id=Config.TARGET_CHANNEL_ID,
            photo=photo_file_id,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        rating_data['posts'][post_id] = {
            'profile_url': profile_url,
            'gender': gender,
            'photo_file_id': photo_file_id,
            'caption': caption,
            'message_id': msg.message_id,
            'votes': {},  # {user_id: vote_value}
            'created_at': datetime.now()
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if profile_url not in rating_data['profiles']:
            rating_data['profiles'][profile_url] = {
                'gender': gender,
                'total_score': 0,
                'vote_count': 0,
                'post_ids': []
            }
        
        rating_data['profiles'][profile_url]['post_ids'].append(post_id)
        
        logger.info(f"Published rate post {post_id} for {profile_url}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('rate_photo_file_id', None)
        context.user_data.pop('rate_profile', None)
        context.user_data.pop('rate_gender', None)
        context.user_data.pop('rate_step', None)
        
        await update.callback_query.edit_message_text(
            f"‚úÖ **–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!**\n\n"
            f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {profile_url}\n"
            f"üë• –ü–æ–ª: {gender.upper()}\n"
            f"üÜî Post ID: {post_id}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error publishing rate post: {e}")
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                     post_id: int, vote_value: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if post_id not in rating_data['posts']:
        await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    profile_url = post['profile_url']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    vote_key = (user_id, post_id)
    old_vote = rating_data['user_votes'].get(vote_key)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å
    rating_data['user_votes'][vote_key] = vote_value
    post['votes'][user_id] = vote_value
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    if profile_url in rating_data['profiles']:
        profile = rating_data['profiles'][profile_url]
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≥–æ–ª–æ—Å–æ–≤
        total_score = 0
        vote_count = 0
        
        for user_vote in post['votes'].values():
            total_score += user_vote
            vote_count += 1
        
        profile['total_score'] = total_score
        profile['vote_count'] = vote_count
        
        logger.info(f"User {username} voted {vote_value} for post {post_id} ({profile_url})")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º–∏
    try:
        stats = get_post_stats(post_id)
        keyboard = [
            [
                InlineKeyboardButton(f"üò≠ -2 ({stats['-2']})", callback_data=f"rate:vote:{post_id}:-2"),
                InlineKeyboardButton(f"üëé -1 ({stats['-1']})", callback_data=f"rate:vote:{post_id}:-1"),
                InlineKeyboardButton(f"üòê 0 ({stats['0']})", callback_data=f"rate:vote:{post_id}:0"),
                InlineKeyboardButton(f"üëç +1 ({stats['1']})", callback_data=f"rate:vote:{post_id}:1"),
                InlineKeyboardButton(f"üî• +2 ({stats['2']})", callback_data=f"rate:vote:{post_id}:2"),
            ],
            [InlineKeyboardButton(f"üìä Score: {profile['total_score']} | Votes: {profile['vote_count']}", 
                                callback_data="rate:noop")]
        ]
        
        await context.bot.edit_message_reply_markup(
            chat_id=Config.TARGET_CHANNEL_ID,
            message_id=post['message_id'],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"Error updating post stats: {e}")
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    emoji_map = {-2: "üò≠", -1: "üëé", 0: "üòê", 1: "üëç", 2: "üî•"}
    await update.callback_query.answer(f"{emoji_map.get(vote_value, '?')} –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!", show_alert=False)

def get_post_stats(post_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞"""
    if post_id not in rating_data['posts']:
        return {'-2': 0, '-1': 0, '0': 0, '1': 0, '2': 0}
    
    post = rating_data['posts'][post_id]
    stats = {'-2': 0, '-1': 0, '0': 0, '1': 0, '2': 0}
    
    for vote in post['votes'].values():
        stats[str(vote)] += 1
    
    return stats

# ============= –ö–û–ú–ê–ù–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =============

async def toppeople_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ –æ—á–∫–∞–º - /toppeople"""
    if not rating_data['profiles']:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º
    sorted_profiles = sorted(
        rating_data['profiles'].items(),
        key=lambda x: x[1]['total_score'],
        reverse=True
    )[:10]
    
    text = "üèÜ **–¢–û–ü-10 –ü–†–û–§–ò–õ–ï–ô**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += (
            f"{i}. **{profile_url}**\n"
            f"   ‚≠êÔ∏è –û—á–∫–∏: {data['total_score']}\n"
            f"   üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤: {data['vote_count']}\n"
            f"   üë• –ü–æ–ª: {data['gender'].upper()}\n\n"
        )
    
    keyboard = [[InlineKeyboardButton("üëØ –¢–æ–ø Boys", callback_data="rate:topboys"),
                InlineKeyboardButton("üëØ‚Äç‚ôÄÔ∏è –¢–æ–ø Girls", callback_data="rate:topgirls")]]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def topboys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 —Å—Ä–µ–¥–∏ –º—É–∂—á–∏–Ω - /topboys"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'boy'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üßë‚Äçü¶± **–¢–û–ü-10 BOYS**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += f"{i}. {profile_url} ‚Äî ‚≠êÔ∏è {data['total_score']} ({data['vote_count']} –≥–æ–ª–æ—Å–æ–≤)\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def topgirls_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 —Å—Ä–µ–¥–∏ –∂–µ–Ω—â–∏–Ω - /topgirls"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'girl'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üë±‚Äç‚ôÄÔ∏è **–¢–û–ü-10 GIRLS**\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        text += f"{i}. {profile_url} ‚Äî ‚≠êÔ∏è {data['total_score']} ({data['vote_count']} –≥–æ–ª–æ—Å–æ–≤)\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def toppeoplereset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ—á–∫–∏ - /toppeoplereset (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã")
        return
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–ë–†–û–°–ò–¢–¨", callback_data="rate:reset:confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rate:reset:cancel")
        ]
    ]
    
    text = (
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –ü–û–õ–ù–´–ô –°–ë–†–û–° –†–ï–ô–¢–ò–ù–ì–ê**\n\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç:\n"
        "‚ùå –í—Å–µ –æ—á–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
        "‚ùå –í—Å–µ –≥–æ–ª–æ—Å–∞\n"
        "‚ùå –í—Å—é –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def handle_reset_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    query = update.callback_query
    
    if action == "confirm":
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
        rating_data['posts'] = {}
        rating_data['profiles'] = {}
        rating_data['user_votes'] = {}
        
        logger.warning(f"Rating system reset by admin {update.effective_user.id}")
        
        await query.edit_message_text(
            "‚úÖ **–†–ï–ô–¢–ò–ù–ì –ü–û–õ–ù–û–°–¢–¨–Æ –°–ë–†–û–®–ï–ù**\n\n"
            "–í—Å–µ –æ—á–∫–∏, –≥–æ–ª–æ—Å–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã"
        )
    else:
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü handlers/rating_handler.py (–ø–µ—Ä–µ–¥ __all__)

async def handle_rate_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle moderation callbacks for rating posts"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    if not Config.is_moderator(update.effective_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if action == "approve":
        await approve_rating_post(update, context, post_id)
    elif action == "reject":
        await reject_rating_post(update, context, post_id)

async def approve_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Approve rating post and publish it"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    try:
        await query.answer("‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!")
        await query.edit_message_reply_markup(reply_markup=None)
        
        logger.info(f"Rating post {post_id} approved by {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error approving rating post: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

async def reject_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Reject rating post"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    try:
        await query.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        await query.edit_message_reply_markup(reply_markup=None)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
        if post_id in rating_data['posts']:
            del rating_data['posts'][post_id]
        
        logger.info(f"Rating post {post_id} rejected by {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error rejecting rating post: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

# ============= –û–ë–ù–û–í–ò–¢–ï __all__ =============
# –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π __all__ –Ω–∞:

__all__ = [
    'rate_start_command',
    'handle_rate_photo',
    'handle_rate_profile',
    'handle_rate_callback',
    'handle_rate_moderation_callback',
    'toppeople_command',
    'topboys_command',
    'topgirls_command',
    'toppeoplereset_command',
    'publish_rate_post',
    'approve_rating_post',
    'reject_rating_post',
    'rating_data'
]
