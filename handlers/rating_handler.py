from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from config import Config
from services.cooldown import cooldown_service, CooldownType
from datetime import datetime, timedelta
import logging
import re
import random
from typing import Dict, Optional

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIXES (–£–ù–ò–ö–ê–õ–¨–ù–´–ï V8) =============
RATING_CALLBACKS = {
    'gender': 'rtpc_gender',
    'vote': 'rtpc_vote',
    'back': 'rtpc_back',
    'cancel': 'rtpc_cancel',
    'noop': 'rtpc_noop',
}

RATING_MOD_CALLBACKS = {
    'edit': 'rtmc_edit',
    'approve': 'rtmc_approve',
    'reject': 'rtmc_reject',
    'back': 'rtmc_back',
}

# ============= SETTINGS =============
COOLDOWN_HOURS = 24  # 24 —á–∞—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
MIN_AGE = 18
MAX_AGE = 70
MAX_ABOUT_WORDS = 3
MAX_WORD_LENGTH = 7

# ============= DATA STORAGE =============
rating_data = {
    'posts': {},
    'profiles': {},
    'user_votes': {},  # {user_id: {post_id: vote_value}}
}

# ============= HELPER FUNCTIONS =============

def safe_markdown(text: str) -> str:
    """
    –ë–ï–ó–û–ü–ê–°–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: Can't parse entities
    """
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    result = str(text)
    for char in special_chars:
        result = result.replace(char, f'\\{char}')
    
    return result

def validate_instagram_url(url: str) -> tuple:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è Instagram URL (–≤–∫–ª—é—á–∞—è —Å UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    Returns: (is_valid: bool, cleaned_url: str)
    """
    if not url:
        return False, ""
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    url = url.strip()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Instagram
    instagram_patterns = [
        r'(?:https?://)?(?:www\.)?instagram\.com/([a-zA-Z0-9._]+)',
        r'(?:https?://)?(?:www\.)?instagram\.com/p/([a-zA-Z0-9_-]+)',
        r'(?:https?://)?(?:www\.)?instagram\.com/reel/([a-zA-Z0-9_-]+)',
    ]
    
    for pattern in instagram_patterns:
        match = re.search(pattern, url)
        if match:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–ª–∏ post ID
            identifier = match.group(1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É
            if '/p/' in url or '/reel/' in url:
                cleaned_url = f"https://instagram.com/{'p' if '/p/' in url else 'reel'}/{identifier}"
            else:
                cleaned_url = f"https://instagram.com/{identifier}"
            
            return True, cleaned_url
    
    return False, url

def validate_profile_url(url: str) -> Optional[str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (Telegram –∏–ª–∏ Instagram)
    Returns: cleaned URL –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ
    """
    if not url or len(url) < 3:
        return None
    
    url = url.strip()
    
    # Telegram username
    if url.startswith('@'):
        username = url[1:]
        if re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
            return f"@{username}"
        return None
    
    # t.me —Å—Å—ã–ª–∫–∞
    if 't.me/' in url:
        match = re.search(r't\.me/([a-zA-Z0-9_]{5,32})', url)
        if match:
            return f"@{match.group(1)}"
        return None
    
    # Instagram URL (–≤–∫–ª—é—á–∞—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    is_valid, cleaned = validate_instagram_url(url)
    if is_valid:
        return cleaned
    
    # –û–±—ã—á–Ω—ã–π username –±–µ–∑ @
    if re.match(r'^[a-zA-Z0-9_]{3,}$', url):
        return f"@{url}"
    
    return None

async def check_vote_limit(user_id: int, post_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - 1 –≥–æ–ª–æ—Å –Ω–∞ –ø–æ—Å—Ç –Ω–∞–≤—Å–µ–≥–¥–∞"""
    if user_id not in rating_data['user_votes']:
        return True
    
    return post_id not in rating_data['user_votes'][user_id]

async def generate_catalog_number() -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    from services.catalog_service import catalog_service
    from services.db import db
    from models import CatalogPost
    from sqlalchemy import select
    
    try:
        async with db.get_session() as session:
            for _ in range(100):
                number = random.randint(1, 9999)
                
                result = await session.execute(
                    select(CatalogPost.id).where(CatalogPost.catalog_number == number)
                )
                
                if not result.scalar_one_or_none():
                    used = any(p.get('catalog_number') == number for p in rating_data['posts'].values())
                    if not used:
                        return number
            
            raise Exception("Could not generate number")
    except Exception as e:
        logger.error(f"Error generating number: {e}")
        return random.randint(1000, 9999)

def validate_about(text: str) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è '–û —Å–µ–±–µ'"""
    words = text.strip().split()
    
    if len(words) > MAX_ABOUT_WORDS:
        return f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_ABOUT_WORDS} —Å–ª–æ–≤–∞"
    
    for word in words:
        if len(word) > MAX_WORD_LENGTH:
            return f"‚ùå –°–ª–æ–≤–æ '{word}' –±–æ–ª—å—à–µ {MAX_WORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    
    return None

# ============= MAIN COMMAND WITH COOLDOWN =============

async def itsme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - /itsme —Å –∫—É–ª–¥–∞—É–Ω–æ–º 24—á"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —á–µ—Ä–µ–∑ cooldown_service
    can_use, remaining = await cooldown_service.check_cooldown(
        user_id=user_id,
        command='itsme',
        duration=COOLDOWN_HOURS * 3600,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        cooldown_type=CooldownType.NORMAL
    )
    
    if not can_use:
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        await update.message.reply_text(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {hours}—á {minutes}–º–∏–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã"
        )
        return
    
    context.user_data['rate_step'] = 'name'
    context.user_data['waiting_for'] = 'rate_name'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=RATING_CALLBACKS['cancel'])]]
    
    await update.message.reply_text(
        "‚≠ê *TopPeople Budapest*\n\n"
        "üéØ –®–∞–≥ 1/6: *–í–∞—à–µ –∏–º—è*\n\n"
        "–ö–∞–∫ –≤–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å?\n"
        "–ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= STEP HANDLERS =============

async def handle_rate_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = update.message.text.strip()
    
    if len(name) < 2 or len(name) > 50:
        await update.message.reply_text("‚ùå –ò–º—è: 2-50 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    context.user_data['rate_name'] = name
    context.user_data['rate_step'] = 'photo'
    context.user_data['waiting_for'] = 'rate_photo'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    safe_name = safe_markdown(name)
    await update.message.reply_text(
        f"‚úÖ –ò–º—è: *{safe_name}*\n\n"
        f"üéØ –®–∞–≥ 2/6: *–§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ*\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_rate_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ"""
    media_type = None
    file_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if update.message.photo:
        media_type = 'photo'
        file_id = update.message.photo[-1].file_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
    elif update.message.video:
        media_type = 'video'
        file_id = update.message.video.file_id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ (–º–∞–∫—Å 60 —Å–µ–∫—É–Ω–¥)
        if update.message.video.duration > 60:
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥")
            return
    
    else:
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
        return
    
    context.user_data['rate_media_type'] = media_type
    context.user_data['rate_media_file_id'] = file_id
    context.user_data['rate_step'] = 'age'
    context.user_data['waiting_for'] = 'rate_age'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    media_text = "–§–æ—Ç–æ" if media_type == 'photo' else "–í–∏–¥–µ–æ"
    
    await update.message.reply_text(
        f"‚úÖ {media_text} –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
        f"üéØ –®–∞–≥ 3/6: *–í–æ–∑—Ä–∞—Å—Ç*\n\n"
        f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç \\({MIN_AGE}\\-{MAX_AGE}\\)",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

async def handle_rate_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text.strip())
        if age < MIN_AGE or age > MAX_AGE:
            await update.message.reply_text(f"‚ùå –í–æ–∑—Ä–∞—Å—Ç: {MIN_AGE}-{MAX_AGE} –ª–µ—Ç")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    context.user_data['rate_age'] = age
    context.user_data['rate_step'] = 'about'
    context.user_data['waiting_for'] = 'rate_about'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    await update.message.reply_text(
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: *{age} –ª–µ—Ç*\n\n"
        f"üéØ –®–∞–≥ 4/6: *–û —Å–µ–±–µ*\n\n"
        f"–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è \\({MAX_ABOUT_WORDS} —Å–ª–æ–≤–∞, –º–∞–∫—Å\\. {MAX_WORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\\)\n"
        f"–ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–æ—Ç–∫–∞ –º–æ–¥–µ–ª—å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

async def handle_rate_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    about = update.message.text.strip()
    
    error = validate_about(about)
    if error:
        await update.message.reply_text(error)
        return
    
    context.user_data['rate_about'] = about
    context.user_data['rate_step'] = 'profile'
    context.user_data['waiting_for'] = 'rate_profile'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    safe_about = safe_markdown(about)
    await update.message.reply_text(
        f"‚úÖ –û —Å–µ–±–µ: *{safe_about}*\n\n"
        f"üéØ –®–∞–≥ 5/6: *–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"Telegram: @username –∏–ª–∏ t\\.me/username\n"
        f"Instagram: –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ —Å UTM\\-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ @anna\\_budapest\n"
        f"‚Ä¢ https://instagram\\.com/anna\n"
        f"‚Ä¢ https://www\\.instagram\\.com/anna?igsh=xxx&utm\\_source=qr",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

async def handle_rate_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Instagram"""
    profile_input = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ URL
    cleaned_url = validate_profile_url(profile_input)
    
    if not cleaned_url:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ @username\n"
            "‚Ä¢ t.me/username\n"
            "‚Ä¢ instagram.com/username\n"
            "‚Ä¢ instagram.com/username?–ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        )
        return
    
    context.user_data['rate_profile'] = cleaned_url
    context.user_data['rate_step'] = 'gender'
    context.user_data['waiting_for'] = None
    
    keyboard = [
        [
            InlineKeyboardButton("üôãüèº‚Äç‚ôÇÔ∏è –ü–∞—Ä–µ–Ω—å", callback_data=f"{RATING_CALLBACKS['gender']}:boy"),
            InlineKeyboardButton("üôãüèº‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∞", callback_data=f"{RATING_CALLBACKS['gender']}:girl")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]
    ]
    
    safe_url = safe_markdown(cleaned_url)
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: {safe_url}\n\n"
        f"üéØ –®–∞–≥ 6/6: *–ü–æ–ª*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

# ============= PUBLISH =============

async def publish_rate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    media_type = context.user_data.get('rate_media_type', 'photo')
    media_file_id = context.user_data.get('rate_media_file_id')
    name = context.user_data.get('rate_name')
    profile_url = context.user_data.get('rate_profile')
    age = context.user_data.get('rate_age')
    about = context.user_data.get('rate_about')
    gender = context.user_data.get('rate_gender')
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID{user_id}"
    
    if not all([media_file_id, name, profile_url, age, about, gender]):
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        post_id = len(rating_data['posts']) + 1
        catalog_number = await generate_catalog_number()
        
        rating_data['posts'][post_id] = {
            'name': name,
            'profile_url': profile_url,
            'age': age,
            'about': about,
            'gender': gender,
            'media_type': media_type,
            'media_file_id': media_file_id,
            'author_user_id': user_id,
            'author_username': username,
            'catalog_number': catalog_number,
            'created_at': datetime.now(),
            'votes': {},
            'status': 'pending'
        }
        
        # –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–£–õ–î–ê–£–ù —á–µ—Ä–µ–∑ cooldown_service
        await cooldown_service.set_cooldown(
            user_id=user_id,
            command='itsme',
            duration=COOLDOWN_HOURS * 3600,
            cooldown_type=CooldownType.NORMAL
        )
        
        if profile_url not in rating_data['profiles']:
            rating_data['profiles'][profile_url] = {
                'name': name,
                'age': age,
                'about': about,
                'gender': gender,
                'total_score': 0,
                'vote_count': 0,
                'post_ids': []
            }
        
        rating_data['profiles'][profile_url]['post_ids'].append(post_id)
        
        logger.info(f"Rating post {post_id} (#{catalog_number}) created by @{username}")
        
        await send_rating_to_moderation(
            update, context, post_id, media_type, media_file_id,
            name, profile_url, age, about, gender, username, catalog_number
        )
        
        # Clear data
        for key in ['rate_media_type', 'rate_media_file_id', 'rate_name', 'rate_profile', 
                    'rate_age', 'rate_about', 'rate_gender', 'rate_step', 'waiting_for']:
            context.user_data.pop(key, None)
        
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if gender == "boy" else "üôãüèº‚Äç‚ôÄÔ∏è"
        media_text = "üìπ" if media_type == 'video' else "üì∏"
        
        safe_name = safe_markdown(name)
        safe_about = safe_markdown(about)
        
        await update.callback_query.edit_message_text(
        f"‚úÖ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!* \n\n"
        f"{media_text} {media_type.title()}\n"
        f"üë§ {safe_name}\n"
        f"{gender_emoji} {age} –ª–µ—Ç\n"
        f"üí¨ {safe_about}\n"
        f"üÜî #{catalog_number}\n\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
        parse_mode='MarkdownV2'
    )
        
    except Exception as e:
        logger.error(f"Error publishing: {e}", exc_info=True)
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")

async def send_rating_to_moderation(
    update, context, post_id, media_type, media_file_id,
    name, profile_url, age, about, gender, author_username, catalog_number
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    bot = context.bot
    
    try:
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{RATING_MOD_CALLBACKS['edit']}:{post_id}")],
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"{RATING_MOD_CALLBACKS['approve']}:{post_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"{RATING_MOD_CALLBACKS['reject']}:{post_id}")
            ]
        ]
        
        gender_text = "–ü–∞—Ä–µ–Ω—å" if gender == "boy" else "–î–µ–≤—É—à–∫–∞"
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if gender == "boy" else "üôãüèº‚Äç‚ôÄÔ∏è"
        media_emoji = "üìπ" if media_type == 'video' else "üì∏"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        if profile_url.startswith('@'):
            if 'instagram' not in profile_url:
                formatted_name = f"[{name}](https://t.me/{profile_url[1:]})"
            else:
                formatted_name = f"[{name}]({profile_url})"
        elif 'instagram.com' in profile_url:
            formatted_name = f"[{name}]({profile_url})"
        else:
            formatted_name = name
        
        safe_name = safe_markdown(name)
        safe_about = safe_markdown(about)
        
        caption = (
            f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ TopPeople*\n\n"
            f"{media_emoji} –ú–µ–¥–∏–∞: {media_type}\n"
            f"üë§ {formatted_name}\n"
            f"{gender_emoji} {gender_text}, {age} –ª–µ—Ç\n"
            f"üí¨ {safe_about}\n"
            f"üÜî \\#{catalog_number}\n"
            f"üì§ @{author_username}\n\n"
            f"‚ùì –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ?"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if media_type == 'video':
            msg = await bot.send_video(
                chat_id=Config.MODERATION_GROUP_ID,
                video=media_file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        else:
            msg = await bot.send_photo(
                chat_id=Config.MODERATION_GROUP_ID,
                photo=media_file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        
        rating_data['posts'][post_id]['moderation_message_id'] = msg.message_id
        rating_data['posts'][post_id]['moderation_group_id'] = Config.MODERATION_GROUP_ID
        
        logger.info(f"Rating post {post_id} sent to moderation")
        
    except Exception as e:
        logger.error(f"Error sending to moderation: {e}", exc_info=True)
        raise

# ============= MODERATION =============

async def approve_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    try:
        BUDAPEST_PEOPLE_ID = Config.STATS_CHANNELS.get('budapest_people', -1003088023508)
        
        gender_text = "–ü–∞—Ä–µ–Ω—å" if post['gender'] == "boy" else "–î–µ–≤—É—à–∫–∞"
        profile_url = post['profile_url']
        media_type = post.get('media_type', 'photo')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è —Å–æ —Å—Å—ã–ª–∫–æ–π
        if profile_url.startswith('@'):
            if 'instagram' not in profile_url:
                formatted_name = f"[{post['name']}](https://t.me/{profile_url[1:]})"
            else:
                formatted_name = f"[{post['name']}]({profile_url})"
        elif 'instagram.com' in profile_url:
            formatted_name = f"[{post['name']}]({profile_url})"
        else:
            formatted_name = post['name']
        
        keyboard = [
            [
                InlineKeyboardButton("üò≠ -2 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-2"),
                InlineKeyboardButton("üëé -1 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-1"),
                InlineKeyboardButton("üòê 0 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:0"),
                InlineKeyboardButton("üëç +1 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:1"),
                InlineKeyboardButton("üî• +2 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:2"),
            ],
            [InlineKeyboardButton(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: 0 | –ì–æ–ª–æ—Å–æ–≤: 0", callback_data=RATING_CALLBACKS['noop'])]
        ]
        
        safe_name = safe_markdown(post['name'])
        safe_about = safe_markdown(post['about'])
        
        caption = (
            f"‚≠ê *TopPeople Budapest*\n\n"
            f"üë§ {formatted_name}\n"
            f"{gender_text}, {post['age']} –ª–µ—Ç\n"
            f"üí¨ {safe_about}\n\n"
            f"üÜî \\#{post['catalog_number']}\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:"
        )
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if media_type == 'video':
            msg = await context.bot.send_video(
                chat_id=BUDAPEST_PEOPLE_ID,
                video=post['media_file_id'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        else:
            msg = await context.bot.send_photo(
                chat_id=BUDAPEST_PEOPLE_ID,
                photo=post['media_file_id'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        
        post['message_id'] = msg.message_id
        post['published_channel_id'] = BUDAPEST_PEOPLE_ID
        post['status'] = 'published'
        post['published_link'] = f"https://t.me/c/{str(BUDAPEST_PEOPLE_ID)[4:]}/{msg.message_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
        from services.catalog_service import catalog_service
        
        category = 'üë±üèª‚Äç‚ôÄÔ∏è TopGirls' if post['gender'] == 'girl' else 'ü§µüèº‚Äç‚ôÇÔ∏è TopBoys'
        
        catalog_post_id = await catalog_service.add_post(
            user_id=post['author_user_id'],
            catalog_link=post['published_link'],
            category=category,
            name=post['name'],
            tags=[post['about'], gender_text, f"{post['age']}"],
            media_type=media_type,
            media_file_id=post['media_file_id'],
            media_group_id=None,
            media_json=[post['media_file_id']],
            author_username=post.get('author_username'),
            author_id=post['author_user_id']
        )
        
        if catalog_post_id:
            from services.db import db
            from models import CatalogPost
            from sqlalchemy import update as sql_update
            
            async with db.get_session() as session:
                await session.execute(
                    sql_update(CatalogPost)
                    .where(CatalogPost.id == catalog_post_id)
                    .values(catalog_number=post['catalog_number'])
                )
                await session.commit()
        
        await query.edit_message_reply_markup(reply_markup=None)
        await query.edit_message_caption(
            caption=f"{query.message.caption}\n\n‚úÖ *–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û*",
            parse_mode='MarkdownV2'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        try:
            safe_name_author = safe_markdown(post['name'])
            await context.bot.send_message(
                chat_id=post['author_user_id'],
                text=(
                    f"üéâ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\\!*\n\n"
                    f"üë§ {safe_name_author}\n"
                    f"üÜî \\#{post['catalog_number']}\n\n"
                    f"üîó [–í–∞—à –ø–æ—Å—Ç]({safe_markdown(post['published_link'])})\n\n"
                    f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –≤ TopPeople\\!"
                ),
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logger.warning(f"Could not notify author: {e}")
        
        await query.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", show_alert=False)
        logger.info(f"Rating post {post_id} approved")
        
    except Exception as e:
        logger.error(f"Error approving: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

async def reject_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        post = rating_data['posts'][post_id]
        author_user_id = post.get('author_user_id')
        
        del rating_data['posts'][post_id]
        
        await query.edit_message_reply_markup(reply_markup=None)
        await query.edit_message_caption(
            caption=f"{query.message.caption}\n\n‚ùå *–û–¢–ö–õ–û–ù–ï–ù–û*",
            parse_mode='MarkdownV2'
        )
        
        if author_user_id:
            try:
                await context.bot.send_message(
                    chat_id=author_user_id,
                    text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ TopPeople –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                )
            except:
                pass
        
        await query.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", show_alert=False)
        logger.info(f"Rating post {post_id} rejected")
        
    except Exception as e:
        logger.error(f"Error rejecting: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

# ============= VOTING (—Å –ª–∏–º–∏—Ç–æ–º 1 –≥–æ–ª–æ—Å –Ω–∞–≤—Å–µ–≥–¥–∞) =============

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, vote_value: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –ª–∏–º–∏—Ç–æ–º 1 –≥–æ–ª–æ—Å –Ω–∞ –ø–æ—Å—Ç"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    can_vote = await check_vote_limit(user_id, post_id)
    
    if not can_vote:
        await query.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç", show_alert=True)
        return
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
    if user_id not in rating_data['user_votes']:
        rating_data['user_votes'][user_id] = {}
    
    rating_data['user_votes'][user_id][post_id] = vote_value
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ—Å—Ç–∞
    if 'votes' not in post:
        post['votes'] = {}
    
    post['votes'][user_id] = vote_value
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile_url = post.get('profile_url')
    if profile_url and profile_url in rating_data['profiles']:
        profile = rating_data['profiles'][profile_url]
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        all_votes = []
        for pid in profile.get('post_ids', []):
            if pid in rating_data['posts']:
                all_votes.extend(rating_data['posts'][pid].get('votes', {}).values())
        
        profile['total_score'] = sum(all_votes)
        profile['vote_count'] = len(all_votes)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    votes = post.get('votes', {})
    vote_counts = {-2: 0, -1: 0, 0: 0, 1: 0, 2: 0}
    
    for v in votes.values():
        if v in vote_counts:
            vote_counts[v] += 1
    
    total_score = sum(votes.values())
    vote_count = len(votes)
    
    keyboard = [
        [
            InlineKeyboardButton(f"üò≠ -2 ({vote_counts[-2]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-2"),
            InlineKeyboardButton(f"üëé -1 ({vote_counts[-1]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-1"),
            InlineKeyboardButton(f"üòê 0 ({vote_counts[0]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:0"),
            InlineKeyboardButton(f"üëç +1 ({vote_counts[1]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:1"),
            InlineKeyboardButton(f"üî• +2 ({vote_counts[2]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:2"),
        ],
        [InlineKeyboardButton(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {total_score} | –ì–æ–ª–æ—Å–æ–≤: {vote_count}", callback_data=RATING_CALLBACKS['noop'])]
    ]
    
    try:
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
        await query.answer(f"‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {vote_value:+d}", show_alert=False)
        logger.info(f"User {user_id} voted {vote_value} on post {post_id}")
    except Exception as e:
        logger.error(f"Error updating vote buttons: {e}")
        await query.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω", show_alert=False)

# ============= CALLBACKS =============

async def handle_rate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö callback"""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split(":")
    
    if data_parts[0].startswith('rtpc_'):
        action = data_parts[0][5:]
    else:
        action = data_parts[0]
    
    if action == 'gender':
        value = data_parts[1] if len(data_parts) > 1 else None
        context.user_data['rate_gender'] = value
        await publish_rate_post(update, context)
    
    elif action == 'vote':
        post_id = int(data_parts[1]) if len(data_parts) > 1 else None
        vote_value = int(data_parts[2]) if len(data_parts) > 2 else 0
        
        if post_id:
            await handle_vote(update, context, post_id, vote_value)
    
    elif action == 'cancel':
        for key in ['rate_media_type', 'rate_media_file_id', 'rate_name', 'rate_profile', 
                    'rate_age', 'rate_about', 'rate_gender', 'rate_step', 'waiting_for']:
            context.user_data.pop(key, None)
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    elif action == 'noop':
        pass  # –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º

async def handle_rate_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö callback"""
    query = update.callback_query
    
    data_parts = query.data.split(":")
    
    if data_parts[0].startswith('rtmc_'):
        action = data_parts[0][5:]
    else:
        action = data_parts[0]
    
    post_id = int(data_parts[1]) if len(data_parts) > 1 and data_parts[1].isdigit() else None
    
    if not Config.is_moderator(update.effective_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if action == 'approve':
        await approve_rating_post(update, context, post_id)
    elif action == 'reject':
        await reject_rating_post(update, context, post_id)

# ============= STATS COMMANDS =============

async def toppeople_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ"""
    if not rating_data['profiles']:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(
        rating_data['profiles'].items(),
        key=lambda x: x[1]['total_score'],
        reverse=True
    )[:10]
    
    text = "‚≠ê *TOPinBUDAPEST*\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if data['gender'] == 'boy' else "üôãüèº‚Äç‚ôÄÔ∏è"
        safe_name = safe_markdown(data.get('name', ''))
        safe_url = safe_markdown(profile_url)
        
        text += (
            f"{i}\\. {safe_name} \\({safe_url}\\)\n"
            f"   {gender_emoji} {data.get('age')} –ª–µ—Ç\n"
            f"   ‚≠ê {data['total_score']} \\| üìä {data['vote_count']}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode='MarkdownV2')

async def topboys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –ø–∞—Ä–Ω–µ–π"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'boy'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üï∫ *TOP10 BOYS*\n\n"
    
    for i, (url, data) in enumerate(sorted_profiles, 1):
        safe_name = safe_markdown(data.get('name', ''))
        text += f"{i}\\. {safe_name} ‚Äî ‚≠ê {data['total_score']} \\({data['vote_count']}\\)\n"
    
    await update.message.reply_text(text, parse_mode='MarkdownV2')

async def topgirls_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –¥–µ–≤—É—à–µ–∫"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'girl'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üë±‚Äç‚ôÄÔ∏è *TOP10 GIRLS*\n\n"
    
    for i, (url, data) in enumerate(sorted_profiles, 1):
        safe_name = safe_markdown(data.get('name', ''))
        text += f"{i}\\. {safe_name} ‚Äî üåü {data['total_score']} \\({data['vote_count']}\\)\n"
    
    await update.message.reply_text(text, parse_mode='MarkdownV2')

async def toppeoplereset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã")
        return
    
    await update.message.reply_text(
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï: –ü–û–õ–ù–´–ô –°–ë–†–û–° –†–ï–ô–¢–ò–ù–ì–ê*\n\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –æ—á–∫–∏, –≥–æ–ª–æ—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
        parse_mode='Markdown'
    )

__all__ = [
    'itsme_command',
    'handle_rate_photo',
    'handle_rate_profile',
    'handle_rate_age',
    'handle_rate_name',
    'handle_rate_about',
    'handle_rate_callback',
    'handle_rate_moderation_callback',
    'toppeople_command',
    'topboys_command',
    'topgirls_command',
    'toppeoplereset_command',
    'rating_data',
    'RATING_CALLBACKS',
    'RATING_MOD_CALLBACKS',
]
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from config import Config
from services.cooldown import cooldown_service, CooldownType
from datetime import datetime, timedelta
import logging
import re
import random
from typing import Dict, Optional

logger = logging.getLogger(__name__)

# ============= CALLBACK PREFIXES (–£–ù–ò–ö–ê–õ–¨–ù–´–ï V8) =============
RATING_CALLBACKS = {
    'gender': 'rtpc_gender',
    'vote': 'rtpc_vote',
    'back': 'rtpc_back',
    'cancel': 'rtpc_cancel',
    'noop': 'rtpc_noop',
}

RATING_MOD_CALLBACKS = {
    'edit': 'rtmc_edit',
    'approve': 'rtmc_approve',
    'reject': 'rtmc_reject',
    'back': 'rtmc_back',
}

# ============= SETTINGS =============
COOLDOWN_HOURS = 24  # 24 —á–∞—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
MIN_AGE = 18
MAX_AGE = 70
MAX_ABOUT_WORDS = 3
MAX_WORD_LENGTH = 7

# ============= DATA STORAGE =============
rating_data = {
    'posts': {},
    'profiles': {},
    'user_votes': {},  # {user_id: {post_id: vote_value}}
}

# ============= HELPER FUNCTIONS =============

def safe_markdown(text: str) -> str:
    """
    –ë–ï–ó–û–ü–ê–°–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: Can't parse entities
    """
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    result = str(text)
    for char in special_chars:
        result = result.replace(char, f'\\{char}')
    
    return result

def validate_instagram_url(url: str) -> tuple:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è Instagram URL (–≤–∫–ª—é—á–∞—è —Å UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    Returns: (is_valid: bool, cleaned_url: str)
    """
    if not url:
        return False, ""
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    url = url.strip()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Instagram
    instagram_patterns = [
        r'(?:https?://)?(?:www\.)?instagram\.com/([a-zA-Z0-9._]+)',
        r'(?:https?://)?(?:www\.)?instagram\.com/p/([a-zA-Z0-9_-]+)',
        r'(?:https?://)?(?:www\.)?instagram\.com/reel/([a-zA-Z0-9_-]+)',
    ]
    
    for pattern in instagram_patterns:
        match = re.search(pattern, url)
        if match:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–ª–∏ post ID
            identifier = match.group(1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É
            if '/p/' in url or '/reel/' in url:
                cleaned_url = f"https://instagram.com/{'p' if '/p/' in url else 'reel'}/{identifier}"
            else:
                cleaned_url = f"https://instagram.com/{identifier}"
            
            return True, cleaned_url
    
    return False, url

def validate_profile_url(url: str) -> Optional[str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (Telegram –∏–ª–∏ Instagram)
    Returns: cleaned URL –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ
    """
    if not url or len(url) < 3:
        return None
    
    url = url.strip()
    
    # Telegram username
    if url.startswith('@'):
        username = url[1:]
        if re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
            return f"@{username}"
        return None
    
    # t.me —Å—Å—ã–ª–∫–∞
    if 't.me/' in url:
        match = re.search(r't\.me/([a-zA-Z0-9_]{5,32})', url)
        if match:
            return f"@{match.group(1)}"
        return None
    
    # Instagram URL (–≤–∫–ª—é—á–∞—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    is_valid, cleaned = validate_instagram_url(url)
    if is_valid:
        return cleaned
    
    # –û–±—ã—á–Ω—ã–π username –±–µ–∑ @
    if re.match(r'^[a-zA-Z0-9_]{3,}$', url):
        return f"@{url}"
    
    return None

async def check_vote_limit(user_id: int, post_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - 1 –≥–æ–ª–æ—Å –Ω–∞ –ø–æ—Å—Ç –Ω–∞–≤—Å–µ–≥–¥–∞"""
    if user_id not in rating_data['user_votes']:
        return True
    
    return post_id not in rating_data['user_votes'][user_id]

async def generate_catalog_number() -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    from services.catalog_service import catalog_service
    from services.db import db
    from models import CatalogPost
    from sqlalchemy import select
    
    try:
        async with db.get_session() as session:
            for _ in range(100):
                number = random.randint(1, 9999)
                
                result = await session.execute(
                    select(CatalogPost.id).where(CatalogPost.catalog_number == number)
                )
                
                if not result.scalar_one_or_none():
                    used = any(p.get('catalog_number') == number for p in rating_data['posts'].values())
                    if not used:
                        return number
            
            raise Exception("Could not generate number")
    except Exception as e:
        logger.error(f"Error generating number: {e}")
        return random.randint(1000, 9999)

def validate_about(text: str) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è '–û —Å–µ–±–µ'"""
    words = text.strip().split()
    
    if len(words) > MAX_ABOUT_WORDS:
        return f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_ABOUT_WORDS} —Å–ª–æ–≤–∞"
    
    for word in words:
        if len(word) > MAX_WORD_LENGTH:
            return f"‚ùå –°–ª–æ–≤–æ '{word}' –±–æ–ª—å—à–µ {MAX_WORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    
    return None

# ============= MAIN COMMAND WITH COOLDOWN =============

async def itsme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - /itsme —Å –∫—É–ª–¥–∞—É–Ω–æ–º 24—á"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —á–µ—Ä–µ–∑ cooldown_service
    can_use, remaining = await cooldown_service.check_cooldown(
        user_id=user_id,
        command='itsme',
        duration=COOLDOWN_HOURS * 3600,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        cooldown_type=CooldownType.NORMAL
    )
    
    if not can_use:
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        await update.message.reply_text(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {hours}—á {minutes}–º–∏–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã"
        )
        return
    
    context.user_data['rate_step'] = 'name'
    context.user_data['waiting_for'] = 'rate_name'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=RATING_CALLBACKS['cancel'])]]
    
    await update.message.reply_text(
        "‚≠ê *TopPeople Budapest*\n\n"
        "üéØ –®–∞–≥ 1/6: *–í–∞—à–µ –∏–º—è*\n\n"
        "–ö–∞–∫ –≤–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å?\n"
        "–ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= STEP HANDLERS =============

async def handle_rate_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = update.message.text.strip()
    
    if len(name) < 2 or len(name) > 50:
        await update.message.reply_text("‚ùå –ò–º—è: 2-50 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    context.user_data['rate_name'] = name
    context.user_data['rate_step'] = 'photo'
    context.user_data['waiting_for'] = 'rate_photo'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    safe_name = safe_markdown(name)
    await update.message.reply_text(
        f"‚úÖ –ò–º—è: *{safe_name}*\n\n"
        f"üéØ –®–∞–≥ 2/6: *–§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ*\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_rate_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ"""
    media_type = None
    file_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if update.message.photo:
        media_type = 'photo'
        file_id = update.message.photo[-1].file_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
    elif update.message.video:
        media_type = 'video'
        file_id = update.message.video.file_id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ (–º–∞–∫—Å 60 —Å–µ–∫—É–Ω–¥)
        if update.message.video.duration > 60:
            await update.message.reply_text("‚ùå –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥")
            return
    
    else:
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
        return
    
    context.user_data['rate_media_type'] = media_type
    context.user_data['rate_media_file_id'] = file_id
    context.user_data['rate_step'] = 'age'
    context.user_data['waiting_for'] = 'rate_age'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    media_text = "–§–æ—Ç–æ" if media_type == 'photo' else "–í–∏–¥–µ–æ"
    
    await update.message.reply_text(
        f"‚úÖ {media_text} –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
        f"üéØ –®–∞–≥ 3/6: *–í–æ–∑—Ä–∞—Å—Ç*\n\n"
        f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç \\({MIN_AGE}\\-{MAX_AGE}\\)",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

async def handle_rate_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text.strip())
        if age < MIN_AGE or age > MAX_AGE:
            await update.message.reply_text(f"‚ùå –í–æ–∑—Ä–∞—Å—Ç: {MIN_AGE}-{MAX_AGE} –ª–µ—Ç")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    context.user_data['rate_age'] = age
    context.user_data['rate_step'] = 'about'
    context.user_data['waiting_for'] = 'rate_about'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    await update.message.reply_text(
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: *{age} –ª–µ—Ç*\n\n"
        f"üéØ –®–∞–≥ 4/6: *–û —Å–µ–±–µ*\n\n"
        f"–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è \\({MAX_ABOUT_WORDS} —Å–ª–æ–≤–∞, –º–∞–∫—Å\\. {MAX_WORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\\)\n"
        f"–ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–æ—Ç–∫–∞ –º–æ–¥–µ–ª—å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

async def handle_rate_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    about = update.message.text.strip()
    
    error = validate_about(about)
    if error:
        await update.message.reply_text(error)
        return
    
    context.user_data['rate_about'] = about
    context.user_data['rate_step'] = 'profile'
    context.user_data['waiting_for'] = 'rate_profile'
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]]
    
    safe_about = safe_markdown(about)
    await update.message.reply_text(
        f"‚úÖ –û —Å–µ–±–µ: *{safe_about}*\n\n"
        f"üéØ –®–∞–≥ 5/6: *–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"Telegram: @username –∏–ª–∏ t\\.me/username\n"
        f"Instagram: –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ —Å UTM\\-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ @anna\\_budapest\n"
        f"‚Ä¢ https://instagram\\.com/anna\n"
        f"‚Ä¢ https://www\\.instagram\\.com/anna?igsh=xxx&utm\\_source=qr",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

async def handle_rate_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Instagram"""
    profile_input = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ URL
    cleaned_url = validate_profile_url(profile_input)
    
    if not cleaned_url:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ @username\n"
            "‚Ä¢ t.me/username\n"
            "‚Ä¢ instagram.com/username\n"
            "‚Ä¢ instagram.com/username?–ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        )
        return
    
    context.user_data['rate_profile'] = cleaned_url
    context.user_data['rate_step'] = 'gender'
    context.user_data['waiting_for'] = None
    
    keyboard = [
        [
            InlineKeyboardButton("üôãüèº‚Äç‚ôÇÔ∏è –ü–∞—Ä–µ–Ω—å", callback_data=f"{RATING_CALLBACKS['gender']}:boy"),
            InlineKeyboardButton("üôãüèº‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∞", callback_data=f"{RATING_CALLBACKS['gender']}:girl")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=RATING_CALLBACKS['back'])]
    ]
    
    safe_url = safe_markdown(cleaned_url)
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: {safe_url}\n\n"
        f"üéØ –®–∞–≥ 6/6: *–ü–æ–ª*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )

# ============= PUBLISH =============

async def publish_rate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    media_type = context.user_data.get('rate_media_type', 'photo')
    media_file_id = context.user_data.get('rate_media_file_id')
    name = context.user_data.get('rate_name')
    profile_url = context.user_data.get('rate_profile')
    age = context.user_data.get('rate_age')
    about = context.user_data.get('rate_about')
    gender = context.user_data.get('rate_gender')
    
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID{user_id}"
    
    if not all([media_file_id, name, profile_url, age, about, gender]):
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        post_id = len(rating_data['posts']) + 1
        catalog_number = await generate_catalog_number()
        
        rating_data['posts'][post_id] = {
            'name': name,
            'profile_url': profile_url,
            'age': age,
            'about': about,
            'gender': gender,
            'media_type': media_type,
            'media_file_id': media_file_id,
            'author_user_id': user_id,
            'author_username': username,
            'catalog_number': catalog_number,
            'created_at': datetime.now(),
            'votes': {},
            'status': 'pending'
        }
        
        # –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–£–õ–î–ê–£–ù —á–µ—Ä–µ–∑ cooldown_service
        await cooldown_service.set_cooldown(
            user_id=user_id,
            command='itsme',
            duration=COOLDOWN_HOURS * 3600,
            cooldown_type=CooldownType.NORMAL
        )
        
        if profile_url not in rating_data['profiles']:
            rating_data['profiles'][profile_url] = {
                'name': name,
                'age': age,
                'about': about,
                'gender': gender,
                'total_score': 0,
                'vote_count': 0,
                'post_ids': []
            }
        
        rating_data['profiles'][profile_url]['post_ids'].append(post_id)
        
        logger.info(f"Rating post {post_id} (#{catalog_number}) created by @{username}")
        
        await send_rating_to_moderation(
            update, context, post_id, media_type, media_file_id,
            name, profile_url, age, about, gender, username, catalog_number
        )
        
        # Clear data
        for key in ['rate_media_type', 'rate_media_file_id', 'rate_name', 'rate_profile', 
                    'rate_age', 'rate_about', 'rate_gender', 'rate_step', 'waiting_for']:
            context.user_data.pop(key, None)
        
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if gender == "boy" else "üôãüèº‚Äç‚ôÄÔ∏è"
        media_text = "üìπ" if media_type == 'video' else "üì∏"
        
        safe_name = safe_markdown(name)
        safe_about = safe_markdown(about)
        
        await update.callback_query.edit_message_text(
            f"‚úÖ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\\!*\n\n"
            f"{media_text} {media_type\\.title()}\n"
            f"üë§ {safe_name}\n"
            f"{gender_emoji} {age} –ª–µ—Ç\n"
            f"üí¨ {safe_about}\n"
            f"üÜî \\#{catalog_number}\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
            parse_mode='MarkdownV2'
        )
        
    except Exception as e:
        logger.error(f"Error publishing: {e}", exc_info=True)
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")

async def send_rating_to_moderation(
    update, context, post_id, media_type, media_file_id,
    name, profile_url, age, about, gender, author_username, catalog_number
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    bot = context.bot
    
    try:
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{RATING_MOD_CALLBACKS['edit']}:{post_id}")],
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"{RATING_MOD_CALLBACKS['approve']}:{post_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"{RATING_MOD_CALLBACKS['reject']}:{post_id}")
            ]
        ]
        
        gender_text = "–ü–∞—Ä–µ–Ω—å" if gender == "boy" else "–î–µ–≤—É—à–∫–∞"
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if gender == "boy" else "üôãüèº‚Äç‚ôÄÔ∏è"
        media_emoji = "üìπ" if media_type == 'video' else "üì∏"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        if profile_url.startswith('@'):
            if 'instagram' not in profile_url:
                formatted_name = f"[{name}](https://t.me/{profile_url[1:]})"
            else:
                formatted_name = f"[{name}]({profile_url})"
        elif 'instagram.com' in profile_url:
            formatted_name = f"[{name}]({profile_url})"
        else:
            formatted_name = name
        
        safe_name = safe_markdown(name)
        safe_about = safe_markdown(about)
        
        caption = (
            f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ TopPeople*\n\n"
            f"{media_emoji} –ú–µ–¥–∏–∞: {media_type}\n"
            f"üë§ {formatted_name}\n"
            f"{gender_emoji} {gender_text}, {age} –ª–µ—Ç\n"
            f"üí¨ {safe_about}\n"
            f"üÜî \\#{catalog_number}\n"
            f"üì§ @{author_username}\n\n"
            f"‚ùì –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ?"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if media_type == 'video':
            msg = await bot.send_video(
                chat_id=Config.MODERATION_GROUP_ID,
                video=media_file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        else:
            msg = await bot.send_photo(
                chat_id=Config.MODERATION_GROUP_ID,
                photo=media_file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        
        rating_data['posts'][post_id]['moderation_message_id'] = msg.message_id
        rating_data['posts'][post_id]['moderation_group_id'] = Config.MODERATION_GROUP_ID
        
        logger.info(f"Rating post {post_id} sent to moderation")
        
    except Exception as e:
        logger.error(f"Error sending to moderation: {e}", exc_info=True)
        raise

# ============= MODERATION =============

async def approve_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    try:
        BUDAPEST_PEOPLE_ID = Config.STATS_CHANNELS.get('budapest_people', -1003088023508)
        
        gender_text = "–ü–∞—Ä–µ–Ω—å" if post['gender'] == "boy" else "–î–µ–≤—É—à–∫–∞"
        profile_url = post['profile_url']
        media_type = post.get('media_type', 'photo')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è —Å–æ —Å—Å—ã–ª–∫–æ–π
        if profile_url.startswith('@'):
            if 'instagram' not in profile_url:
                formatted_name = f"[{post['name']}](https://t.me/{profile_url[1:]})"
            else:
                formatted_name = f"[{post['name']}]({profile_url})"
        elif 'instagram.com' in profile_url:
            formatted_name = f"[{post['name']}]({profile_url})"
        else:
            formatted_name = post['name']
        
        keyboard = [
            [
                InlineKeyboardButton("üò≠ -2 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-2"),
                InlineKeyboardButton("üëé -1 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-1"),
                InlineKeyboardButton("üòê 0 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:0"),
                InlineKeyboardButton("üëç +1 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:1"),
                InlineKeyboardButton("üî• +2 (0)", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:2"),
            ],
            [InlineKeyboardButton(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: 0 | –ì–æ–ª–æ—Å–æ–≤: 0", callback_data=RATING_CALLBACKS['noop'])]
        ]
        
        safe_name = safe_markdown(post['name'])
        safe_about = safe_markdown(post['about'])
        
        caption = (
            f"‚≠ê *TopPeople Budapest*\n\n"
            f"üë§ {formatted_name}\n"
            f"{gender_text}, {post['age']} –ª–µ—Ç\n"
            f"üí¨ {safe_about}\n\n"
            f"üÜî \\#{post['catalog_number']}\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:"
        )
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if media_type == 'video':
            msg = await context.bot.send_video(
                chat_id=BUDAPEST_PEOPLE_ID,
                video=post['media_file_id'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        else:
            msg = await context.bot.send_photo(
                chat_id=BUDAPEST_PEOPLE_ID,
                photo=post['media_file_id'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        
        post['message_id'] = msg.message_id
        post['published_channel_id'] = BUDAPEST_PEOPLE_ID
        post['status'] = 'published'
        post['published_link'] = f"https://t.me/c/{str(BUDAPEST_PEOPLE_ID)[4:]}/{msg.message_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
        from services.catalog_service import catalog_service
        
        category = 'üë±üèª‚Äç‚ôÄÔ∏è TopGirls' if post['gender'] == 'girl' else 'ü§µüèº‚Äç‚ôÇÔ∏è TopBoys'
        
        catalog_post_id = await catalog_service.add_post(
            user_id=post['author_user_id'],
            catalog_link=post['published_link'],
            category=category,
            name=post['name'],
            tags=[post['about'], gender_text, f"{post['age']}"],
            media_type=media_type,
            media_file_id=post['media_file_id'],
            media_group_id=None,
            media_json=[post['media_file_id']],
            author_username=post.get('author_username'),
            author_id=post['author_user_id']
        )
        
        if catalog_post_id:
            from services.db import db
            from models import CatalogPost
            from sqlalchemy import update as sql_update
            
            async with db.get_session() as session:
                await session.execute(
                    sql_update(CatalogPost)
                    .where(CatalogPost.id == catalog_post_id)
                    .values(catalog_number=post['catalog_number'])
                )
                await session.commit()
        
        await query.edit_message_reply_markup(reply_markup=None)
        await query.edit_message_caption(
            caption=f"{query.message.caption}\n\n‚úÖ *–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û*",
            parse_mode='MarkdownV2'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        try:
            safe_name_author = safe_markdown(post['name'])
            await context.bot.send_message(
                chat_id=post['author_user_id'],
                text=(
                    f"üéâ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\\!*\n\n"
                    f"üë§ {safe_name_author}\n"
                    f"üÜî \\#{post['catalog_number']}\n\n"
                    f"üîó [–í–∞—à –ø–æ—Å—Ç]({safe_markdown(post['published_link'])})\n\n"
                    f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –≤ TopPeople\\!"
                ),
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logger.warning(f"Could not notify author: {e}")
        
        await query.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", show_alert=False)
        logger.info(f"Rating post {post_id} approved")
        
    except Exception as e:
        logger.error(f"Error approving: {e}", exc_info=True)
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

async def reject_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    query = update.callback_query
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        post = rating_data['posts'][post_id]
        author_user_id = post.get('author_user_id')
        
        del rating_data['posts'][post_id]
        
        await query.edit_message_reply_markup(reply_markup=None)
        await query.edit_message_caption(
            caption=f"{query.message.caption}\n\n‚ùå *–û–¢–ö–õ–û–ù–ï–ù–û*",
            parse_mode='MarkdownV2'
        )
        
        if author_user_id:
            try:
                await context.bot.send_message(
                    chat_id=author_user_id,
                    text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ TopPeople –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                )
            except:
                pass
        
        await query.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", show_alert=False)
        logger.info(f"Rating post {post_id} rejected")
        
    except Exception as e:
        logger.error(f"Error rejecting: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)

# ============= VOTING (—Å –ª–∏–º–∏—Ç–æ–º 1 –≥–æ–ª–æ—Å –Ω–∞–≤—Å–µ–≥–¥–∞) =============

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, vote_value: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –ª–∏–º–∏—Ç–æ–º 1 –≥–æ–ª–æ—Å –Ω–∞ –ø–æ—Å—Ç"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    can_vote = await check_vote_limit(user_id, post_id)
    
    if not can_vote:
        await query.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç", show_alert=True)
        return
    
    if post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
    if user_id not in rating_data['user_votes']:
        rating_data['user_votes'][user_id] = {}
    
    rating_data['user_votes'][user_id][post_id] = vote_value
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ—Å—Ç–∞
    if 'votes' not in post:
        post['votes'] = {}
    
    post['votes'][user_id] = vote_value
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile_url = post.get('profile_url')
    if profile_url and profile_url in rating_data['profiles']:
        profile = rating_data['profiles'][profile_url]
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        all_votes = []
        for pid in profile.get('post_ids', []):
            if pid in rating_data['posts']:
                all_votes.extend(rating_data['posts'][pid].get('votes', {}).values())
        
        profile['total_score'] = sum(all_votes)
        profile['vote_count'] = len(all_votes)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    votes = post.get('votes', {})
    vote_counts = {-2: 0, -1: 0, 0: 0, 1: 0, 2: 0}
    
    for v in votes.values():
        if v in vote_counts:
            vote_counts[v] += 1
    
    total_score = sum(votes.values())
    vote_count = len(votes)
    
    keyboard = [
        [
            InlineKeyboardButton(f"üò≠ -2 ({vote_counts[-2]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-2"),
            InlineKeyboardButton(f"üëé -1 ({vote_counts[-1]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:-1"),
            InlineKeyboardButton(f"üòê 0 ({vote_counts[0]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:0"),
            InlineKeyboardButton(f"üëç +1 ({vote_counts[1]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:1"),
            InlineKeyboardButton(f"üî• +2 ({vote_counts[2]})", callback_data=f"{RATING_CALLBACKS['vote']}:{post_id}:2"),
        ],
        [InlineKeyboardButton(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {total_score} | –ì–æ–ª–æ—Å–æ–≤: {vote_count}", callback_data=RATING_CALLBACKS['noop'])]
    ]
    
    try:
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
        await query.answer(f"‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {vote_value:+d}", show_alert=False)
        logger.info(f"User {user_id} voted {vote_value} on post {post_id}")
    except Exception as e:
        logger.error(f"Error updating vote buttons: {e}")
        await query.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω", show_alert=False)

# ============= CALLBACKS =============

async def handle_rate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö callback"""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split(":")
    
    if data_parts[0].startswith('rtpc_'):
        action = data_parts[0][5:]
    else:
        action = data_parts[0]
    
    if action == 'gender':
        value = data_parts[1] if len(data_parts) > 1 else None
        context.user_data['rate_gender'] = value
        await publish_rate_post(update, context)
    
    elif action == 'vote':
        post_id = int(data_parts[1]) if len(data_parts) > 1 else None
        vote_value = int(data_parts[2]) if len(data_parts) > 2 else 0
        
        if post_id:
            await handle_vote(update, context, post_id, vote_value)
    
    elif action == 'cancel':
        for key in ['rate_media_type', 'rate_media_file_id', 'rate_name', 'rate_profile', 
                    'rate_age', 'rate_about', 'rate_gender', 'rate_step', 'waiting_for']:
            context.user_data.pop(key, None)
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    elif action == 'noop':
        pass  # –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º

async def handle_rate_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö callback"""
    query = update.callback_query
    
    data_parts = query.data.split(":")
    
    if data_parts[0].startswith('rtmc_'):
        action = data_parts[0][5:]
    else:
        action = data_parts[0]
    
    post_id = int(data_parts[1]) if len(data_parts) > 1 and data_parts[1].isdigit() else None
    
    if not Config.is_moderator(update.effective_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if action == 'approve':
        await approve_rating_post(update, context, post_id)
    elif action == 'reject':
        await reject_rating_post(update, context, post_id)

# ============= STATS COMMANDS =============

async def toppeople_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ"""
    if not rating_data['profiles']:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(
        rating_data['profiles'].items(),
        key=lambda x: x[1]['total_score'],
        reverse=True
    )[:10]
    
    text = "‚≠ê *TOPinBUDAPEST*\n\n"
    
    for i, (profile_url, data) in enumerate(sorted_profiles, 1):
        gender_emoji = "üôãüèº‚Äç‚ôÇÔ∏è" if data['gender'] == 'boy' else "üôãüèº‚Äç‚ôÄÔ∏è"
        safe_name = safe_markdown(data.get('name', ''))
        safe_url = safe_markdown(profile_url)
        
        text += (
            f"{i}\\. {safe_name} \\({safe_url}\\)\n"
            f"   {gender_emoji} {data.get('age')} –ª–µ—Ç\n"
            f"   ‚≠ê {data['total_score']} \\| üìä {data['vote_count']}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode='MarkdownV2')

async def topboys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –ø–∞—Ä–Ω–µ–π"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'boy'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üï∫ *TOP10 BOYS*\n\n"
    
    for i, (url, data) in enumerate(sorted_profiles, 1):
        safe_name = safe_markdown(data.get('name', ''))
        text += f"{i}\\. {safe_name} ‚Äî ‚≠ê {data['total_score']} \\({data['vote_count']}\\)\n"
    
    await update.message.reply_text(text, parse_mode='MarkdownV2')

async def topgirls_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø-10 –¥–µ–≤—É—à–µ–∫"""
    profiles = {url: data for url, data in rating_data['profiles'].items() if data['gender'] == 'girl'}
    
    if not profiles:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    sorted_profiles = sorted(profiles.items(), key=lambda x: x[1]['total_score'], reverse=True)[:10]
    
    text = "üë±‚Äç‚ôÄÔ∏è *TOP10 GIRLS*\n\n"
    
    for i, (url, data) in enumerate(sorted_profiles, 1):
        safe_name = safe_markdown(data.get('name', ''))
        text += f"{i}\\. {safe_name} ‚Äî üåü {data['total_score']} \\({data['vote_count']}\\)\n"
    
    await update.message.reply_text(text, parse_mode='MarkdownV2')

async def toppeoplereset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã")
        return
    
    await update.message.reply_text(
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï: –ü–û–õ–ù–´–ô –°–ë–†–û–° –†–ï–ô–¢–ò–ù–ì–ê*\n\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –æ—á–∫–∏, –≥–æ–ª–æ—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
        parse_mode='Markdown'
    )

__all__ = [
    'itsme_command',
    'handle_rate_photo',
    'handle_rate_profile',
    'handle_rate_age',
    'handle_rate_name',
    'handle_rate_about',
    'handle_rate_callback',
    'handle_rate_moderation_callback',
    'toppeople_command',
    'topboys_command',
    'topgirls_command',
    'toppeoplereset_command',
    'rating_data',
    'RATING_CALLBACKS',
    'RATING_MOD_CALLBACKS',
]
