from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤
MEDICINE_DATA = {
    'painkillers': {
        'name': 'üíä –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ –∏ –∂–∞—Ä–æ–ø–æ–Ω–∏–∂–∞—é—â–∏–µ',
        'medicines': [
            '–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª ‚Äî Panadol, Rubophen, Paramax',
            '–ò–±—É–ø—Ä–æ—Ñ–µ–Ω ‚Äî Advil Ultra, Algoflex, Voltaren',
            '–ê—Å–ø–∏—Ä–∏–Ω ‚Äî Aspirin, Kalmopyrin',
            '–ù–æ—à–ø–∞ ‚Äî No-Spa',
            '–°–∞—Ä–∏–¥–æ–Ω ‚Äî Saridon',
            '–ê–ª–≥–æ—Ñ–ª–µ–∫—Å –î—É–æ ‚Äî Algoflex Duo',
            '–ö–µ—Ç–∞—Ñ–ª–µ–∫—Å / Ketodex ‚Äî Ketodex',
            '–ö–∞—Ç–∞—Ñ–ª–∞–º ‚Äî Cataflam',
            '–¢–µ—Ä–∞—Ñ–ª—é ‚Äî Neo Citran',
            '–ö–æ–ª–¥—Ä–µ–∫—Å ‚Äî Coldrex'
        ]
    },
    'digestive': {
        'name': 'üî¥ –ü—Ä–æ—Ç–∏–≤–æ–¥–∏–∞—Ä–µ–π–Ω—ã–µ –∏ –ñ–ö–¢',
        'medicines': [
            '–ò–º–æ–¥–∏—É–º ‚Äî Imodium',
            '–õ–æ–ø–µ–¥–∏—É–º ‚Äî Lopedium',
            '–°–º–µ–∫—Ç–∞ ‚Äî Smecta',
            '–ë–∏–æ–≥–∞–∏—è ‚Äî BioGaia',
            '–¢–∞—Å–µ–∫—Ç–∞–Ω ‚Äî Tasectan',
            '–ö—Ä–∞–ª–µ–∫—Å ‚Äî Cralex',
            '–õ–∏–Ω–µ–∫—Å ‚Äî Linex',
            '–û–†–° 200 –•–∏–ø–ø ‚Äî ORS 200 Hipp',
            '–¢–µ–≤–∞-–≠–Ω—Ç–µ—Ä–æ–±–µ–Ω–µ ‚Äî Teva-Enterobene',
            '–õ–æ–ø–∞–∫—É—Ç ‚Äî Lopacut'
        ]
    },
    'allergy': {
        'name': 'ü§ß –ü—Ä–æ—Ç–∏–≤ –∞–ª–ª–µ—Ä–≥–∏–∏',
        'medicines': [
            '–¶–µ—Ç–∏—Ä–∏–∑–∏–Ω ‚Äî Zyrtec, Cetimax',
            '–§–µ–Ω–∏—Å—Ç–∏–ª ‚Äî Fenistil –≥–µ–ª—å',
            '–ê–ª–ª–µ—Ä–≥–æ–¥–∏–ª ‚Äî Allergodil —Å–ø—Ä–µ–π',
            '–ö–ª–∞—Ä–∏—Ç–∏–Ω ‚Äî Claritine',
            '–õ–æ—Ä–¥–µ—Å—Ç–∏–Ω ‚Äî Lordestin',
            '–ö—Å–∏–∑–∞–ª ‚Äî Xyzal',
            '–†–µ–≤–∏—Ü–µ—Ç ‚Äî Revicet',
            '–õ–µ—Ä—Ç–∞–∑–∏–Ω ‚Äî Lertazin',
            '–ó–∏–ª–æ–ª–∞ ‚Äî Zilola'
        ]
    },
    'cough': {
        'name': 'üò∑ –û—Ç –∫–∞—à–ª—è –∏ –ø—Ä–æ—Å—Ç—É–¥—ã',
        'medicines': [
            '–¢—É—Å—Å–∏—Ä–µ–∫—Å ‚Äî Tussirex —Å–∏—Ä–æ–ø',
            '–†–∏–Ω–æ—Ç–∏–æ–ª ‚Äî Rhinothiol —Å–∏—Ä–æ–ø –∏ —Ç–∞–±–ª–µ—Ç–∫–∏',
            '–ê–º–±—Ä–æ–∫—Å–æ–ª ‚Äî Ambroxol',
            '–ù–µ–æ–¢—É—Å—Å ‚Äî NeoTuss —Å–∏—Ä–æ–ø',
            '–ü–∞–∫—Å—Ä–∞–∑–æ–ª ‚Äî Paxirazol'
        ]
    },
    'throat': {
        'name': 'üó£Ô∏è –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –≥–æ—Ä–ª–∞',
        'medicines': [
            '–¢–∞–Ω—Ç—É–º –í–µ—Ä–¥–µ ‚Äî Tantum Verde —Å–ø—Ä–µ–π',
            '–°—Ç—Ä–µ–ø—Å–∏–ª—Å ‚Äî Strepsils –ø–∞—Å—Ç–∏–ª–∫–∏',
            '–§–∞—Ä–∏–Ω–≥–æ—Å–æ–ø—Ç ‚Äî FaringoStop —Å–ø—Ä–µ–π',
            '–°–µ–ø—Ç–æ–ª–µ—Ç–µ ‚Äî Septolete –ø–∞—Å—Ç–∏–ª–∫–∏',
            '–ú–µ–±—É–∫–∞–π–Ω–∞ –ú–∏–Ω—Ç ‚Äî Mebucain Mint –ø–∞—Å—Ç–∏–ª–∫–∏ —Å –ª–∏–¥–æ–∫–∞–∏–Ω–æ–º',
            '–î–æ—Ä–∏—Ç—Ä–∏—Ü–∏–Ω ‚Äî Dorithricin –ø–∞—Å—Ç–∏–ª–∫–∏'
        ]
    },
    'nasal': {
        'name': 'üëÉ –û—Ç –Ω–∞—Å–º–æ—Ä–∫–∞',
        'medicines': [
            '–û–∫—Å–∏–º–µ—Ç–∞–∑–æ–ª–∏–Ω ‚Äî Afrin, Otrivin, Nasivin',
            '–ö—Å–∏–ª–æ–º–µ—Ç–∞–∑–æ–ª–∏–Ω ‚Äî Otrivin',
            '–†–∏–Ω–æ—Å–ø—Ä–µ–π ‚Äî Rhinospray',
            '–ê–∫–≤–∞–º–∞—Ä–∏—Å ‚Äî Aquamaris',
            '–†–∏–Ω–æ—Ñ–ª—É–∏–º—É—Ü–∏–ª ‚Äî Rinofluimucil',
            '–†–µ–≤–µ–Ω—Ç–∏–ª ‚Äî Reventil'
        ]
    },
    'skin': {
        'name': 'ü©π –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –∫–æ–∂–∏ –∏ —Ä–∞–Ω',
        'medicines': [
            '–ë–µ–ø–∞–Ω—Ç–µ–Ω ‚Äî Bepanthen –∫—Ä–µ–º –∏ –º–∞–∑—å',
            '–ü–∞–Ω—Ç–µ—Ñ–µ–Ω ‚Äî Panthenol —Å–ø—Ä–µ–π',
            '–õ–∏–¥–æ–∫–∞–∏–Ω-–≠–≥–∏—Å ‚Äî Lidocain-Egis –º–∞–∑—å',
            '–≠–º–æ—Ñ–∏–∫—Å ‚Äî Emofix –≥–µ–ª—å –∫—Ä–æ–≤–æ–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π',
            '–õ–∞–≤–∞–Ω–∏–¥–∞ ‚Äî Lavanid –≥–µ–ª—å',
            '–î–µ—Ä–º–∞–∑–∏–Ω ‚Äî Dermazin –∫—Ä–µ–º',
            '–ì–µ–Ω—Ç–∞–º–∏—Ü–∏–Ω-–í–∞–≥–Ω–µ—Ä ‚Äî Gentamicin-Wagner –º–∞–∑—å',
            '–¢–∏—Ä–æ–∑—É—Ä ‚Äî Tyrosur –≥–µ–ª—å',
            '–•–∞–Ω—Å–∞–ø–ª–∞—Å—Ç ‚Äî Hansaplast –∫—Ä–µ–º'
        ]
    },
    'other': {
        'name': '‚ûï –ü—Ä–æ—á–∏–µ',
        'medicines': [
            '–†–µ–≥–∏–¥—Ä–æ–Ω ‚Äî ORS 200 Hipp (—Ä–µ–≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è)',
            '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å ‚Äî Carbo Medicinalis',
            '–í–∏—Ç–∞–º–∏–Ω C ‚Äî —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã',
            '–ú–∞–≥–Ω–µ B6 ‚Äî Magne B6',
            '–û–º–µ–≥–∞-3 ‚Äî —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã'
        ]
    }
}

async def hp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    
    keyboard = [
        [
            InlineKeyboardButton("üíä –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ", callback_data="hp:painkillers"),
            InlineKeyboardButton("üî¥ –ñ–ö–¢", callback_data="hp:digestive")
        ],
        [
            InlineKeyboardButton("ü§ß –ê–ª–ª–µ—Ä–≥–∏—è", callback_data="hp:allergy"),
            InlineKeyboardButton("üò∑ –ö–∞—à–µ–ª—å", callback_data="hp:cough")
        ],
        [
            InlineKeyboardButton("üó£Ô∏è –ì–æ—Ä–ª–æ", callback_data="hp:throat"),
            InlineKeyboardButton("üëÉ –ù–∞—Å–º–æ—Ä–∫", callback_data="hp:nasal")
        ],
        [
            InlineKeyboardButton("ü©π –ö–æ–∂–∞/–†–∞–Ω—ã", callback_data="hp:skin"),
            InlineKeyboardButton("‚ûï –ü—Ä–æ—á–∏–µ", callback_data="hp:other")
        ],
        [InlineKeyboardButton("üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="hp:all")]
    ]
    
    text = (
        "üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –í–µ–Ω–≥—Ä–∏–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º\n"
        "‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è"
    )
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_hp_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    category = data[1] if len(data) > 1 else None
    
    if category == "all":
        await show_all_medicines(update, context)
    elif category in MEDICINE_DATA:
        await show_medicine_category(update, context, category)
    elif category == "back":
        await show_medicine_menu(update, context)
    else:
        await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

async def show_medicine_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    
    if category not in MEDICINE_DATA:
        await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    cat_data = MEDICINE_DATA[category]
    
    text = f"**{cat_data['name']}**\n\n"
    
    for i, medicine in enumerate(cat_data['medicines'], 1):
        text += f"{i}. {medicine}\n"
    
    text += "\n‚ö†Ô∏è *–ü–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º*"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="hp:back")]
    ]
    
    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing medicine category: {e}")
        await query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def show_all_medicines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã"""
    query = update.callback_query
    
    text = "üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –í–µ–Ω–≥—Ä–∏–∏**\n\n"
    
    for category_key, cat_data in MEDICINE_DATA.items():
        text += f"\n**{cat_data['name']}**\n"
        for i, medicine in enumerate(cat_data['medicines'], 1):
            text += f"{i}. {medicine}\n"
    
    text += "\n\n‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
    text += "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º\n"
    text += "‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
    text += "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="hp:back")]
    ]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > 4000:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category_key, cat_data in MEDICINE_DATA.items():
            category_text = f"**{cat_data['name']}**\n\n"
            for i, medicine in enumerate(cat_data['medicines'], 1):
                category_text += f"{i}. {medicine}\n"
            
            await query.message.reply_text(
                category_text,
                parse_mode='Markdown'
            )
        
        await query.message.reply_text(
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ: –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        try:
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error showing all medicines: {e}")
            await query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

async def show_medicine_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    query = update.callback_query
    
    keyboard = [
        [
            InlineKeyboardButton("üíä –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ", callback_data="hp:painkillers"),
            InlineKeyboardButton("üî¥ –ñ–ö–¢", callback_data="hp:digestive")
        ],
        [
            InlineKeyboardButton("ü§ß –ê–ª–ª–µ—Ä–≥–∏—è", callback_data="hp:allergy"),
            InlineKeyboardButton("üò∑ –ö–∞—à–µ–ª—å", callback_data="hp:cough")
        ],
        [
            InlineKeyboardButton("üó£Ô∏è –ì–æ—Ä–ª–æ", callback_data="hp:throat"),
            InlineKeyboardButton("üëÉ –ù–∞—Å–º–æ—Ä–∫", callback_data="hp:nasal")
        ],
        [
            InlineKeyboardButton("ü©π –ö–æ–∂–∞/–†–∞–Ω—ã", callback_data="hp:skin"),
            InlineKeyboardButton("‚ûï –ü—Ä–æ—á–∏–µ", callback_data="hp:other")
        ],
        [InlineKeyboardButton("üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="hp:all")]
    ]
    
    text = (
        "üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –í–µ–Ω–≥—Ä–∏–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º\n"
        "‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è"
    )
    
    try:
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing medicine menu: {e}")
        await query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
