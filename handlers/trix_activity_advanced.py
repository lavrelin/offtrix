# -*- coding: utf-8 -*-
"""
TrixActivity - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging
from datetime import datetime

from handlers.trix_activity_service import trix_activity
from services.admin_notifications import admin_notifications

logger = logging.getLogger(__name__)

# ============= –°–¢–ê–¢–ò–°–¢–ò–ö–ê =============

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TrixActivity"""
    user_id = update.effective_user.id
    
    if user_id not in trix_activity.accounts:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /liketime")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = trix_activity.get_top_users(5)
    stats = trix_activity.get_task_stats()
    
    text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê TRIXACTIVITY**\n\n"
    
    text += "üèÜ **–¢–û–ü-5 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**\n"
    for i, (username, balance, max_balance) in enumerate(top_users, 1):
        text += f"{i}. @{username}: {balance}/{max_balance} üí∞\n"
    
    text += f"\nüìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ù–ò–ô:**\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n"
    text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
    text += f"‚Ä¢ –í —Å–ø–æ—Ä–∞—Ö: {stats['disputed']}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}\n"
    text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['pending_confirmations']}\n\n"
    
    text += "**–ü–æ —Ç–∏–ø–∞–º:**\n"
    for task_type, count in stats['by_type'].items():
        emoji = {'like': '‚ù§Ô∏è', 'comment': 'üí¨', 'follow': '‚ûï'}.get(task_type, 'üìå')
        text += f"‚Ä¢ {emoji} {task_type}: {count}\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é", callback_data="lt:menu")]]
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ============= –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–Ø–ú–ò =============

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if user_id not in trix_activity.accounts:
        await query.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /liketime", show_alert=True)
        return
    
    account = trix_activity.accounts[user_id]
    
    keyboard = [
        [
            InlineKeyboardButton(
                f"{'‚úÖ' if account.active_functions['like'] else '‚ùå'} Like",
                callback_data="lt:toggle:like"
            ),
            InlineKeyboardButton(
                f"{'‚úÖ' if account.active_functions['comment'] else '‚ùå'} Comment",
                callback_data="lt:toggle:comment"
            )
        ],
        [
            InlineKeyboardButton(
                f"{'‚úÖ' if account.active_functions['follow'] else '‚ùå'} Follow",
                callback_data="lt:toggle:follow"
            )
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é", callback_data="lt:menu")]
    ]
    
    text = (
        f"‚öôÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–Ø–ú–ò**\n\n"
        f"‚úÖ - —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ (—Å–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞–Ω–∏—è)\n"
        f"‚ùå - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å)\n\n"
        
        f"üìå –í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def toggle_function(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data.split(":")
    func_name = data[2] if len(data) > 2 else None
    
    if user_id not in trix_activity.accounts or not func_name:
        return
    
    account = trix_activity.accounts[user_id]
    current_state = account.active_functions.get(func_name, True)
    account.active_functions[func_name] = not current_state
    
    new_state = "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if account.active_functions[func_name] else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    
    await query.answer(f"–§—É–Ω–∫—Ü–∏—è {func_name}: {new_state}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    await settings_menu(update, context)

# ============= –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–û–ö =============

async def subscribe_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if user_id not in trix_activity.accounts:
        await query.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /liketime", show_alert=True)
        return
    
    account = trix_activity.accounts[user_id]
    
    if account.max_balance >= 20:
        text = (
            "‚úÖ **–í–´ –£–ñ–ï –ù–ê –ú–ê–ö–°–ò–ú–£–ú–ï!**\n\n"
            "üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: 20 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É TrixActivity! üôè"
        )
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é", callback_data="lt:menu")]]
    else:
        text = (
            "üì± **–£–í–ï–õ–ò–ß–ò–¢–¨ –õ–ò–ú–ò–¢ –î–û 20 –¢–†–ò–ö–°–ò–ö–û–í**\n\n"
            "üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
            "‚úÖ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:\n"
            "  ‚Ä¢ Instagram: @budapesttrix\n"
            "  ‚Ä¢ Threads: @budapesttrix\n\n"
            "üìù –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="lt:verify_subs")],
            [InlineKeyboardButton("üîó Instagram", url="https://instagram.com/budapesttrix")],
            [InlineKeyboardButton("üåÄ Threads", url="https://threads.net/@budapesttrix")],
            [InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é", callback_data="lt:menu")]
        ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def verify_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if user_id not in trix_activity.accounts:
        await query.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /liketime", show_alert=True)
        return
    
    account = trix_activity.accounts[user_id]
    
    success, message = trix_activity.request_subscription_check(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    try:
        admin_msg = (
            f"üì± **–ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–û–ö**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{account.username} (ID: {user_id})\n"
            f"üîó Instagram: @{account.instagram or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üåÄ Threads: @{account.threads or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞:\n"
            f"  ‚Ä¢ Instagram @budapesttrix\n"
            f"  ‚Ä¢ Threads @budapesttrix\n\n"
            f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"lt:approve_sub:{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"lt:reject_sub:{user_id}")
            ]
        ]
        
        await context.bot.send_message(
            chat_id=Config.ADMIN_GROUP_ID,
            text=admin_msg,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending subscription check to admin: {e}")
    
    await query.edit_message_text(message, parse_mode='Markdown')

async def approve_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –ø–æ–¥–ø–∏—Å–∫—É"""
    query = update.callback_query
    await query.answer()
    
    if not Config.is_admin(update.effective_user.id):
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã", show_alert=True)
        return
    
    data = query.data.split(":")
    user_id = int(data[2]) if len(data) > 2 else None
    
    if not user_id or user_id not in trix_activity.accounts:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    success, msg = trix_activity.admin_increase_limit(user_id)
    
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        account = trix_activity.accounts[user_id]
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚úÖ **–ü–û–î–ü–ò–°–ö–ò –û–î–û–ë–†–ï–ù–´!**\n\n"
                    f"üéâ –í–∞—à –ª–∏–º–∏—Ç —Ç—Ä–∏–∫—Å–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 20!\n\n"
                    f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 20 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É TrixActivity! üôè"
                ),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error notifying user: {e}")
    
    await query.edit_message_text(f"‚úÖ {msg}")

async def reject_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É"""
    query = update.callback_query
    await query.answer()
    
    if not Config.is_admin(update.effective_user.id):
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã", show_alert=True)
        return
    
    data = query.data.split(":")
    user_id = int(data[2]) if len(data) > 2 else None
    
    if not user_id:
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚ùå **–ü–û–î–ü–ò–°–ö–ò –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–´**\n\n"
                f"‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞:\n"
                f"  ‚Ä¢ Instagram @budapesttrix\n"
                f"  ‚Ä¢ Threads @budapesttrix\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ!"
            ),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error notifying user: {e}")
    
    await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")

# ============= –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ô =============

async def confirm_pending_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    pending = []
    for task_id, conf in trix_activity.pending_confirmations.items():
        if conf['creator_id'] == user_id:
            pending.append((task_id, conf))
    
    if not pending:
        await query.answer("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π", show_alert=True)
        return
    
    task_id, conf = pending[0]
    task = trix_activity.tasks.get(task_id)
    performer = trix_activity.accounts.get(conf['performer_id'])
    
    if not task or not performer:
        await query.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text = (
        f"üìã **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø #{task_id}**\n\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{performer.username}\n"
        f"üìå –¢–∏–ø: {'‚ù§Ô∏è Like' if task.task_type == 'like' else 'üí¨ Comment' if task.task_type == 'comment' else '‚ûï Follow'}\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {task.cost} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int((conf['deadline'] - datetime.now()).total_seconds() // 60)} –º–∏–Ω—É—Ç\n\n"
        f"‚úÖ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
        f"‚ùå - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–æ–≤"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"lt:confirm:{task_id}:approve"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"lt:confirm:{task_id}:reject")
        ]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def process_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data.split(":")
    task_id = int(data[2]) if len(data) > 2 else None
    action = data[3] if len(data) > 3 else None
    
    if not task_id or not action:
        return
    
    task = trix_activity.tasks.get(task_id)
    
    if not task or task.creator_id != user_id:
        await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)
        return
    
    success, message = trix_activity.confirm_task(
        task_id,
        user_id,
        approve=(action == "approve")
    )
    
    if success and action == "reject":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        performer = trix_activity.accounts.get(task.performer_id)
        report = trix_activity.admin_dispute_report(task_id)
        
        try:
            await context.bot.send_message(
                chat_id=Config.ADMIN_GROUP_ID,
                text=report,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error sending dispute report: {e}")
    
    await query.edit_message_text(message, parse_mode='Markdown')

# ============= –≠–ö–°–ü–û–†–¢ =============

__all__ = [
    'stats_command',
    'settings_menu',
    'toggle_function',
    'subscribe_menu',
    'verify_subscriptions',
    'approve_subscription',
    'reject_subscription',
    'confirm_pending_task',
    'process_confirmation'
]
