from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from data.user_data import (
    update_user_activity, is_user_banned, is_user_muted, 
    waiting_users, user_data
)
from data.links_data import add_link, edit_link
from data.games_data import word_games
from utils.validators import is_valid_url
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
chat_settings = {
    'slowmode': 0,
    'antiinvite': False,
    'lockdown': False,
    'flood_limit': 0
}

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_activity(user_id, update.effective_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –∏ –º—É—Ç
    if is_user_banned(user_id):
        try:
            await update.message.delete()
        except:
            pass
        return
    
    if is_user_muted(user_id):
        try:
            await update.message.delete()
            await update.message.reply_text("üîá –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ", disable_notification=True)
        except:
            pass
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    if user_id in waiting_users:
        await handle_waiting_user_input(update, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞)
    if chat_settings.get('antiinvite') and ('t.me/' in text or 'telegram.me/' in text):
        if not Config.is_admin(user_id):
            try:
                await update.message.delete()
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã", disable_notification=True)
            except:
                pass
            return

async def handle_waiting_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    action_data = waiting_users[user_id]
    
    try:
        if action_data['action'] == 'add_link':
            await handle_add_link_url(update, context, text, action_data)
        
        elif action_data['action'] == 'edit_link':
            await handle_edit_link_data(update, context, text, action_data)
        
        elif action_data['action'] == 'edit_word':
            await handle_edit_word_description(update, context, text, action_data)
        
        elif action_data['action'] == 'view_page_edit':
            await handle_view_page_edit(update, context, text, action_data)
    
    except Exception as e:
        logger.error(f"Error handling waiting user input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        waiting_users.pop(user_id, None)

async def handle_add_link_url(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             text: str, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL –¥–ª—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    if not is_valid_url(text.strip()):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å http:// –∏–ª–∏ https://")
        return
    
    new_link = add_link(
        name=action_data['name'],
        url=text.strip(),
        description=action_data['description']
    )
    
    await update.message.reply_text(
        f"‚úÖ **–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"üÜî ID: {new_link['id']}\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {new_link['name']}\n"
        f"üîó URL: {new_link['url']}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {new_link['description']}",
        parse_mode='Markdown'
    )

async def handle_edit_link_data(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               text: str, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–∫–∏"""
    parts = text.split(' | ')
    if len(parts) != 3:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞")
        return
    
    name, description, url = [part.strip() for part in parts]
    
    if not is_valid_url(url):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –≤ URL —á–∞—Å—Ç–∏")
        return
    
    link_id = action_data['link_id']
    updated_link = edit_link(link_id, name, url, description)
    
    if updated_link:
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"üÜî ID: {link_id}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {updated_link['name']}\n"
            f"üîó URL: {updated_link['url']}\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {updated_link['description']}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏")

async def handle_edit_word_description(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      text: str, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞"""
    game_version = action_data['game_version']
    word = action_data['word']
    
    if word in word_games[game_version]['words']:
        word_games[game_version]['words'][word]['description'] = text.strip()
        
        await update.message.reply_text(
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {game_version}:**\n\n{text.strip()}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–≥—Ä–µ {game_version}")

async def handle_view_page_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               text: str, action_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    game_version = action_data['game_version']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    word_games[game_version]['description'] = text.strip()
    
    await update.message.reply_text(
        f"‚úÖ **–°—Ç—Ä–∞–Ω–∏—Ü–∞ {game_version} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:**\n\n{text.strip()}",
        parse_mode='Markdown'
    )

async def handle_media_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ–¥–∏–∞ = –±–æ–ª—å—à–µ XP)
    update_user_activity(user_id, update.effective_user.username)
    if user_id in user_data:
        user_data[user_id]['message_count'] += 1  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –∏ –º—É—Ç
    if is_user_banned(user_id):
        try:
            await update.message.delete()
        except:
            pass
        return
    
    if is_user_muted(user_id):
        try:
            await update.message.delete()
        except:
            pass
        return
