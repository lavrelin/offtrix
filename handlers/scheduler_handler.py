from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from models import Scheduler
from sqlalchemy import select
from utils.permissions import admin_only
import logging

logger = logging.getLogger(__name__)

@admin_only
async def scheduler_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show scheduler status"""
    async with db.get_session() as session:
        result = await session.execute(
            select(Scheduler).where(Scheduler.id == 1)
        )
        scheduler = result.scalar_one_or_none()
        
        if not scheduler:
            # Create default scheduler config
            scheduler = Scheduler(
                id=1,
                enabled=Config.SCHEDULER_ENABLED,
                min_interval=Config.SCHEDULER_MIN_INTERVAL,
                max_interval=Config.SCHEDULER_MAX_INTERVAL,
                message_text=Config.DEFAULT_PROMO_MESSAGE
            )
            session.add(scheduler)
            await session.commit()
        
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if scheduler.enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        last_run = scheduler.last_run.strftime('%d.%m %H:%M') if scheduler.last_run else "–ù–∏–∫–æ–≥–¥–∞"
        
        text = (
            f"‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {scheduler.min_interval}-{scheduler.max_interval} –º–∏–Ω—É—Ç\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_run}\n\n"
            f"*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:*\n{scheduler.message_text}\n\n"
            f"*–ö–æ–º–∞–Ω–¥—ã:*\n"
            f"/scheduler_on - –≤–∫–ª—é—á–∏—Ç—å\n"
            f"/scheduler_off - –≤—ã–∫–ª—é—á–∏—Ç—å\n"
            f"/scheduler_message - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
            f"/scheduler_test - —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')

@admin_only
async def scheduler_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Enable scheduler"""
    async with db.get_session() as session:
        result = await session.execute(
            select(Scheduler).where(Scheduler.id == 1)
        )
        scheduler = result.scalar_one_or_none()
        
        if not scheduler:
            scheduler = Scheduler(
                id=1,
                enabled=True,
                min_interval=Config.SCHEDULER_MIN_INTERVAL,
                max_interval=Config.SCHEDULER_MAX_INTERVAL,
                message_text=Config.DEFAULT_PROMO_MESSAGE
            )
            session.add(scheduler)
        else:
            scheduler.enabled = True
        
        await session.commit()
    
    # Restart scheduler service
    if 'scheduler' in context.bot_data:
        scheduler_service = context.bot_data['scheduler']
        await scheduler_service.start()
    
    await update.message.reply_text("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–∫–ª—é—á–µ–Ω")

@admin_only
async def scheduler_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Disable scheduler"""
    async with db.get_session() as session:
        result = await session.execute(
            select(Scheduler).where(Scheduler.id == 1)
        )
        scheduler = result.scalar_one_or_none()
        
        if scheduler:
            scheduler.enabled = False
            await session.commit()
    
    # Stop scheduler service
    if 'scheduler' in context.bot_data:
        scheduler_service = context.bot_data['scheduler']
        scheduler_service.stop()
    
    await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω")

@admin_only
async def scheduler_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Change scheduler message"""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scheduler_message <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>"
        )
        return
    
    new_text = ' '.join(context.args)
    
    async with db.get_session() as session:
        result = await session.execute(
            select(Scheduler).where(Scheduler.id == 1)
        )
        scheduler = result.scalar_one_or_none()
        
        if not scheduler:
            scheduler = Scheduler(
                id=1,
                enabled=Config.SCHEDULER_ENABLED,
                min_interval=Config.SCHEDULER_MIN_INTERVAL,
                max_interval=Config.SCHEDULER_MAX_INTERVAL,
                message_text=new_text
            )
            session.add(scheduler)
        else:
            scheduler.message_text = new_text
        
        await session.commit()
    
    await update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n{new_text}"
    )

@admin_only
async def scheduler_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Test scheduler message"""
    async with db.get_session() as session:
        result = await session.execute(
            select(Scheduler).where(Scheduler.id == 1)
        )
        scheduler = result.scalar_one_or_none()
        
        if not scheduler:
            message_text = Config.DEFAULT_PROMO_MESSAGE
        else:
            message_text = scheduler.message_text
    
    # Send test message to admin
    await update.message.reply_text(
        f"üì¢ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:*\n\n{message_text}",
        parse_mode='Markdown'
    )
    
    await update.message.reply_text(
        "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º.\n"
        "–í —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç."
    )
