#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python fix_catalog_db.py
"""

import asyncio
import logging
from services.db import db
from models import Base, CatalogPost, CatalogReview, CatalogSession

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def fix_catalog_db():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞"""
    try:
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        await db.init()
        
        if not db.engine:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            return False
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
        logger.info("üìã –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞...")
        
        async with db.engine.begin() as conn:
            # –°–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
            await conn.run_sync(Base.metadata.create_all)
        
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        from sqlalchemy import text
        
        async with db.get_session() as session:
            result = await session.execute(
                text("SELECT tablename FROM pg_tables WHERE schemaname='public' AND tablename LIKE 'catalog_%'")
            )
            
            tables = [row[0] for row in result.fetchall()]
            logger.info(f"üìä –¢–∞–±–ª–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞: {tables}")
            
            required = {'catalog_posts', 'catalog_reviews', 'catalog_subscriptions', 'catalog_sessions'}
            missing = required - set(tables)
            
            if missing:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing}")
                return False
            
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –º–µ—Å—Ç–µ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üß™ –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...")
        
        async with db.get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏
            result = await session.execute(
                text("SELECT COUNT(*) FROM catalog_posts")
            )
            count = result.scalar()
            
            if count == 0:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
                test_post = CatalogPost(
                    user_id=123456789,
                    catalog_link="https://t.me/catalogtrix/1",
                    category="–ú–∞–Ω–∏–∫—é—Ä",
                    name="–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞",
                    tags=["—Ç–µ—Å—Ç", "–º–∞–Ω–∏–∫—é—Ä"],
                    is_active=True
                )
                
                session.add(test_post)
                await session.commit()
                
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                logger.info(f"‚ÑπÔ∏è  –í –∫–∞—Ç–∞–ª–æ–≥–µ —É–∂–µ –µ—Å—Ç—å {count} –∑–∞–ø–∏—Å–µ–π")
        
        await db.close()
        
        logger.info("\n" + "="*60)
        logger.info("‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ö–ê–¢–ê–õ–û–ì–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        logger.info("="*60)
        logger.info("\nüöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: python main.py\n")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    success = asyncio.run(fix_catalog_db())
    exit(0 if success else 1)
