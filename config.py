# ============= config.py - –î–û–ë–ê–í–ò–¢–¨ –í STATS_CHANNELS =============

STATS_CHANNELS = {
    'gambling_chat': int(os.getenv("GAMBLING_CHAT_ID", "-1002922212434")),
    'catalog': int(os.getenv("CATALOG_ID", "-1002601716810")),
    'trade': int(os.getenv("TRADE_ID", "-1003033694255")),
    'budapest_main': int(os.getenv("BUDAPEST_MAIN_ID", "-1002743668534")),
    'budapest_chat': int(os.getenv("BUDAPEST_CHAT_STATS_ID", "-1002883770818")),
    'partners': int(os.getenv("PARTNERS_ID", "-1002919380244")),
    'budapest_people': int(os.getenv("BUDAPEST_PEOPLE_ID", "-1003114019170")),  # –ù–û–í–û–ï
}

# ============= –î–û–ë–ê–í–ò–¢–¨ –í .env =============
BUDAPEST_PEOPLE_ID=-1003114019170


# ============= handlers/rating_handler.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø =============

async def rate_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å –æ–ø—Ä–æ—Å–æ–º - /ratestart
    –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å –∫—É–ª–¥–∞—É–Ω–æ–º 1 —á–∞—Å –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π"""
    
    user_id = update.effective_user.id
    
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã")
        return
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ 1 —á–∞—Å –¥–ª—è /ratestart
    from services.cooldown import cooldown_service
    
    rate_cooldown_key = f"rate_start_{user_id}"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º cooldown —Å–µ—Ä–≤–∏—Å
    can_use, remaining = await cooldown_service.can_post(user_id)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è /ratestart (1 —á–∞—Å)
    if rate_cooldown_key in context.user_data:
        last_use = context.user_data[rate_cooldown_key]
        elapsed = (datetime.now() - last_use).total_seconds()
        
        if elapsed < 3600:  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
            remaining_minutes = int((3600 - elapsed) / 60)
            await update.message.reply_text(
                f"‚è∞ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ {remaining_minutes} –º–∏–Ω—É—Ç"
            )
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data[rate_cooldown_key] = datetime.now()
    
    context.user_data['rate_step'] = 'photo'
    context.user_data['rate_status'] = 'pending'  # –°—Ç–∞—Ç—É—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    
    keyboard = [[InlineKeyboardButton("üöó –û—Ç–º–µ–Ω–∞", callback_data="rate:cancel")]]
    
    text = (
        "üìä **–°–û–ó–î–ê–ù–ò–ï –†–ï–ô–¢–ò–ù–ì–ê –° –û–ü–†–û–°–û–ú**\n\n"
        "–®–∞–≥ 1Ô∏è‚É£ –∏–∑ 3Ô∏è‚É£\n\n"
        "‚ö†Ô∏è **–ù–æ–≤–æ–µ:** –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    )
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    context.user_data['waiting_for'] = 'rate_photo'


async def publish_rate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –æ–ø—Ä–æ—Å–æ–º - –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    photo_file_id = context.user_data.get('rate_photo_file_id')
    profile_url = context.user_data.get('rate_profile')
    gender = context.user_data.get('rate_gender')
    
    if not all([photo_file_id, profile_url, gender]):
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞
        post_id = len(rating_data['posts']) + 1
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–æ—Å–∞ (–¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        keyboard = [
            [
                InlineKeyboardButton("üò≠ -2", callback_data=f"rate:vote:{post_id}:-2"),
                InlineKeyboardButton("üëé -1", callback_data=f"rate:vote:{post_id}:-1"),
                InlineKeyboardButton("üòê 0", callback_data=f"rate:vote:{post_id}:0"),
                InlineKeyboardButton("üëç +1", callback_data=f"rate:vote:{post_id}:1"),
                InlineKeyboardButton("üî• +2", callback_data=f"rate:vote:{post_id}:2"),
            ]
        ]
        
        # –ü–æ–¥–ø–∏—Å—å
        caption = f"üìä Rate {profile_url}\n\n" \
                  f"üë• Gender: {gender.upper()}\n\n" \
                  f"üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ (–ü–û–ö–ê –ë–ï–ó –ü–£–ë–õ–ò–ö–ê–¶–ò–ò)
        rating_data['posts'][post_id] = {
            'profile_url': profile_url,
            'gender': gender,
            'photo_file_id': photo_file_id,
            'caption': caption,
            'votes': {},
            'keyboard': keyboard,
            'created_at': datetime.now(),
            'status': 'pending',  # –ù–û–í–û–ï: —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            'created_by': update.effective_user.id
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if profile_url not in rating_data['profiles']:
            rating_data['profiles'][profile_url] = {
                'gender': gender,
                'total_score': 0,
                'vote_count': 0,
                'post_ids': []
            }
        
        logger.info(f"Created rate post {post_id} for {profile_url} (pending moderation)")
        
        # ‚úÖ –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ú–û–î–ï–†–ê–¶–ò–Æ –≤–º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await send_rating_to_moderation(update, context, post_id, photo_file_id, caption, keyboard)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('rate_photo_file_id', None)
        context.user_data.pop('rate_profile', None)
        context.user_data.pop('rate_gender', None)
        context.user_data.pop('rate_step', None)
        
        await update.callback_query.edit_message_text(
            f"‚úÖ **–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!**\n\n"
            f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {profile_url}\n"
            f"üë• –ü–æ–ª: {gender.upper()}\n"
            f"üÜî Post ID: {post_id}\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error publishing rate post: {e}")
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")


async def send_rating_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   post_id: int, photo_file_id: str, caption: str, keyboard_data: list):
    """‚úÖ –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    
    bot = context.bot
    admin_username = update.effective_user.username or f"ID_{update.effective_user.id}"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            await bot.get_chat(Config.MODERATION_GROUP_ID)
        except Exception as e:
            logger.error(f"Cannot access moderation group: {e}")
            await bot.send_message(
                chat_id=update.effective_user.id,
                text="‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        mod_text = (
            f"‚≠êÔ∏è –ù–û–í–´–ô –†–ï–ô–¢–ò–ù–ì –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò\n\n"
            f"üë§ –û—Ç: @{admin_username}\n"
            f"üÜî Post ID: {post_id}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìä {caption}\n\n"
            f"‚ö†Ô∏è **–î–ï–ô–°–¢–í–ò–Ø:**"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        mod_keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"rate_mod:approve:{post_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rate_mod:reject:{post_id}")
            ]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        msg = await bot.send_photo(
            chat_id=Config.MODERATION_GROUP_ID,
            photo=photo_file_id,
            caption=mod_text,
            reply_markup=InlineKeyboardMarkup(mod_keyboard),
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        rating_data['posts'][post_id]['moderation_message_id'] = msg.message_id
        
        logger.info(f"Rating post {post_id} sent to moderation (message {msg.message_id})")
        
    except Exception as e:
        logger.error(f"Error sending rating to moderation: {e}", exc_info=True)


async def handle_rate_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤"""
    
    query = update.callback_query
    
    if not Config.is_moderator(query.from_user.id):
        await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    if not post_id or post_id not in rating_data['posts']:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    post = rating_data['posts'][post_id]
    
    if action == "approve":
        await approve_rating_post(update, context, post_id, post, query)
    
    elif action == "reject":
        await reject_rating_post(update, context, post_id, post, query)


async def approve_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE,
                              post_id: int, post: dict, query):
    """‚úÖ –ù–û–í–û–ï: –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç"""
    
    try:
        bot = context.bot
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ Budapest People –∫–∞–Ω–∞–ª
        msg = await bot.send_photo(
            chat_id=Config.STATS_CHANNELS['budapest_people'],  # Budapest People
            photo=post['photo_file_id'],
            caption=post['caption'],
            reply_markup=InlineKeyboardMarkup(post['keyboard'])
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
        post['status'] = 'published'
        post['message_id'] = msg.message_id
        post['published_at'] = datetime.now()
        
        logger.info(f"Rating post {post_id} approved and published")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            await bot.edit_message_caption(
                chat_id=Config.MODERATION_GROUP_ID,
                message_id=post['moderation_message_id'],
                caption=f"‚úÖ **–û–î–û–ë–†–ï–ù–û –ò –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û**\n\n"
                        f"üìä {post['caption']}\n"
                        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤: Budapest People\n"
                        f"üÜî Post ID: {post_id}",
                parse_mode='Markdown',
                reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            )
        except Exception as e:
            logger.warning(f"Could not update moderation message: {e}")
        
        await query.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", show_alert=False)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        try:
            await bot.send_message(
                chat_id=post['created_by'],
                text=f"‚úÖ **–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!**\n\n"
                     f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {post['profile_url']}\n"
                     f"üë• –ü–æ–ª: {post['gender'].upper()}\n"
                     f"üìç –ö–∞–Ω–∞–ª: Budapest People\n\n"
                     f"üçÄ –£–¥–∞—á–∏!"
            )
        except Exception as e:
            logger.warning(f"Could not notify author: {e}")
        
    except Exception as e:
        logger.error(f"Error approving rating post: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


async def reject_rating_post(update: Update, context: ContextTypes.DEFAULT_TYPE,
                             post_id: int, post: dict, query):
    """‚úÖ –ù–û–í–û–ï: –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç"""
    
    bot = context.bot
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
    post['status'] = 'rejected'
    post['rejected_at'] = datetime.now()
    post['rejected_by'] = query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try:
        await bot.delete_message(
            chat_id=Config.MODERATION_GROUP_ID,
            message_id=post['moderation_message_id']
        )
    except Exception as e:
        logger.warning(f"Could not delete moderation message: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=post['created_by'],
            text=f"‚ùå **–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω**\n\n"
                 f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {post['profile_url']}\n"
                 f"üë• –ü–æ–ª: {post['gender'].upper()}\n"
                 f"üÜî Post ID: {post_id}\n\n"
                 f"üí° –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
        )
    except Exception as e:
        logger.warning(f"Could not notify author about rejection: {e}")
    
    logger.info(f"Rating post {post_id} rejected by {query.from_user.id}")
    
    await query.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", show_alert=False)


# ============= –û–ë–ù–û–í–ò–¢–¨ main.py - –î–û–ë–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =============

