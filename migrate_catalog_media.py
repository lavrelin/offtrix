#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞-–ø–æ–ª–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥
python migrate_catalog_media.py
"""

import asyncio
import logging
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine
from config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def migrate_catalog_media():
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ–¥–∏–∞ –≤ catalog_posts"""
    try:
        db_url = Config.DATABASE_URL
        
        if not db_url:
            logger.error("‚ùå DATABASE_URL not set!")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL
        if db_url.startswith('postgresql://'):
            db_url = db_url.replace('postgresql://', 'postgresql+asyncpg://', 1)
        elif db_url.startswith('postgres://'):
            db_url = db_url.replace('postgres://', 'postgresql+asyncpg://', 1)
        
        logger.info(f"üìä Database URL: {db_url[:60]}...")
        
        engine = create_async_engine(db_url, echo=False, pool_pre_ping=True)
        
        logger.info("üîÑ –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ–¥–∏–∞...")
        
        # SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        migration_sql = """
        -- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        ALTER TABLE catalog_posts 
        ADD COLUMN IF NOT EXISTS media_type VARCHAR(50),
        ADD COLUMN IF NOT EXISTS media_file_id VARCHAR(500),
        ADD COLUMN IF NOT EXISTS media_group_id VARCHAR(255),
        ADD COLUMN IF NOT EXISTS media_json JSON DEFAULT '[]';
        """
        
        # –î–ª—è SQLite
        if 'sqlite' in db_url:
            migration_sql = """
            -- SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç IF NOT EXISTS –¥–ª—è ALTER, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            """
            # –î–ª—è SQLite –º–∏–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ try-except
        
        try:
            async with engine.begin() as conn:
                if 'sqlite' not in db_url:
                    await conn.execute(text(migration_sql))
                else:
                    # SQLite - –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π
                    columns = [
                        "ALTER TABLE catalog_posts ADD COLUMN media_type TEXT",
                        "ALTER TABLE catalog_posts ADD COLUMN media_file_id TEXT",
                        "ALTER TABLE catalog_posts ADD COLUMN media_group_id TEXT",
                        "ALTER TABLE catalog_posts ADD COLUMN media_json TEXT DEFAULT '[]'"
                    ]
                    for col_sql in columns:
                        try:
                            await conn.execute(text(col_sql))
                        except:
                            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –º–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
            return False
        
        await engine.dispose()
        
        logger.info("\n" + "="*60)
        logger.info("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ú–ï–î–ò–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("="*60)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    print("\n" + "="*60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ú–ï–î–ò–ê-–ö–û–õ–û–ù–û–ö...")
    print("="*60 + "\n")
    
    success = asyncio.run(migrate_catalog_media())
    
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py\n")
        exit(0)
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!\n")
        exit(1)
