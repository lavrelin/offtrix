#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrate_catalog_favorites.py
"""

import asyncio
import logging
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine
from config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def migrate_favorites():
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É favorites –≤ catalog_sessions"""
    try:
        db_url = Config.DATABASE_URL
        
        if not db_url:
            logger.error("‚ùå DATABASE_URL not set!")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL
        if db_url.startswith('postgresql://'):
            db_url = db_url.replace('postgresql://', 'postgresql+asyncpg://', 1)
        elif db_url.startswith('postgres://'):
            db_url = db_url.replace('postgres://', 'postgresql+asyncpg://', 1)
        elif db_url.startswith('sqlite:///'):
            db_url = db_url.replace('sqlite:///', 'sqlite+aiosqlite:///', 1)
        
        logger.info(f"üìä Database URL: {db_url[:60]}...")
        
        engine = create_async_engine(db_url, echo=False, pool_pre_ping=True)
        
        logger.info("üîÑ –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É favorites...")
        
        # SQL –¥–ª—è PostgreSQL
        if 'postgresql' in db_url:
            migration_sql = """
            ALTER TABLE catalog_sessions 
            ADD COLUMN IF NOT EXISTS favorites JSON DEFAULT '[]';
            """
        # SQL –¥–ª—è SQLite
        else:
            migration_sql = """
            ALTER TABLE catalog_sessions 
            ADD COLUMN favorites TEXT DEFAULT '[]';
            """
        
        try:
            async with engine.begin() as conn:
                await conn.execute(text(migration_sql))
            
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ favorites –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            if 'already exists' in str(e).lower() or 'duplicate' in str(e).lower():
                logger.info("‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ favorites —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
        try:
            async with engine.connect() as conn:
                if 'postgresql' in db_url:
                    result = await conn.execute(
                        text("""
                            SELECT column_name, data_type 
                            FROM information_schema.columns 
                            WHERE table_name = 'catalog_sessions'
                        """)
                    )
                else:
                    result = await conn.execute(
                        text("PRAGMA table_info(catalog_sessions)")
                    )
                
                columns = result.fetchall()
                logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã catalog_sessions:")
                for col in columns:
                    logger.info(f"   ‚Ä¢ {col}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ favorites
                has_favorites = False
                for col in columns:
                    if 'favorites' in str(col).lower():
                        has_favorites = True
                        break
                
                if not has_favorites:
                    logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ favorites –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False
        
        await engine.dispose()
        
        logger.info("\n" + "="*60)
        logger.info("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ò–ó–ë–†–ê–ù–ù–û–ì–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("="*60)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    print("\n" + "="*60)
    print("üîÑ –ù–ê–ß–ò–ù–ê–Æ –ú–ò–ì–†–ê–¶–ò–Æ –ò–ó–ë–†–ê–ù–ù–û–ì–û...")
    print("="*60 + "\n")
    
    success = asyncio.run(migrate_favorites())
    
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /favorites\n")
        exit(0)
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ\n")
        exit(1)
